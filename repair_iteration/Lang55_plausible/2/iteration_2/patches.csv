bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
2	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
4	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
6	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
8	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	211	2	replace
10	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	211	2	replace
11	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
12	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
13	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
14	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
15	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
16	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
17	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "	  	non-compiled	[CE]  unclosed  string  literal	123	None	add
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	23	1	replace
19	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	23	1	replace
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
21	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
23	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
25	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	37	2	add
27	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	37	2	add
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
29	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
31	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
32	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
33	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
35	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
37	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
38	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	82	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	78	2	add
40	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	78	2	add
41	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.runningState  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.runningState  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	78	None	add
42	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  this.runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    this.runningState  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  possible  loss  of  precision	78	None	add
43	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  Stopwatch.this.runningState  =  System.currentTimeMillis()  /  1000;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  Stopwatch.this.runningState  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    Stopwatch.this.runningState  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  cannot  find  symbol	78	None	add
44	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  not  a  statement	78	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState  =  STATE_RUNNING;	  this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	38	2	replace
46	[BUG]  [BUGGY]  this.splitState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  STATE_RUNNING;	  this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	38	2	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	204	2	add
48	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	204	2	add
49	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();this.splitState    =    STATE_STOPPED;    int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	204	None	add
50	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STAPPED;  [CE]  cannot  find  symbol  STATE_STAPPED  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STAPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STAPPED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_STAPPED	204	None	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	204	2	add
52	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();this.splitState    =    STATE_STOPPED;    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	204	2	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
54	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
56	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
58	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	97	2	add
60	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	97	2	add
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
62	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
63	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Stopwatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	19	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
65	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
67	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
69	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
71	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
73	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
75	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
76	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
77	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
79	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
81	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
83	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	115	2	replace
85	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	115	2	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	115	2	replace
87	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	115	2	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	115	2	replace
89	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	115	2	replace
90	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(stopTime    ==    null)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	3	None	replace
91	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    if(stopTime    ==    null)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	3	None	replace
92	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(stopTime!=  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(stopTime!=  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(stopTime!=  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(stopTime    ==    null)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	3	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    	compilable	  [FE]  AssertionFailedError  	90	2	replace
94	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    	compilable	  [FE]  AssertionFailedError  	90	2	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	175	2	replace
96	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	175	2	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	175	2	replace
98	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	175	2	replace
99	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	54	None	add
100	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	54	None	add
101	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  Long  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  Long  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    Long  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	54	None	add
102	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  splitState  =  System.currentTimeMillis()  -  1;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  int  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    int  splitState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	54	None	add
103	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	54	None	add
104	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
105	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_RUNNING;  }  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_RUNNING;  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	120	2	replace
107	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	120	2	replace
108	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	120	None	replace
109	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	120	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	117	1	replace
111	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	117	1	replace
112	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
113	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	148	2	replace
115	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	148	2	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	148	1	replace
117	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	148	1	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
119	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
121	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
122	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	1	None	add
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    int  runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
124	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  int  runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    int  runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
126	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
128	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
130	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
132	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
134	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
135	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  splitState  =  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	52	None	add
136	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  Long  splitState  =  System.currentTimeMillis()  -  stopTime;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  Long  splitState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    Long  splitState  =  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	52	None	add
137	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  int  startTime  =  System.currentTimeMillis()  -  stopTime;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  int  startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    int  startTime  =  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  possible  loss  of  precision	52	None	add
138	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  splitState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	52	None	add
139	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	189	None	add
140	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	189	None	add
141	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	189	None	add
142	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	189	None	add
143	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  minute  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  minute  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  minute  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    minute  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  minute	189	None	add
144	[BUG]  [BUGGY]  int  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]        IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  this.runningState  =  STATE_UNSTARTED;	  this.runningState    =    STATE_UNSTARTED;    int    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  not  a  statement	180	None	replace
145	[BUG]  [BUGGY]  long  this.runningState  =  STATE_UNSTARTED;  [CE]  not  a  statement  [FE]          IllegalStateException      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  this.runningState  =  STATE_UNSTARTED;	  this.runningState    =    STATE_UNSTARTED;    int    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  not  a  statement	180	None	replace
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  this.startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    this.startTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	50	2	add
147	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  this.startTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  this.startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    this.startTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	50	2	add
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  stopTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  stopTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	50	2	add
149	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  stopTime  =  System.currentTimeMillis()  +  1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  stopTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  stopTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	50	2	add
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	50	2	add
151	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	50	2	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	50	2	add
153	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	50	2	add
154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	119	2	replace
155	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	119	2	replace
156	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_RUNNING;    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
157	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_RUNNING;    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
158	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	177	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis()  /  stopTime;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	126	2	replace
160	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  /  stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis()  /  stopTime;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	126	2	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis()  -  startTime;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	126	2	replace
162	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis()  -  startTime;	  this.startTime    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	126	2	replace
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	100	1	add
164	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	100	1	add
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	100	1	add
166	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	100	1	add
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	100	1	add
168	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	100	1	add
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	100	1	add
170	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	100	1	add
171	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	100	None	add
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
173	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
175	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
177	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
179	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.splitState  =  STATE_SPLIT;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
181	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
183	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
185	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
187	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
189	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
190	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  stopTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis()  /  stopTime;	  this.splitState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  possible  loss  of  precision	176	None	replace
191	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  STATE_RUNNING;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis()  -  STATE_RUNNING;	  this.splitState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  possible  loss  of  precision	176	None	replace
192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	190	2	replace
193	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	190	2	replace
194	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	190	None	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
196	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
198	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
199	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	191	None	add
200	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  Stopwatch.this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  Stopwatch.this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    Stopwatch.this.runningState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	191	None	add
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
202	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
203	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	188	None	replace
204	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	188	None	replace
205	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    	non-compiled	[CE]  possible  loss  of  precision	26	None	replace
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
207	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    	compilable	  [FE]  AssertionFailedError  	26	2	replace
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
209	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
211	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	86	1	add
213	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	86	1	add
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
215	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
217	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
218	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	193	None	replace
219	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	193	None	replace
220	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	155	None	add
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	155	2	add
222	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	155	2	add
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	155	2	add
224	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	155	2	add
225	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	155	None	add
226	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.	  	non-compiled	[CE]  illegal  start  of  expression	155	None	add
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	181	1	add
228	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	181	1	add
229	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  int  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  int  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    int  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  not  a  statement	181	None	add
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	181	1	add
231	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	181	1	add
232	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    if(stopTime  ==  null)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	181	None	add
233	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	181	1	add
234	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	181	1	add
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
236	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
237	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
238	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
240	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	164	2	add
242	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	164	2	add
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
244	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	93	1	add
246	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	93	1	add
247	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	93	1	add
248	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	93	1	add
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	93	1	add
250	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	93	1	add
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	93	1	add
252	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	93	1	add
253	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	93	None	add
254	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
255	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
256	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	4	1	add
257	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	4	1	add
258	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
259	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
261	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
263	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	34	2	replace
265	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	34	2	replace
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	34	2	replace
267	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	34	2	replace
268	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
269	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
270	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	179	2	replace
271	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	179	2	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	179	2	replace
273	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	179	2	replace
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	146	2	replace
275	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	146	2	replace
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          this.startTime    =    System.currentTimeMillis();    int    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	203	2	replace
277	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          this.startTime    =    System.currentTimeMillis();    int    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	203	2	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  float  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	float  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          this.startTime    =    System.currentTimeMillis();    int    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	203	2	replace
279	[BUG]  [BUGGY]  float  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  float  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	float  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          this.startTime    =    System.currentTimeMillis();    int    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	203	2	replace
280	[BUG]  [BUGGY]  short  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  short  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	short  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          this.startTime    =    System.currentTimeMillis();    int    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	203	None	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	30	2	replace
282	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	30	2	replace
283	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.s  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.s  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.s	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  not  a  statement	30	None	replace
284	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
286	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
288	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	16	1	add
290	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	16	1	add
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
292	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	16	2	add
294	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	16	2	add
295	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
296	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
297	[BUG]  [BUGGY]  This.splitState  =  STATE_STOPPED;  [CE]  cannot  find  symbol  This  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  This.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	This.splitState  =  STATE_STOPPED;	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  cannot  find  symbol  This	205	None	replace
298	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  startTime;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis()  /  startTime;	  this.splitState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	137	None	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	206	2	add
300	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	206	2	add
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	206	2	add
302	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	206	2	add
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	206	2	add
304	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	206	2	add
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	206	2	add
306	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	206	2	add
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	206	2	add
308	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	206	2	add
309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
310	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	10	1	add
312	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	10	1	add
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	2	add
314	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	2	add
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
316	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
317	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	10	None	add
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	11	2	replace
319	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	11	2	replace
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	36	2	replace
321	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	36	2	replace
322	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	36	2	replace
323	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	36	2	replace
324	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
325	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
326	[BUG]  [BUGGY]  Stopwatch.this.runningState  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  Stopwatch.this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	Stopwatch.this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    Stopwatch.this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
327	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  possible  loss  of  precision	159	None	replace
328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
329	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
330	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
331	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
333	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
334	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
335	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_	  	non-compiled	[CE]  ';'  expected	91	None	add
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	29	2	add
337	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	29	2	add
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	29	2	add
339	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	29	2	add
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	29	2	add
341	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	29	2	add
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	29	2	add
343	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	29	2	add
344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	29	2	add
345	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	29	2	add
346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	2	replace
347	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	2	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	1	replace
349	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	1	replace
350	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  IllegalStateException  	9	2	replace
351	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  IllegalStateException  	9	2	replace
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
353	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	35	2	add
355	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	35	2	add
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	35	2	add
357	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	35	2	add
358	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	35	2	add
359	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	35	2	add
360	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	35	2	add
361	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	35	2	add
362	[BUG]  [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	Stopwatch.this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    Stopwatch.this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    Stopwatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	143	2	replace
364	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    Stopwatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	143	2	replace
365	[BUG]  [BUGGY]  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	System.currentTimeMillis();  Stopwatch.this.stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    Stopwatch.this.stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
366	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
367	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
368	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	31	2	add
369	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	31	2	add
370	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	31	2	add
371	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	31	2	add
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	31	2	add
373	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	31	2	add
374	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
375	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	209	2	replace
377	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	209	2	replace
378	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
379	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
380	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
381	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
383	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
385	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.splitState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
387	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	167	1	replace
389	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	167	1	replace
390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	167	2	replace
391	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	167	2	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
393	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
394	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
395	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
397	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.splitState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
399	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.splitState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
401	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
402	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis()  -  1;	  long    splitState    =    System.currentTimeMillis()    -    1;    	non-compiled	[CE]  possible  loss  of  precision	55	None	replace
403	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	18	2	replace
404	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	18	2	replace
405	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	18	2	replace
406	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	18	2	replace
407	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	136	2	replace
408	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	136	2	replace
409	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	136	2	replace
410	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	136	2	replace
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	136	2	replace
412	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	136	2	replace
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	136	2	replace
414	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	136	2	replace
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
416	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
418	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
420	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
421	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
422	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
424	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
425	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	184	1	add
426	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	184	1	add
427	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	184	None	add
428	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	184	None	add
429	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	184	None	add
430	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
431	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
433	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
434	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
435	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
437	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
438	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    int  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  not  a  statement	166	None	add
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
440	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
442	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
444	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
445	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  not  a  statement	133	None	add
446	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
447	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
448	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	25	None	add
449	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	25	None	add
450	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    Long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	25	None	add
451	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	25	None	add
452	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	142	2	replace
453	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	142	2	replace
454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_RUNNING;  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	142	2	replace
455	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_RUNNING;  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	142	2	replace
456	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	63	2	replace
457	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	63	2	replace
458	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	63	2	replace
459	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	63	2	replace
460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis()  /  stopTime;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	53	2	replace
461	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis()  /  stopTime;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	53	2	replace
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis()  -  this.startTime;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	53	2	replace
463	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis()  -  this.startTime;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	53	2	replace
464	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	174	1	add
465	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	174	1	add
466	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	174	1	add
467	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	174	1	add
468	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	174	1	add
469	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	174	1	add
470	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	174	1	add
471	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	174	1	add
472	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	174	None	add
473	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
474	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
475	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
476	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
478	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
480	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
482	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    stopTime;    this.startTime  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	125	2	add
484	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    this.startTime  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	125	2	add
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }	  	compilable	  [FE]  AssertionFailedError  	125	2	add
486	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }	  	compilable	  [FE]  AssertionFailedError  	125	2	add
487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	125	2	add
488	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	125	2	add
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  startTime  =  System.currentTimeMillis()  -  stopTime;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  startTime  =  System.currentTimeMillis()  -  stopTime;  }	  	compilable	  [FE]  AssertionFailedError  	125	2	add
490	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  startTime  =  System.currentTimeMillis()  -  stopTime;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  startTime  =  System.currentTimeMillis()  -  stopTime;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  startTime  =  System.currentTimeMillis()  -  stopTime;  }	  	compilable	  [FE]  AssertionFailedError  	125	2	add
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	125	2	add
492	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    if(this.startTime!=  System.currentTimeMillis()  -  stopTime)  {  this.startTime  =  System.currentTimeMillis()  -  stopTime;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	125	2	add
493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	201	2	add
494	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	201	2	add
495	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  illegal  start  of  expression	201	None	add
496	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	201	2	add
497	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	201	2	add
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	201	2	add
499	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	201	2	add
500	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	201	2	add
501	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	201	2	add
502	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
503	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
504	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
505	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
506	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	22	1	add
507	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	22	1	add
508	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
509	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
511	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
512	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  1;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  /  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis()  /  1;	  this.splitState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	69	None	replace
513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	207	2	replace
514	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	207	2	replace
515	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	157	1	add
516	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	157	1	add
517	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	157	1	add
518	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	157	1	add
519	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	157	1	add
520	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	157	1	add
521	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	157	None	add
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	157	1	add
523	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	157	1	add
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	27	2	add
525	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	27	2	add
526	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	27	None	add
527	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
528	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	27	2	add
530	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	27	2	add
531	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  Stopwatch.this.runningState  =  STATE_SPLIT;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  Stopwatch.this.runningState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  Stopwatch.this.runningState  =  STATE_SPLIT;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    Stopwatch.this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
532	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	5	1	replace
533	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	5	1	replace
534	[BUG]  [BUGGY]  if(stopTime!=  null)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(stopTime!=  null)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(stopTime!=  null)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	5	None	replace
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
536	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
537	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	8	None	add
538	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
539	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	2	add
540	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    StopWatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	8	None	add
541	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  Stopwatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  Stopwatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    Stopwatch.this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
542	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
543	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
544	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	6	1	add
545	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	6	1	add
546	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
547	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
548	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
549	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
550	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
551	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  double  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	double  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	144	2	replace
553	[BUG]  [BUGGY]  double  splitState  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  double  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	double  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	144	2	replace
554	[BUG]  [BUGGY]  short  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  short  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	short  splitState  =  System.currentTimeMillis();	  int    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	144	None	replace
555	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(stopTime!=    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	45	None	replace
556	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  }	          this.runningState    =    STATE_RUNNING;    if(stopTime!=    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	45	None	replace
557	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(stopTime!=    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	45	None	replace
558	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_SUSPENDED;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(stopTime!=    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	45	None	replace
559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  this.startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    this.startTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	48	2	add
560	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  this.startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  this.startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    this.startTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	48	2	add
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
562	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
564	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
565	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
566	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
567	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
568	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
569	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
570	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	13	2	replace
571	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	114	1	add
573	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	114	1	add
574	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	114	None	add
575	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  cannot  find  symbol	114	None	add
576	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	114	2	add
577	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	114	2	add
578	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	114	1	add
579	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	114	1	add
580	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	178	1	add
581	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	178	1	add
582	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	178	1	add
583	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	178	1	add
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	178	1	add
585	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	178	1	add
586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	178	1	add
587	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	178	1	add
588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	178	2	add
589	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	178	2	add
590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
591	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
592	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	12	1	add
593	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	12	1	add
594	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
595	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
596	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	12	2	add
597	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	12	2	add
598	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	12	None	add
599	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  IllegalStateException  	85	2	replace
600	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  IllegalStateException  	85	2	replace
601	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	85	1	replace
602	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	85	1	replace
603	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
604	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
605	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	121	2	add
606	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	121	2	add
607	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	121	None	add
608	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
609	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
610	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  Stopwatch.this.splitState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  Stopwatch.this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    Stopwatch.this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  cannot  find  symbol	121	None	add
611	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	131	1	add
612	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	131	1	add
613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	131	1	add
614	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	131	1	add
615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	131	1	add
616	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	131	1	add
617	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	131	1	add
618	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	131	1	add
619	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	131	1	add
620	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	131	1	add
621	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
622	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
623	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
624	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
625	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
626	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
627	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    int  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  not  a  statement	60	None	add
628	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
629	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
630	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
631	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
632	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
633	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
634	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    int  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  not  a  statement	145	None	add
635	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	145	None	add
636	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
637	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
638	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
639	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
640	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
641	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
642	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
643	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
644	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
645	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
646	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
647	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
648	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	128	2	replace
649	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis()  -  this.runningState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	128	2	replace
650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime  =  System.currentTimeMillis()  /  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	128	2	replace
651	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis()  /  startTime;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	128	2	replace
652	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	128	2	replace
653	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  this.splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis()  -  this.splitState;	  stopTime    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	128	2	replace
654	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	140	2	replace
655	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	140	2	replace
656	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
657	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	140	2	replace
658	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	140	2	replace
659	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis()  /  startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	200	2	replace
660	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  /  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis()  /  startTime;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	200	2	replace
661	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis()  -  this.runningState;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	200	2	replace
662	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  this.runningState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis()  -  this.runningState;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	200	2	replace
663	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	87	2	replace
664	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	87	2	replace
665	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	87	None	replace
666	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  IllegalStateException  	194	2	replace
667	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  IllegalStateException  	194	2	replace
668	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	194	None	replace
669	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	194	None	replace
670	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
671	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
672	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
673	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
674	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
675	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
676	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
677	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
678	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
679	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
680	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	129	1	add
681	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	129	1	add
682	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	1	add
683	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	1	add
684	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	129	1	add
685	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	129	1	add
686	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	129	1	add
687	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	129	1	add
688	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	129	None	add
689	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
690	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
691	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
692	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
693	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    int  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  not  a  statement	147	None	add
694	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
695	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
696	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	147	None	add
697	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	196	1	add
698	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	196	1	add
699	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SUSPENDED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	196	1	add
700	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SUSPENDED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	196	1	add
701	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	196	1	add
702	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	196	1	add
703	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SUSPENDED;    int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	196	None	add
704	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis()  +  1;	  long    splitState    =    System.currentTimeMillis()    +    1;    	non-compiled	[CE]  possible  loss  of  precision	57	None	replace
705	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
706	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
707	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
708	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
709	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
710	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
711	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
712	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
713	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
714	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	17	2	replace
715	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	17	2	replace
716	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.s  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.s  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.s	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  not  a  statement	165	None	replace
717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	165	2	replace
718	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	165	2	replace
719	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	165	2	replace
720	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	165	2	replace
721	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  IllegalStateException  	113	2	replace
722	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  IllegalStateException  	113	2	replace
723	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
724	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
725	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SUSPENDED;    if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
726	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SUSPENDED;    if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
727	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SUSPENDED;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
728	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SUSPENDED;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
729	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SUSPENDED;    if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
730	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SUSPENDED;    if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
731	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SUSPENDED;    if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	39	2	add
732	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SUSPENDED;    if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	39	2	add
733	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	127	2	add
734	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  stopTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    stopTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	127	2	add
735	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  this.runningState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    this.runningState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	127	None	add
736	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	127	None	add
737	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    -    startTime;    startTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	127	2	add
738	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  startTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    startTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	127	2	add
739	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  not  a  statement	127	None	add
740	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
741	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
742	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
743	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
744	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
745	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
746	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
747	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
748	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
749	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
750	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
751	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
752	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	20	2	add
753	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	20	2	add
754	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
755	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
756	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
757	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
758	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	80	1	add
759	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	80	1	add
760	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	80	1	add
761	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	80	1	add
762	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	80	1	add
763	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	80	1	add
764	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	80	None	add
765	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	80	1	add
766	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	80	1	add
767	[BUG]  [BUGGY]  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	7	None	replace
768	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	7	2	replace
769	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	7	2	replace
770	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	21	2	replace
771	[BUG]  [BUGGY]  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	21	2	replace
772	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	32	2	replace
773	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	32	2	replace
774	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.s  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.s  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.s	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  not  a  statement	32	None	replace
775	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
776	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
777	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
778	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
779	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
780	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
781	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
782	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
783	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	74	1	add
784	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	74	1	add
785	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    this.runningState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  possible  loss  of  precision	74	None	add
786	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  Stopwatch.this.runningState  =  System.currentTimeMillis()  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  Stopwatch.this.runningState  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    Stopwatch.this.runningState  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  cannot  find  symbol	74	None	add
787	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    -    1;    startTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	74	2	add
788	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  startTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    startTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	74	2	add
789	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  not  a  statement	74	None	add
790	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	122	2	replace
791	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	  stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	122	2	replace
792	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	122	2	replace
793	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	122	2	replace
794	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
795	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
796	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
797	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
798	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
799	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
800	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  int  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    int  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  not  a  statement	104	None	add
801	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
802	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
803	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	138	None	add
804	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	138	None	add
805	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  Long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	138	None	add
806	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	138	None	add
807	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
808	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
809	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
810	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
811	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
812	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
813	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	56	None	add
814	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	56	None	add
815	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	56	None	add
816	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_RUNNING;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_RUNNING;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	56	None	add
817	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  int  splitState  =  System.currentTimeMillis()  +  1;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  int  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    int  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	56	None	add
818	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	61	2	replace
819	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	61	2	replace
820	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	162	2	add
821	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	162	2	add
822	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	162	2	add
823	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	162	2	add
824	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  illegal  start  of  expression	162	None	add
825	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	162	2	add
826	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	162	2	add
827	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	162	None	add
828	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
829	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
830	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
831	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
832	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
833	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
834	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
835	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
836	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	84	1	add
837	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	84	1	add
838	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	84	1	add
839	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	84	1	add
840	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	84	1	add
841	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	84	1	add
842	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	84	1	add
843	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	84	1	add
844	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	84	2	add
845	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	84	2	add
846	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	95	1	add
847	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	95	1	add
848	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	95	1	add
849	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	95	1	add
850	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	95	1	add
851	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	95	1	add
852	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	95	1	add
853	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	95	1	add
854	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  possible  loss  of  precision	95	None	add
855	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	161	2	replace
856	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	161	2	replace
857	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	161	2	replace
858	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	161	2	replace
859	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	161	2	replace
860	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	161	2	replace
861	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	192	2	replace
862	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	192	2	replace
863	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  IllegalStateException  	192	2	replace
864	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  IllegalStateException  	192	2	replace
865	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	192	1	replace
866	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	192	1	replace
867	[BUG]  [BUGGY]  double  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  double  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	double  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;	  float    splitState    =    System.currentTimeMillis();    this.splitState    =    splitState;    	non-compiled	[CE]  possible  loss  of  precision	154	None	replace
868	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	79	2	replace
869	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  *  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis()  *  1000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	79	2	replace
870	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime  =  System.currentTimeMillis()  /  10000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	79	2	replace
871	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  10000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis()  /  10000;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	79	2	replace
872	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	33	2	add
873	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	33	2	add
874	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	33	2	add
875	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	33	2	add
876	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	33	2	add
877	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	33	2	add
878	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	33	2	add
879	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	33	2	add
880	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	33	2	add
881	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	33	2	add
882	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	76	1	add
883	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	76	1	add
884	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    this.runningState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  possible  loss  of  precision	76	None	add
885	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	76	1	add
886	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    stopTime  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	76	1	add
887	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  Stopwatch.this.runningState  =  System.currentTimeMillis()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  Stopwatch.this.runningState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    Stopwatch.this.runningState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
888	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    +    1;    startTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	76	2	add
889	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  startTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    startTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	76	2	add
890	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
891	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
892	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
893	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
894	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	43	None	add
895	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    if(stopTime!=  null)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	43	None	add
896	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_UNSTARTED;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
897	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_UNSTARTED;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	41	1	add
898	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_UNSTARTED;    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
899	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_UNSTARTED;    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
900	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_UNSTARTED;    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
901	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_UNSTARTED;    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
902	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_UNSTARTED;    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	41	2	add
903	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_UNSTARTED;    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	41	2	add
904	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_UNSTARTED;    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
905	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_UNSTARTED;    if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
906	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  splitState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	199	None	add
907	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  startTime  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	199	None	add
908	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  splitState  =  System.currentTimeMillis()  -  startTime;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  splitState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    Long  splitState  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	199	None	add
909	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  int  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    int  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  possible  loss  of  precision	199	None	add
910	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(stopTime    ==    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	46	None	replace
911	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  }	          this.runningState    =    STATE_RUNNING;    if(stopTime    ==    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	46	None	replace
912	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	134	2	replace
913	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	134	2	replace
914	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
915	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
916	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
917	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
918	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
919	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
920	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
921	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
922	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	1	add
923	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	1	add
924	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	1	add
925	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	1	add
926	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	141	None	add
927	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	2	add
928	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	2	add
929	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	163	2	replace
930	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	163	2	replace
931	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	163	2	replace
932	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	163	2	replace
933	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	163	2	replace
934	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	163	2	replace
935	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
936	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
937	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
938	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
939	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
940	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
941	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
942	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
943	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	98	2	replace
944	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	98	2	replace
945	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	160	2	add
946	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	160	2	add
947	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	160	2	add
948	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	160	2	add
949	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  illegal  start  of  expression	160	None	add
950	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	160	2	add
951	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	160	2	add
952	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	160	None	add
953	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
954	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
955	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
956	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
957	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
958	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState  >=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
959	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
960	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
961	[BUG]  [BUGGY]  short  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  short  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	short  splitState  =  System.currentTimeMillis();  this.splitState  =  splitState;	  int    splitState    =    System.currentTimeMillis();    this.splitState    =    splitState;    	non-compiled	[CE]  possible  loss  of  precision	24	None	replace
962	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	83	2	replace
963	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	83	2	replace
964	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	83	None	replace
965	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	202	None	replace
966	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	202	None	replace
967	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
968	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
969	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
970	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
971	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	116	None	replace
972	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	116	None	replace
973	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	138	None	add
974	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	138	None	add
975	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	184	1	add
976	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	184	1	add
977	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	184	None	add
978	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	184	1	add
979	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	184	1	add
980	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  IllegalStateException  	111	2	replace
981	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  IllegalStateException  	111	2	replace
982	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	2	2	replace
983	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	2	2	replace
984	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	1	add
985	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	1	add
986	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	2	add
987	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	2	add
988	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  IllegalStateException  	59	2	replace
989	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }	  this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  IllegalStateException  	59	2	replace
990	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  IllegalStateException  	59	2	replace
991	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  IllegalStateException  	59	2	replace
992	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
993	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	86	1	add
994	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	101	None	replace
995	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	101	None	replace
996	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	101	None	replace
997	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPL	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	101	None	replace
998	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	136	2	replace
999	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	136	2	replace
1000	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	17	2	replace
1001	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	17	2	replace
1002	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	17	None	replace
1003	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
1004	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	17	2	replace
1005	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	189	None	add
1006	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  time  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  time  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  time  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	189	None	add
1007	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  runState  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	189	None	add
1008	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis()  -  STATE_STOPPED;	  this.splitState    =    System.currentTimeMillis()    -    stopTime;    	non-compiled	[CE]  possible  loss  of  precision	176	None	replace
1009	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.splitState    =    STATE_SPLIT;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	non-compiled	[CE]  possible  loss  of  precision	84	None	add
1010	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1011	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1012	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1013	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1014	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1015	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1016	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1017	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1018	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1019	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1020	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	93	1	add
1021	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	93	1	add
1022	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	93	1	add
1023	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	93	1	add
1024	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_RUNNING;    if(stopTime!=    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	45	None	replace
1025	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	74	1	add
1026	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  long  stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    long  stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	74	1	add
1027	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    -    1;    StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	74	1	add
1028	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    1;    StopWatch.this.stopTime  =  System.currentTimeMillis()  -  1;	  	compilable	  [FE]  AssertionFailedError  	74	1	add
1029	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	25	1	add
1030	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    long  runState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	25	1	add
1031	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	25	None	add
1032	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	25	None	add
1033	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	164	2	add
1034	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	164	2	add
1035	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
1036	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
1037	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
1038	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
1039	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
1040	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	36	None	replace
1041	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1042	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1043	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1044	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1045	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1046	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1047	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1048	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1049	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1050	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1051	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1052	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
1053	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
1054	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	121	None	add
1055	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
1056	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
1057	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1058	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1059	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1060	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1061	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1062	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1063	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1064	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1065	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1066	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1067	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	196	1	add
1068	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_SUSPENDED;    if(this.runningState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	196	1	add
1069	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1070	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1071	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1072	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1073	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1074	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1075	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1076	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1077	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
1078	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
1079	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	149	1	add
1080	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	149	1	add
1081	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	156	2	replace
1082	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	156	2	replace
1083	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	156	2	replace
1084	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	156	2	replace
1085	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	156	None	replace
1086	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis()  -  stopTime  +  1;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	53	2	replace
1087	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis()  -  stopTime  +  1;	  long    splitState    =    System.currentTimeMillis()    -    stopTime;    	compilable	  [FE]  AssertionFailedError  	53	2	replace
1088	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	209	2	replace
1089	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	209	2	replace
1090	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1091	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1092	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1093	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1094	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1095	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1096	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1097	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1098	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	159	None	replace
1099	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	159	None	replace
1100	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	159	None	replace
1101	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  IllegalStateException  	142	2	replace
1102	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  IllegalStateException  	142	2	replace
1103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	142	1	replace
1104	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	142	1	replace
1105	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
1106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	174	1	add
1107	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	174	1	add
1108	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	174	None	add
1109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
1110	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
1111	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_STRING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [CE]  cannot  find  symbol  STATE_STRING  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_STRING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_STRING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	non-compiled	[CE]  cannot  find  symbol  STATE_STRING	89	None	add
1112	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
1113	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	34	None	replace
1114	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
1115	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	206	None	add
1116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	206	2	add
1117	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	206	2	add
1118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SUSPENDED;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1119	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SUSPENDED;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1121	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_SUSPENDED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1122	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  System.arraycopy(this.splitState,  0,  this.splitState,  0,  0);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  System.arraycopy(this.splitState,  0,  this.splitState,  0,  0);  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    System.arraycopy(this.splitState,  0,  this.splitState,  0,  0);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	add
1123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  int  splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SPLIT;    int  splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
1124	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  int  splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  int  splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    int  splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	37	1	add
1125	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  System.arraycopy(this.splitState,  0,  this.splitState,  0,  stopTime);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  System.arraycopy(this.splitState,  0,  this.splitState,  0,  stopTime);  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    System.arraycopy(this.splitState,  0,  this.splitState,  0,  stopTime);	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	37	None	add
1126	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  Stopwatch.this.splitState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  Stopwatch.this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  Stopwatch.this.splitState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    Stopwatch.this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	82	2	add
1128	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	82	2	add
1129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
1130	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
1131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	85	2	replace
1132	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	85	2	replace
1133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	85	2	replace
1134	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	85	2	replace
1135	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	85	None	replace
1136	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	94	None	replace
1137	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	94	None	replace
1138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	94	2	replace
1139	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	94	2	replace
1140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	27	2	add
1141	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	27	2	add
1142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	33	2	add
1143	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	33	2	add
1144	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	33	None	add
1145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	33	2	add
1146	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	33	2	add
1147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	33	2	add
1148	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	33	2	add
1149	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  }  else  {  this.runningState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	18	None	replace
1150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1151	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1153	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1154	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1155	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1157	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1158	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis()  -  startTime  +  1;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	200	2	replace
1159	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis()  -  startTime  +  1;	  long    splitState    =    System.currentTimeMillis()    -    startTime;    	compilable	  [FE]  AssertionFailedError  	200	2	replace
1160	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_UNSTARTED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(stopTime    ==    null)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	3	None	replace
1161	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(stopTime    ==    null)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	3	None	replace
1162	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_S  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_S  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	132	None	replace
1163	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	132	None	replace
1164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	6	1	add
1165	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	6	1	add
1166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
1167	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
1168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	6	1	add
1169	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	6	1	add
1170	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  startTime  +  1;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis()  -  startTime  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis()  -  startTime  +  1;	  this.splitState    =    System.currentTimeMillis()    -    startTime;    	non-compiled	[CE]  possible  loss  of  precision	137	None	replace
1171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	133	1	add
1172	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	133	1	add
1173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
1174	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
1175	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	133	None	add
1176	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill	  	non-compiled	[CE]  ';'  expected	133	None	add
1177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	190	2	replace
1178	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	190	2	replace
1179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	190	2	replace
1180	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	190	2	replace
1181	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	190	2	replace
1182	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	190	2	replace
1183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
1184	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
1185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
1186	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  stopTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
1187	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
1188	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
1189	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
1190	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    if(this.startTime!=  System.currentTimeMillis()  -  1)  {  this.startTime  =  System.currentTimeMillis()  -  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  -  1;  }	  	compilable	  [FE]  AssertionFailedError  	48	2	add
1191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
1192	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
1193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
1194	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
1195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.stopTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.stopTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	201	2	add
1196	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.stopTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.stopTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.stopTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	201	2	add
1197	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	201	None	add
1198	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  IllegalStateException  	115	2	replace
1199	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  IllegalStateException  	115	2	replace
1200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState  ==  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_UNSTARTED;    if(this.splitState  ==  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
1201	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState  ==  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState  ==  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_UNSTARTED;    if(this.splitState  ==  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
1202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState  ==  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_UNSTARTED;    if(this.splitState  ==  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
1203	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState  ==  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState  ==  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_UNSTARTED;    if(this.splitState  ==  STATE_UNSTARTED)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	41	1	add
1204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1205	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1207	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1208	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	60	None	add
1209	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1210	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1211	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMill	  	non-compiled	[CE]  ';'  expected	60	None	add
1212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  splitState  =  System.currentTimeMillis()  -  1L;	  long    splitState    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	55	2	replace
1213	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis()  -  1L;	  long    splitState    =    System.currentTimeMillis()    -    1;    	compilable	  [FE]  AssertionFailedError  	55	2	replace
1214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
1215	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
1216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
1217	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
1218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
1219	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
1220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  startTime  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	52	1	add
1221	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  startTime  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  startTime  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	52	1	add
1222	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  stopTime  =  System.currentTimeMillis()  -  stopTime;  [CE]  variable  stopTime  might  not  have  been  initialized  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  stopTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  stopTime  =  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  variable  stopTime  might  not  have  been  initialized	52	None	add
1223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  runState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  runState  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	52	1	add
1224	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  runState  =  System.currentTimeMillis()  -  stopTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  stopTime;  long  runState  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    stopTime;    long  runState  =  System.currentTimeMillis()  -  stopTime;	  	compilable	  [FE]  AssertionFailedError  	52	1	add
1225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	181	1	add
1226	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	181	1	add
1227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	181	2	add
1228	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	181	2	add
1229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	181	1	add
1230	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	181	1	add
1231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    +    1;    StopWatch.this.stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	76	1	add
1232	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  StopWatch.this.stopTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    StopWatch.this.stopTime  =  System.currentTimeMillis()  +  1;	  	compilable	  [FE]  AssertionFailedError  	76	1	add
1233	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  not  a  statement	76	None	add
1234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	2	replace
1235	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	2	replace
1236	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	2	replace
1237	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	2	replace
1238	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeM	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	163	None	replace
1239	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  <identifier>  expected	163	None	replace
1240	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.current  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.current  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.current	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	163	None	replace
1241	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	11	None	replace
1242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	11	2	replace
1243	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	11	2	replace
1244	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	211	2	replace
1245	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	211	2	replace
1246	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	211	2	replace
1247	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	211	2	replace
1248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1249	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1251	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1253	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1254	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	172	None	add
1255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1256	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
1258	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
1259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
1260	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_RUNNING)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	70	1	add
1261	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1262	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1264	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1266	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1267	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	155	None	add
1268	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	155	None	add
1269	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	155	None	add
1270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	155	2	add
1271	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	155	2	add
1272	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	155	None	add
1273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1274	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1275	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  StopTime  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    StopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  StopTime	8	None	add
1276	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	31	None	add
1277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	31	2	add
1278	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	31	2	add
1279	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	31	2	add
1280	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	31	2	add
1281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	178	1	add
1282	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	178	1	add
1283	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STUPPED;  [CE]  cannot  find  symbol  STATE_STUPPED  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STUPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STUPPED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_STUPPED	178	None	add
1284	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1285	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1287	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1288	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	66	None	add
1289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1290	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	66	2	add
1292	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	66	2	add
1293	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1294	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1296	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1298	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1300	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1302	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	21	2	replace
1304	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	21	2	replace
1305	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	21	2	replace
1306	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	21	2	replace
1307	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	21	None	replace
1308	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_UNSTARTED;    	non-compiled	[CE]  possible  loss  of  precision	194	None	replace
1309	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	79	2	replace
1310	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000L;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis()  /  1000L;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	79	2	replace
1311	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
1312	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
1313	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMill  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMill	  	non-compiled	[CE]  ';'  expected	145	None	add
1314	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	207	None	replace
1315	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	207	None	replace
1316	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	193	None	replace
1317	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopWatch.this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
1318	[BUG]  [BUGGY]  long  stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  stopTime  =  System.currentTimeMillis();  StopWatch.this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    StopWatch.this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
1319	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    long  splitState  =  System.currentTimeMillis()  +  1;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	56	None	add
1320	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  Long  splitState  =  System.currentTimeMillis()  +  1;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  +  1;  Long  splitState  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    +    1;    Long  splitState  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	56	None	add
1321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
1322	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
1323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1324	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1326	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1327	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	64	None	add
1328	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1329	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1330	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
1331	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	140	None	replace
1332	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	177	None	replace
1333	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	177	None	replace
1334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	162	2	add
1335	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	162	2	add
1336	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	162	None	add
1337	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	162	None	add
1338	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	162	None	add
1339	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	162	2	add
1340	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	162	2	add
1341	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	179	2	replace
1342	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	179	2	replace
1343	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_S  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	179	None	replace
1344	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	87	2	replace
1345	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	87	2	replace
1346	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	87	None	replace
1347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	98	2	replace
1348	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	98	2	replace
1349	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	98	None	replace
1350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	160	2	add
1351	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	160	2	add
1352	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	160	None	add
1353	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	160	None	add
1354	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	160	None	add
1355	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	160	None	add
1356	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
1357	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
1358	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
1359	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
1360	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
1361	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
1362	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
1363	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException(   "   ");  }  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  IllegalStateException  	123	2	add
1364	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(stopTime    ==    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	46	None	replace
1365	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_SUSPENDED;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_RUNNING;    if(stopTime    ==    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	46	None	replace
1366	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(stopTime    ==    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	46	None	replace
1367	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  int  startTime  =  System.currentTimeMillis()  -  stopTime;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  int  startTime  =  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    int  startTime  =  System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  possible  loss  of  precision	125	None	add
1368	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  System.currentTimeMillis()  -  stopTime;  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  System.currentTimeMillis()  -  stopTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    System.currentTimeMillis()  -  stopTime;	  	non-compiled	[CE]  not  a  statement	125	None	add
1369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    -    stopTime;    this.startTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	125	2	add
1370	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    this.startTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	125	2	add
1371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	100	1	add
1372	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	100	1	add
1373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
1374	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
1375	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
1376	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
1377	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	58	2	add
1378	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	58	2	add
1379	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	58	None	add
1380	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	134	1	replace
1381	[BUG]  [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	134	1	replace
1382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
1383	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState  ==  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState  ==  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	112	1	add
1384	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
1385	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
1386	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
1387	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
1388	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
1389	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	147	1	add
1390	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
1391	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	110	1	add
1392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	35	2	add
1393	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	35	2	add
1394	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	35	None	add
1395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
1396	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
1397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
1398	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
1399	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
1400	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
1401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	129	1	add
1402	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	129	1	add
1403	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	1	add
1404	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	129	1	add
1405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1406	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1408	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1410	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
1412	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
1413	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STAPPED;  [CE]  cannot  find  symbol  STATE_STAPPED  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STAPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STAPPED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_STAPPED	1	None	add
1414	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	83	None	replace
1415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	78	2	add
1416	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    StopWatch.this.stopTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	78	2	add
1417	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  Stopwatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  Stopwatch.this.stopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    Stopwatch.this.stopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  cannot  find  symbol	78	None	add
1418	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	188	None	replace
1419	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  splitState  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    this.runningState    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	188	None	replace
1420	[BUG]  [BUGGY]  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          this.startTime    =    System.currentTimeMillis();    int    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	203	None	replace
1421	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	2	replace
1422	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	9	2	replace
1423	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	96	None	replace
1424	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SU	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	96	None	replace
1425	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	96	2	replace
1426	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	96	2	replace
1427	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	96	2	replace
1428	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	96	2	replace
1429	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	80	1	add
1430	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	80	1	add
1431	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	95	1	add
1432	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	95	1	add
1433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	95	1	add
1434	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	95	1	add
1435	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	114	1	add
1436	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	114	1	add
1437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1438	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1440	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1442	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  STATE_STOPPED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
1444	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
1445	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
1446	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	16	1	add
1447	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	29	None	add
1448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	2	add
1449	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	2	add
1450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	2	add
1451	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	29	2	add
1452	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_RUNNING;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_RUNNING;    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
1453	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.split  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.split  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.split	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  not  a  statement	165	None	replace
1454	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	131	1	add
1455	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	131	1	add
1456	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	131	1	add
1457	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	131	1	add
1458	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  possible  loss  of  precision	118	None	replace
1459	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	120	None	replace
1460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	92	2	replace
1461	[BUG]  [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.splitState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	92	2	replace
1462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	92	2	replace
1463	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	92	2	replace
1464	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
1465	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
1466	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
1467	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
1468	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
1469	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
1470	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeM	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	161	None	replace
1471	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  <identifier>  expected	161	None	replace
1472	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.current  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.current  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.current	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  ';'  expected	161	None	replace
1473	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	157	None	add
1474	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	157	None	add
1475	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
1476	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
1477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
1478	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	20	2	add
1479	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  IllegalStateException  	113	2	replace
1480	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  if(this.runningState    ==    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  IllegalStateException  	113	2	replace
1481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
1482	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	81	2	replace
1483	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  ';'  expected	81	None	replace
1484	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_S	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	175	None	replace
1485	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	175	None	replace
1486	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	175	None	replace
1487	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
1488	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  startTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
1489	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  endTime  =  System.currentTimeMillis();  [CE]  cannot  find  symbol  endTime  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  endTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  endTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  cannot  find  symbol  endTime	191	None	add
1490	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	124	2	replace
1491	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	124	2	replace
1492	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Stopwatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	19	None	replace
1493	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Stopwatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	19	2	replace
1494	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Stopwatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	19	2	replace
1495	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
1496	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
1497	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
1498	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
1499	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
1500	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.splitState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
1501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.splitState!=  STATE_SUSPENDED)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
1502	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_SUSPENDED)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.splitState!=  STATE_SUSPENDED)  {  startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	73	2	replace
1503	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMill  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMill	          stopTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	13	None	replace
1504	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	151	1	add
1505	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	151	1	add
1506	[BUG]  [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  splitState  =  System.currentTimeMillis();  int  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          long    splitState    =    System.currentTimeMillis();    long    splitState    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  possible  loss  of  precision	117	None	replace
1507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1508	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1509	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1510	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1511	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	50	2	add
1512	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis()  +  1)  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	50	2	add
1513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	50	2	add
1514	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    if(this.startTime!=  System.currentTimeMillis())  {  this.startTime  =  System.currentTimeMillis()  +  1;  }  else  {  this.startTime  =  System.currentTimeMillis()  +  1;  }	  	compilable	  [FE]  AssertionFailedError  	50	2	add
1515	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
1516	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
1517	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    	non-compiled	[CE]  ';'  expected	23	None	replace
1518	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
1519	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
1520	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
1521	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
1522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    	compilable	  [FE]  AssertionFailedError  	90	2	replace
1523	[BUG]  [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    	compilable	  [FE]  AssertionFailedError  	90	2	replace
1524	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	202	None	replace
1525	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	202	None	replace
1526	[BUG]  [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  System.currentTimeMillis();  if(this.splitState!=  STATE_SUSPENDED)  {  this.splitState  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  possible  loss  of  precision	202	None	replace
1527	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  if(this.runningState!=  STATE_UNSTARTED)  {  long  startTime  =  System.currentTimeMillis()  -  startTime;  }  [CE]  variable  startTime  might  not  have  been  initialized  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  -  startTime;  if(this.runningState!=  STATE_UNSTARTED)  {  long  startTime  =  System.currentTimeMillis()  -  startTime;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    -    startTime;    if(this.runningState!=  STATE_UNSTARTED)  {  long  startTime  =  System.currentTimeMillis()  -  startTime;  }	  	non-compiled	[CE]  variable  startTime  might  not  have  been  initialized	127	None	add
1528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1529	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1530	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1531	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1532	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	2	add
1533	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	10	2	add
1534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  runState  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	199	1	add
1535	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  runState  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  runState  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	199	1	add
1536	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  Long  startTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    Long  startTime  =  System.currentTimeMillis()  -  startTime;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	199	None	add
1537	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startedTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  startedTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	199	1	add
1538	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startedTime  =  System.currentTimeMillis()  -  startTime;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  startTime;  long  startedTime  =  System.currentTimeMillis()  -  startTime;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    startTime;    long  startedTime  =  System.currentTimeMillis()  -  startTime;	  	compilable	  [FE]  AssertionFailedError  	199	1	add
1539	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1540	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1541	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1542	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_RUNNING;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_RUNNING;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_RUNNING;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1544	[BUG]  [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	39	1	add
1545	[BUG]  [BUGGY]  int  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  this.runningState  =  STATE_STOPPED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(stopTime    ==    null)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  not  a  statement	3	None	replace
1546	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	130	1	replace
1547	[BUG]  [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  AssertionFailedError  	130	1	replace
1548	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
1549	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
1550	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
1551	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
1552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
1553	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
1554	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
1555	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	58	1	add
1556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
1557	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  AssertionFailedError  	67	1	replace
1558	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  IllegalStateException  	67	2	replace
1559	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    	compilable	  [FE]  IllegalStateException  	67	2	replace
1560	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	2	replace
1561	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	105	2	replace
1562	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1563	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	166	1	add
1564	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	long  startTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	192	2	replace
1565	[BUG]  [BUGGY]  long  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long  startTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	192	2	replace
1566	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	startTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	192	2	replace
1567	[BUG]  [BUGGY]  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	startTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    startTime    =    System.currentTimeMillis();    	compilable	  [FE]  AssertionFailedError  	192	2	replace
1568	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
1569	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
1570	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
1571	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	27	2	add
1572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1573	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1574	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1575	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1576	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1577	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	64	1	add
1578	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  IllegalStateException  	7	2	replace
1579	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  IllegalStateException  	7	2	replace
1580	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	7	2	replace
1581	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	7	2	replace
1582	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	7	2	replace
1583	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	7	2	replace
1584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	165	2	replace
1585	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	165	2	replace
1586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1587	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1589	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1590	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1591	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	4	1	add
1592	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
1593	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
1594	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
1595	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	210	2	add
1596	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  This.splitState  =  STATE_UNSTARTED;  [CE]  cannot  find  symbol  This  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  This.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_UNSTARTED;    This.splitState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  cannot  find  symbol  This	41	None	add
1597	[BUG]  [BUGGY]  this.splitState  =  STATE_UNSTARTED;  this.splitState  =  STATE_UNISTARTED;  [CE]  cannot  find  symbol  STATE_UNISTARTED  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_UNSTARTED;  this.splitState  =  STATE_UNISTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_UNSTARTED;    this.splitState  =  STATE_UNISTARTED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_UNISTARTED	41	None	add
1598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	6	1	add
1599	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	6	1	add
1600	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
1601	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	6	1	add
1602	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	146	2	replace
1603	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	146	2	replace
1604	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	146	2	replace
1605	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_UNSTARTED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	146	2	replace
1606	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMill  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMill  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMill	  	non-compiled	[CE]  ';'  expected	155	None	add
1607	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	155	2	add
1608	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	155	2	add
1609	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeM	  	non-compiled	[CE]  ';'  expected	155	None	add
1610	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1611	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	168	1	add
1612	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis()  -  1;  long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis()    -    1;    long  splitState  =  System.currentTimeMillis()  -  1;  this.runningState  =  STATE_UNSTARTED;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	54	None	add
1613	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	157	1	add
1614	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	157	1	add
1615	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
1616	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
1617	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
1618	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
1619	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
1620	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	133	1	add
1621	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
1622	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	32	2	replace
1623	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	32	2	replace
1624	[BUG]  [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	32	None	replace
1625	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	29	2	add
1626	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	29	2	add
1627	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	29	2	add
1628	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	29	2	add
1629	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1630	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	8	1	add
1631	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	162	2	add
1632	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	162	2	add
1633	[BUG]  [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SHIT;  [CE]  variable  splitState  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_RUNNING;  long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SHIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	long    splitState    =    System.currentTimeMillis();    this.splitState    =    STATE_RUNNING;    long  splitState  =  System.currentTimeMillis();  this.splitState  =  STATE_SHIT;	  	non-compiled	[CE]  variable  splitState  is  already  defined  in  method  suspend()	25	None	add
1634	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
1635	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
1636	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
1637	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
1638	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	174	1	add
1639	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	174	1	add
1640	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	174	None	add
1641	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Stopwatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	19	None	replace
1642	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  Stopwatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    Stopwatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	non-compiled	[CE]  ';'  expected	19	None	replace
1643	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1644	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	104	1	add
1645	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  int  this.startTime  =  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  int  this.startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    int  this.startTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  not  a  statement	48	None	add
1646	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  This.startTime  =  System.currentTimeMillis()  -  1;  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  This.startTime  =  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    This.startTime  =  System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  cannot  find  symbol  This	48	None	add
1647	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  1;  System.currentTimeMillis()  -  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    1;    System.currentTimeMillis()  -  1;	  	non-compiled	[CE]  not  a  statement	48	None	add
1648	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
1649	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	149	1	add
1650	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	160	2	add
1651	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	160	2	add
1652	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  this.startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    this.startTime  =  System.currentTimeMillis();  this.runningState  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	160	None	add
1653	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
1654	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.splitState!=  STATE_SPLIT)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
1655	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
1656	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	89	1	add
1657	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(stopTime!=  null)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(stopTime!=    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	45	None	replace
1658	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
1659	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	22	1	add
1660	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1661	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1662	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1663	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState!=    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	170	1	add
1664	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [CE]  variable  stopTime  is  already  defined  in  method  suspend()  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    long  stopTime  =  System.currentTimeMillis();  long  runTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        long    stopTime    =    System.currentTimeMillis();    long  runTime  =  System.currentTimeMillis();  long  stopTime  =  System.currentTimeMillis();	  	non-compiled	[CE]  variable  stopTime  is  already  defined  in  method  suspend()	189	None	add
1665	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
1666	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
1667	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
1668	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState!=    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	145	1	add
1669	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_UNSPLIT;	  this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  RuntimeException  	59	2	replace
1670	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSPLIT;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_UNSPLIT;	  this.runningState    =    STATE_UNSTARTED;    this.runningState    =    STATE_UNSTARTED;    	compilable	  [FE]  RuntimeException  	59	2	replace
1671	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	207	2	replace
1672	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	compilable	  [FE]  AssertionFailedError  	207	2	replace
1673	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.splitState  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.splitState  =  System.currentTimeMillis();	  	non-compiled	[CE]  possible  loss  of  precision	82	None	add
1674	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1675	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1676	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1677	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_SUSPENDED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1678	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1679	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	91	2	add
1680	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	184	1	add
1681	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	184	1	add
1682	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_ROUTING;  this.runningState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  STATE_ROUTING  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_ROUTING;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_ROUTING;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_ROUTING	184	None	add
1683	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
1684	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
1685	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	34	2	replace
1686	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	34	2	replace
1687	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
1688	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	          this.splitState    =    STATE_STOPPED;    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	109	2	replace
1689	[BUG]  [BUGGY]  Long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  Long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	Long  startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();	          this.startTime    =    System.currentTimeMillis();    int    startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    	non-compiled	[CE]  incompatible  types	203	None	replace
1690	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	181	1	add
1691	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	181	1	add
1692	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_UPSTARTED;  this.runningState  =  STATE_SUSPENDED;  [CE]  cannot  find  symbol  STATE_UPSTARTED  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_UPSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        this.runningState    =    STATE_SUSPENDED;    this.runningState  =  STATE_UPSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	non-compiled	[CE]  cannot  find  symbol  STATE_UPSTARTED	181	None	add
1693	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1694	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_UNSTARTED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1695	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1696	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    this.splitState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	108	2	add
1697	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  int  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  int  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();this.splitState    =    STATE_STOPPED;    int  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  not  a  statement	204	None	add
1698	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
1699	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	164	2	add
1700	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	5	2	replace
1701	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }	          this.runningState    =    STATE_STOPPED;    this.runningState    =    STATE_STOPPED;    if(this.runningState!=    STATE_SUSPENDED)    {    this.runningState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	5	2	replace
1702	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1703	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1704	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1705	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1706	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1707	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_RUNNING;  }  if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    if(this.runningState  ==  STATE_RUNNING)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	172	1	add
1708	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	33	2	add
1709	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	33	2	add
1710	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	18	2	replace
1711	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    this.runningState    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    	compilable	  [FE]  IllegalStateException  	18	2	replace
1712	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	134	2	replace
1713	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	134	2	replace
1714	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	61	1	replace
1715	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	61	1	replace
1716	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	61	1	replace
1717	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_SUSPENDED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	61	1	replace
1718	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime  =  System.currentTimeMillis()  /  2;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	79	2	replace
1719	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  2;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime  =  System.currentTimeMillis()  /  2;	  stopTime    =    System.currentTimeMillis()    /    1000;    	compilable	  [FE]  AssertionFailedError  	79	2	replace
1720	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
1721	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    startTime  =  System.currentTimeMillis();  long  splitState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        startTime    =    System.currentTimeMillis();    long  splitState  =  System.currentTimeMillis();  startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	191	2	add
1722	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
1723	[BUG]  [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_STOPPED;    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_STOPPED;        if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	151	1	add
1724	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1725	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1726	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1727	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
1728	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
1729	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
1730	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
1731	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
1732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
1733	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  startTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    }    else    {    startTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  }  else  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	72	2	add
1734	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
1735	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_STOPPED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
1736	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
1737	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SUSPENDED;    this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	121	1	add
1738	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
1739	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.splitState  =  STATE_SPLIT;	  	compilable	  [FE]  AssertionFailedError  	102	1	add
1740	[BUG]  [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_SUSPENDED;	          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.runningState    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    	non-compiled	[CE]  possible  loss  of  precision	159	None	replace
1741	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_STOPPED;    this.splitState  =  STATE_STOPPED;  this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_STOPPED;        this.splitState    =    STATE_STOPPED;    this.runningState  =  System.currentTimeMillis();  this.splitState  =  STATE_STOPPED;	  	non-compiled	[CE]  possible  loss  of  precision	178	None	add
1742	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  stopTime);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  -  stopTime;  this.startTime  =  System.currentTimeMillis()  -  stopTime);  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    -    stopTime;    this.startTime  =  System.currentTimeMillis()  -  stopTime);	  	non-compiled	[CE]  ';'  expected	125	None	add
1743	[BUG]  [BUGGY]  this.splitState  =  STATE_STAPPED;  [CE]  cannot  find  symbol  STATE_STAPPED  [FE]        AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_STAPPED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState  =  STATE_STAPPED;	          this.splitState    =    STATE_STOPPED;    This.splitState    =    STATE_STOPPED;    	non-compiled	[CE]  cannot  find  symbol  STATE_STAPPED	195	None	replace
1744	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	131	1	add
1745	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.runningState        =        STATE_STOPPED;        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	131	1	add
1746	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1747	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1748	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1749	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1750	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1751	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    long  splitState  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1752	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1753	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	62	1	add
1754	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	206	2	add
1755	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_SPLIT;  this.startTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        this.splitState        =        STATE_SPLIT;        this.startTime    =    System.currentTimeMillis();    this.splitState    =    STATE_SPLIT;    this.startTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	206	2	add
1756	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    	compilable	  [FE]  AssertionFailedError  	173	2	replace
1757	[BUG]  [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_RUNNING;  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    	compilable	  [FE]  AssertionFailedError  	173	2	replace
1758	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1759	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1760	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1761	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    this.runningState  =  STATE_SUSPENDED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1762	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1763	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1764	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1765	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState  ==  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState    ==    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    if(this.runningState  ==  STATE_STOPPED)  {  this.runningState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	66	1	add
1766	[BUG]  [BUGGY]  int  stopTime  =  System.currentTimeMillis();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  stopTime  =  System.currentTimeMillis();	          stopTime    =    System.currentTimeMillis();    long    stopTime    =    System.currentTimeMillis();    	non-compiled	[CE]  possible  loss  of  precision	190	None	replace
1767	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	30	2	replace
1768	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_STOPPED;  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	compilable	  [FE]  AssertionFailedError  	30	2	replace
1769	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
1770	[BUG]  [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.splitState    =    STATE_STOPPED;    }    	non-compiled	[CE]  ';'  expected	30	None	replace
1771	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	148	2	replace
1772	[BUG]  [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_UNSTARTED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_STOPPED;    if(this.runningState    ==    STATE_STOPPED)    {    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  IllegalStateException  	148	2	replace
1773	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	1	add
1774	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    this.stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();	  	compilable	  [FE]  AssertionFailedError  	141	1	add
1775	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	141	1	add
1776	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    StopWatch.this.stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        StopWatch.this.stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  StopWatch.this.stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	141	1	add
1777	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1778	[BUG]  [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          stopTime    =    System.currentTimeMillis();    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                stopTime        =        System.currentTimeMillis();        stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
1779	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1780	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1781	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1782	[BUG]  [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.splitState    =    STATE_STOPPED;    if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  this.runningState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.splitState        =        STATE_STOPPED;        if(this.splitState!=    STATE_STOPPED)    {    this.splitState    =    STATE_STOPPED;    }    this.runningState  =  STATE_UNSTARTED;  if(this.splitState!=  STATE_STOPPED)  {  this.splitState  =  STATE_STOPPED;  }	  	compilable	  [FE]  AssertionFailedError  	106	1	add
1783	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
1784	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    this.startTime  =  System.currentTimeMillis();  if(this.runningState  ==  STATE_RUNNING)  {  this.splitState  =  STATE_STOPPED;  }  this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        this.startTime    =    System.currentTimeMillis();    if(this.runningState    ==    STATE_RUNNING)    {    this.splitState    =    STATE_STOPPED;    }    this.startTime  =  System.currentTimeMillis();  this.splitState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	35	2	add
1785	[BUG]  [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.runningState  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.startTime    =    System.currentTimeMillis();    if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  this.runningState  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.startTime        =        System.currentTimeMillis();        if(this.startTime!=    STATE_UNSTARTED)    {    this.startTime    =    System.currentTimeMillis();    }    this.runningState  =  System.currentTimeMillis();  if(this.startTime!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	  	non-compiled	[CE]  possible  loss  of  precision	201	None	add
1786	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
1787	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_SUSPENDED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
1788	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
1789	[BUG]  [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]          this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	                this.runningState        =        STATE_RUNNING;        this.runningState    =    STATE_RUNNING;    this.runningState  =  STATE_UNSTARTED;  this.runningState  =  STATE_SUSPENDED;	  	compilable	  [FE]  AssertionFailedError  	43	1	add
1790	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	161	2	replace
1791	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime  =  System.currentTimeMillis();  if(this.runningState!=  STATE_UNSTARTED)  {  this.startTime  =  System.currentTimeMillis();  }	          this.startTime    =    System.currentTimeMillis();    this.startTime    =    System.currentTimeMillis();    if(this.runningState!=    STATE_SUSPENDED)    {    this.startTime    =    System.currentTimeMillis();    }    	compilable	  [FE]  AssertionFailedError  	161	2	replace
1792	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  int  this.startTime  =  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  int  this.startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    int  this.startTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  not  a  statement	50	None	add
1793	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  This.startTime  =  System.currentTimeMillis()  +  1;  [CE]  cannot  find  symbol  This  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  This.startTime  =  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    This.startTime  =  System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  cannot  find  symbol  This	50	None	add
1794	[BUG]  [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.startTime  =  System.currentTimeMillis()  +  1;  System.currentTimeMillis()  +  1;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.startTime    =    System.currentTimeMillis()    +    1;    System.currentTimeMillis()  +  1;	  	non-compiled	[CE]  not  a  statement	50	None	add
1795	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1796	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1797	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1798	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1799	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1800	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.runningState  =  STATE_UNSTARTED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.runningState    =    STATE_UNSTARTED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	60	1	add
1801	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
1802	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SPLIT;  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
1803	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
1804	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.splitState  =  STATE_SUSPENDED;  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
1805	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
1806	[BUG]  [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.splitState  =  STATE_SPLIT;  if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.splitState    =    STATE_SPLIT;    if(this.splitState!=  STATE_SPLIT)  {  this.splitState  =  STATE_SPLIT;  }  else  {  this.runningState  =  STATE_UNSTARTED;  }	  	compilable	  [FE]  AssertionFailedError  	37	1	add
1807	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	114	1	add
1808	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_SUSPENDED;  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_SUSPENDED;    stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_UNSTARTED;	  	compilable	  [FE]  AssertionFailedError  	114	1	add
1809	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_RUNNING;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	185	1	replace
1810	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }	          this.runningState    =    STATE_RUNNING;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	185	1	replace
1811	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	185	1	replace
1812	[BUG]  [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=  STATE_STOPPED)  {  this.runningState  =  STATE_RUNNING;  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    this.runningState    =    STATE_SUSPENDED;    	compilable	  [FE]  AssertionFailedError  	185	1	replace
1813	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1814	[BUG]  [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState    =    STATE_UNSTARTED;    if(this.runningState!=  STATE_UNSTARTED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState        =        STATE_UNSTARTED;        if(this.runningState!=    STATE_UNSTARTED)    {    this.splitState    =    STATE_SUSPENDED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    this.runningState  =  STATE_STOPPED;  if(this.runningState!=  STATE_SUSPENDED)  {  this.splitState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	135	1	add
1815	[BUG]  [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  null)  {  this.runningState  =  STATE_RUNNING;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_STOPPED;  if(this.runningState!=  null)  {  this.runningState  =  STATE_RUNNING;  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_STOPPED;  if(this.runningState!=  null)  {  this.runningState  =  STATE_RUNNING;  }	          this.runningState    =    STATE_RUNNING;    if(stopTime!=    null)    {    this.runningState    =    STATE_RUNNING;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	47	None	replace
1816	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	stopTime    =    System.currentTimeMillis()    /    1000;    startTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	78	2	add
1817	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  startTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    startTime  =  System.currentTimeMillis()  /  1000;	  	compilable	  [FE]  AssertionFailedError  	78	2	add
1818	[BUG]  [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopTime  =  System.currentTimeMillis()  /  1000;  [CE]  cannot  find  symbol  StopTime  [FE]      AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  stopTime  =  System.currentTimeMillis()  /  1000;  StopTime  =  System.currentTimeMillis()  /  1000;  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	stopTime    =    System.currentTimeMillis()    /    1000;    StopTime  =  System.currentTimeMillis()  /  1000;	  	non-compiled	[CE]  cannot  find  symbol  StopTime	78	None	add
1819	[BUG]  [BUGGY]  int  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  int  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	int  this.runningState  =  STATE_STOPPED;  if(this.runningState  ==  STATE_SUSPENDED)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(this.runningState    ==    STATE_RUNNING)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  not  a  statement	169	None	replace
1820	[BUG]  [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_SUSPENDED;  if(stopTime  ==  null)  {  this.runningState  =  STATE_RUNNING;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(stopTime    ==    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	46	None	replace
1821	[BUG]  [BUGGY]  this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              AssertionFailedError      [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	this.runningState  =  STATE_RUNNING;  if(stopTime  ==  null)  {  this.runningState  =  STATE_SUSPENDED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	          this.runningState    =    STATE_RUNNING;    if(stopTime    ==    null)    {    this.runningState    =    STATE_RUNNING;    }    else    {    stopTime    =    System.currentTimeMillis();    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	46	None	replace
1822	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	add	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
1823	[BUG]  [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  suspend()  {  if(this.runningState  !=  STATE_RUNNING)  {  throw  new  IllegalStateException(     "Stopwatch  must  be  running  to  suspend.       ");  }  stopTime  =  System.currentTimeMillis();      [BUGGY]  if(this.runningState!=  STATE_RUNNING)  {  stopTime  =  System.currentTimeMillis();  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }  [BUGGY]      this.runningState  =  STATE_SUSPENDED;  }  [CLASS]  StopWatch  [METHOD]  suspend  [RETURN_TYPE]  void  [VARIABLES]  int  STATE_RUNNING  STATE_SPLIT  STATE_STOPPED  STATE_SUSPENDED  STATE_UNSPLIT  STATE_UNSTARTED  runningState  splitState  long  startTime  stopTime  boolean  	projects/Lang55/src/java/org/apache/commons/lang/time/StopWatch.java	0.7071067811865475	180	180	1	replace	if(this.runningState!=    STATE_RUNNING)    {    stopTime    =    System.currentTimeMillis();    this.runningState    =    STATE_STOPPED;    }    else    {    stopTime    =    System.currentTimeMillis();    }    if(this.runningState!=  STATE_RUNNING)  {  this.runningState  =  STATE_STOPPED;  }  else  {  stopTime  =  System.currentTimeMillis();  }	  	compilable	  [FE]  AssertionFailedError  	208	1	add
