bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	67	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	67	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	67	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer,  this);  [CE]  cannot  find  symbol  externes  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externes,  renamer,  this);	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  externes	97	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  this);	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)	97	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  this);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)	87	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LIST_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	87	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MATCH_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MATCH_LOCAL_NAMES_UNIQUE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MATCH_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MATCH_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    arguments);    	non-compiled	[CE]  cannot  find  symbol  MATCH_LOCAL_NAMES_UNIQUE	87	None	replace
9	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	101	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	101	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)	98	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  arguments);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	98	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  externs);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)	98	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,Node)	98	None	replace
15	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	138	None	replace
16	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	138	None	replace
17	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	138	None	replace
18	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	121	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	121	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  false);	  NodeTraversal.traverse(compiler,    root,    renamer,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	125	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  false);	  NodeTraversal.traverse(compiler,    root,    renamer,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique,boolean)	125	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  true);	  NodeTraversal.traverse(compiler,    root,    renamer,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	125	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  false);	  NodeTraversal.traverse(compiler,    root,    renamer,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	125	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  node  =  new  NodeTraversal(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	147	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	147	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  node  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  node  =  new  NodeTraversal(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  node	147	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externes  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externes,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  externes	148	None	replace
28	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  this);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	5	None	replace
29	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  internalRoots,  this);  [CE]  cannot  find  symbol  internalRoots  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  internalRoots,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  internalRoots,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    this);    	non-compiled	[CE]  cannot  find  symbol  internalRoots	5	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  nodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]              AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  nodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  nodeTraversal.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    nodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	32	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  nodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  nodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root);  nodeTraversal.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    nodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	32	None	replace
32	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	54	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]          AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    externs,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	62	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	62	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)  [FE]              AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);	  NodeTraversal.traverse(compiler,    externs,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)	62	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  true);	  NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	22	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  true);	  NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	22	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  true);  [CE]  cannot  find  symbol  arguments  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  true);	  NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  cannot  find  symbol  arguments	22	None	replace
39	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  exprs,  renamer);  [CE]  cannot  find  symbol  exprs  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  exprs,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  exprs,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    arguments,    renamer);    	non-compiled	[CE]  cannot  find  symbol  exprs	7	None	replace
40	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    externs);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,Node)	41	None	replace
41	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externals  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    externs);    	non-compiled	[CE]  cannot  find  symbol  externals	41	None	replace
42	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  parent);  [CE]  cannot  find  symbol  parent  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  parent);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  parent);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    externs);    	non-compiled	[CE]  cannot  find  symbol  parent	41	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  true);	  NodeTraversal.traverse(compiler,    renamer,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,boolean)	156	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)	99	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)	99	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	99	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	99	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    root,    renamer,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	27	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LIST_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    renamer,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	27	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LIST_NAMES_UNIQUE,  renamer);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LIST_NAMES_UNIQUE,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LIST_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    root,    renamer,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	27	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  CONVERT_WHILE_TO_FOR,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  CONVERT_WHILE_TO_FOR,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  CONVERT_WHILE_TO_FOR,  renamer);	  NodeTraversal.traverse(compiler,    root,    renamer,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	27	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	100	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)	100	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)	100	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize,MakeDeclaredNamesUnique)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize,MakeDeclaredNamesUnique)	100	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer,  arguments);	  NodeTraversal.traverseRoots(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	100	None	replace
57	[BUG]  [BUGGY]  Converter.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  Converter  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Converter.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Converter.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    Converter.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Converter	31	None	replace
58	[BUG]  [BUGGY]  Context.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  Context  [FE]              AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Context.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Context.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    Converter.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Context	31	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  Converter.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  Converter  [FE]                AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  Converter.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer);  Converter.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    Converter.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Converter	31	None	replace
60	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  Traverse  [FE]                  AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Traverse.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Traverse.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    Converter.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Traverse	31	None	replace
61	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	34	9	add
62	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	34	9	add
63	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	34	9	add
64	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	34	9	add
65	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  Converter.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Converter  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  Converter.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    Converter.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  Converter	34	None	add
66	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	34	10	add
67	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	34	10	add
68	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  junit.framework.AssertionFailedError:  Expected:  var  FOO=false  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  junit.framework.AssertionFailedError:  Expected:  var  FOO=false  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    junit.framework.AssertionFailedError:  Expected:  var  FOO=false	  	non-compiled	[CE]  not  a  statement	34	None	add
69	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  Converter.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Converter  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  Converter.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    Converter.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  Converter	34	None	add
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    root,    renamer,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	149	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    root,    renamer,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)	149	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    root,    renamer,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	149	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    renamer,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique,boolean)	149	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique(),  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique(),  arguments);	  NodeTraversal.traverse(compiler,    root,    renamer,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  arguments	149	None	replace
75	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,boolean)	9	None	replace
76	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,Node)	9	None	replace
77	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  assertOnChange);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  assertOnChange);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,boolean)	9	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  t  [FE]          AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externes,    renamer);    	non-compiled	[CE]  cannot  find  symbol  t	30	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externals,  renamer);  [CE]  cannot  find  symbol  externals  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externals,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externals,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externes,    renamer);    	non-compiled	[CE]  cannot  find  symbol  externals	30	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externes,  renamer);  [CE]  cannot  find  symbol  externes  [FE]              AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externes,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externes,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externes,    renamer);    	non-compiled	[CE]  cannot  find  symbol  externes	30	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externals,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externals,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externals,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externes,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	30	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externes,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externes,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externes,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externes,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	30	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	66	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	66	None	replace
85	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	66	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	76	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	76	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]        AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	61	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  FORBIND_WHILE_TO_FOR);  [CE]  cannot  find  symbol  FORBIND_WHILE_TO_FOR  [FE]          AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  FORBIND_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  FORBIND_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  FORBIND_WHILE_TO_FOR	61	None	replace
90	[BUG]  [BUGGY]  renamer.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  renamer.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	88	None	replace
91	[BUG]  [BUGGY]  renamer.process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  renamer.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
92	[BUG]  [BUGGY]  renamer.process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  renamer.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
93	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	141	None	replace
94	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	141	None	replace
95	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	141	None	replace
96	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	49	1	add
97	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	49	1	add
98	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	49	1	add
99	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	49	1	add
100	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	49	None	add
101	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	49	None	add
102	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  root,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	49	None	add
103	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  ';'  expected	49	None	add
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  t  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  t	146	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  node  =  new  NodeTraversal(compiler,  root,  renamer);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  node  =  new  NodeTraversal(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  node  =  new  NodeTraversal(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  node	146	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  node,  renamer);  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  node,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  node,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  node	146	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  node  =  new  NodeTraversal(compiler,  root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  node  =  new  NodeTraversal(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  node  =  new  NodeTraversal(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	146	None	replace
108	[BUG]  [BUGGY]  renamer.process(externs,  root,  externs);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  externs);	  renamer.process(externs,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
109	[BUG]  [BUGGY]  renamer.process(externs,  root,  parent);  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  parent);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  parent);	  renamer.process(externs,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  parent	142	None	replace
110	[BUG]  [BUGGY]  renamer.process(externs,  root,  externals);  [CE]  cannot  find  symbol  externals  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  externals);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  externals);	  renamer.process(externs,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  externals	142	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  roots,  renamer);  [CE]  cannot  find  symbol  roots  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  roots,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  roots,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    roots,    renamer);    	non-compiled	[CE]  cannot  find  symbol  roots	39	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    roots,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	39	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externals,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externals,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externals,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    roots,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	39	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        externs,        renamer);        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);	  	compilable	  [FE]  AssertionFailedError  	28	3	add
115	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        renamer);        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);	  	compilable	  [FE]  AssertionFailedError  	28	3	add
116	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externals,  renamer);  [CE]  cannot  find  symbol  externals  [FE]      AssertionFailedError    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externals,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        renamer);        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externals,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  externals	28	None	add
117	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externes,  renamer);  [CE]  cannot  find  symbol  externes  [FE]        AssertionFailedError    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externes,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        renamer);        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externes,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  externes	28	None	add
118	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externals,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  externals  [FE]          AssertionFailedError    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externals,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        renamer);        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externals,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  externals	28	None	add
119	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externes,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  externes  [FE]            AssertionFailedError    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externes,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        renamer);        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externes,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  externes	28	None	add
120	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  RENamer);  [CE]  cannot  find  symbol  RENamer  [FE]              AssertionFailedError    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  RENamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        renamer);        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  RENamer);	  	non-compiled	[CE]  cannot  find  symbol  RENamer	28	None	add
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  false,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    false,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	23	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  true,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  true,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  true,  arguments);	  NodeTraversal.traverse(compiler,    root,    false,    arguments);    	non-compiled	[CE]  cannot  find  symbol  arguments	23	None	replace
123	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	140	None	replace
124	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	140	None	replace
125	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.call(  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	140	None	replace
126	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,Normalize)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,Normalize)	2	None	replace
127	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  this);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,Normalize)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,Normalize)	2	None	replace
128	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  this,  renamer);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  this,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  this,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	2	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	26	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	26	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  FORBIND_WHILE_TO_FOR);  [CE]  cannot  find  symbol  FORBIND_WHILE_TO_FOR  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  FORBIND_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  FORBIND_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  FORBIND_WHILE_TO_FOR	26	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  MAKE_LIST_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	14	None	replace
133	[BUG]  [BUGGY]  renamer.process(externs,  root,  true);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  true);	  renamer.process(externs,    root,    false);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
134	[BUG]  [BUGGY]  renamer.process(externs,  root,  null);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  null);	  renamer.process(externs,    root,    false);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  renamer.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  renamer.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  renamer.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    renamer.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
136	[BUG]  [BUGGY]  Traverse.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  Traverse  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Traverse.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Traverse.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    renamer.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  Traverse	78	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  renamer.traverse(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  renamer.traverse(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  renamer.traverse(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    renamer.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
138	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer,  externs);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    externs);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)	143	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externals  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    externs);    	non-compiled	[CE]  cannot  find  symbol  externals	80	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	81	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	81	None	replace
142	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  arguments);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    externals);    	non-compiled	[CE]  cannot  find  symbol  arguments	42	None	replace
143	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	74	1	add
144	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	74	1	add
145	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	74	1	add
146	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	74	1	add
147	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  nodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  nodeTraversal  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  nodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  nodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	74	None	add
148	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	74	None	add
149	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	74	None	add
150	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	74	1	add
151	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	74	1	add
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  externs,  this);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)	114	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  this,  arguments);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	114	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  argument);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  this,  argument);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	114	None	replace
155	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,Node)	16	None	replace
156	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,Node)	16	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  [CE]  cannot  find  symbol  externals  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externals,  renamer);	  NodeTraversal.traverse(compiler,    externes,    renamer);    	non-compiled	[CE]  cannot  find  symbol  externals	72	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique(),  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique(),  arguments);	  NodeTraversal.traverse(compiler,    externs,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  arguments	85	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    externs,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	85	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LIST_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    renamer,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	63	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  arguments);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	57	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  externs,  this);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize)	57	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  argument);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this,  argument);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	57	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  renamer,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique,Normalize)  [FE]        AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  renamer,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  externs,  renamer,  this);	  NodeTraversal.traverse(compiler,    externs,    renamer,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique,Normalize)	106	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer,  this);  [CE]  cannot  find  symbol  roots  [FE]          AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  roots,  renamer,  this);	  NodeTraversal.traverse(compiler,    externs,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  roots	106	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  false);	  NodeTraversal.traverse(compiler,    root,    arguments,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	21	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  false);	  NodeTraversal.traverse(compiler,    root,    arguments,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	21	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Annotated.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Annotated  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Annotated.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  Annotated.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    Annotated.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Annotated	92	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Annotated.traverse(compiler,  root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Annotated.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Annotated.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    Annotated.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	92	None	replace
170	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Annotated  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Annotated.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    Annotated.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Annotated	92	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Annotated.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Annotated.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Annotated.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	          NodeTraversal.traverse(compiler,    root,    renamer);    Annotated.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	92	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	154	None	replace
173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externs,    RENamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	128	None	replace
174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externs,  RENamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externs,  RENamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externs,  RENamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externs,    RENamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	128	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externs,  RENAMER);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externs,  RENAMER);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externs,  RENAMER);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externs,    RENamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	128	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externs,  RENamer);  [CE]  cannot  find  symbol  RENamer  [FE]                  AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externs,  RENamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  externs,  RENamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externs,    RENamer);    	non-compiled	[CE]  cannot  find  symbol  RENamer	128	None	replace
177	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	17	None	replace
178	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  cannot  find  symbol  externals  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    renamer);    	non-compiled	[CE]  cannot  find  symbol  externals	17	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  t  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  t	50	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	50	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  t  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  t	50	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  arguments,  false);	  NodeTraversal.traverse(compiler,    externs,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	20	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  false,  arguments);	  NodeTraversal.traverse(compiler,    externs,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	20	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	47	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  argument);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  argument);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argument	47	None	replace
186	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	150	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	60	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,Normalize)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);	  NodeTraversal.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,Normalize)	60	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  this);  [CE]  cannot  find  symbol  arguments  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  this);	  NodeTraversal.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	60	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique,Normalize)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  this);	  NodeTraversal.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique,Normalize)	60	None	replace
191	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize,boolean)	152	None	replace
192	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize,boolean)	152	None	replace
193	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  this);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,MakeDeclaredNamesUnique,Normalize)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,MakeDeclaredNamesUnique,Normalize)	152	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	103	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	155	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	52	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	52	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	52	None	replace
199	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	45	None	replace
200	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  externs);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,MakeDeclaredNamesUnique,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,MakeDeclaredNamesUnique,Node)	45	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean)	59	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  forbidChanges);	  NodeTraversal.traverseRoots(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	59	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  argument);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  argument);	  NodeTraversal.traverseRoots(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argument	59	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	70	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	70	None	replace
206	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	70	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  arguments);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	56	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)	56	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  arguments);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	56	None	replace
210	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean)	56	None	replace
211	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE,    FORWARD_WHILE_TO_FOR);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,boolean)	136	None	replace
212	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE,    FORWARD_WHILE_TO_FOR);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,boolean)	136	None	replace
213	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE,    FORWARD_WHILE_TO_FOR);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,boolean)	136	None	replace
214	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	112	None	replace
215	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	112	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	112	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  null);	  NodeTraversal.traverse(compiler,    root,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	13	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,<null>)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  null);	  NodeTraversal.traverse(compiler,    root,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,<null>)	13	None	replace
219	[BUG]  [BUGGY]  renamer.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
220	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  Context  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Context.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Context.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  cannot  find  symbol  Context	105	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  t  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  t	75	None	replace
222	[BUG]  [BUGGY]  Context.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  Context  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Context.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Context.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  Context	75	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	75	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  externs,  renamer);	  NodeTraversal.traverse(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)	84	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,MakeDeclaredNamesUnique)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,MakeDeclaredNamesUnique)	84	None	replace
226	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	119	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renaMER);  [CE]  cannot  find  symbol  renaMER  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renaMER);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  renaMER);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renaMER);    	non-compiled	[CE]  cannot  find  symbol  renaMER	40	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renaMER);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	40	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments,  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  arguments,  null);	  NodeTraversal.traverse(compiler,    externs,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	48	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  arguments);	  NodeTraversal.traverse(compiler,    externs,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	48	None	replace
231	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,Normalize)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,Normalize)	1	None	replace
232	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  this,  renamer);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  this,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  this,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	1	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	69	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	69	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer,  this);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)	137	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique,Normalize)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer,  this);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique,Normalize)	137	None	replace
237	[BUG]  [BUGGY]  Traverse.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traverse  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Traverse.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Traverse.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    renamer.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	139	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  renamer.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  renamer.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  renamer.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    renamer.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
239	[BUG]  [BUGGY]  renamer.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    renamer.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
240	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  constructor,  renamer);  [CE]  cannot  find  symbol  constructor  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  constructor,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  constructor,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    factory,    renamer);    	non-compiled	[CE]  cannot  find  symbol  constructor	123	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	46	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    externs,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	46	None	replace
243	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  this);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    renamer,    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)	4	None	replace
244	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer,  this);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    renamer,    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)	4	None	replace
245	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  renamer,  this);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  renamer,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  renamer,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	4	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  externs);	  NodeTraversal.traverse(compiler,    externs,    renamer,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)	129	None	replace
247	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	118	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	118	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	118	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	120	None	replace
251	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  root);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	11	None	replace
252	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  root);  [CE]  cannot  find  symbol  externes  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    root);    	non-compiled	[CE]  cannot  find  symbol  externes	11	None	replace
253	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,MakeDeclaredNamesUnique,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,MakeDeclaredNamesUnique,boolean)	19	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  MAKE_LIST_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    renamer,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	144	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	83	None	replace
256	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  externs,  renamer);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  externs,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  externs,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)	44	None	replace
257	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,boolean,MakeDeclaredNamesUnique)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,boolean,MakeDeclaredNamesUnique)	44	None	replace
258	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  root);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    root);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)	151	None	replace
259	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer,  root);  [CE]  cannot  find  symbol  externes  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    root);    	non-compiled	[CE]  cannot  find  symbol  externes	151	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	12	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	12	None	replace
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	12	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,boolean)	12	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    renamer.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	37	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  renamer.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  renamer.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  renamer.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    renamer.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	          NodeTraversal.traverse(compiler,    root,    renamer);    renamer.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	37	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	77	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	77	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	77	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	51	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	51	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  Root,  renamer);  [CE]  cannot  find  symbol  Root  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  Root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  Root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    Root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Root	93	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  Root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  Root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  Root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    Root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	93	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  NodeTraversal.traverse(compiler,  Root,  renamer);  [CE]  cannot  find  symbol  externes  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  NodeTraversal.traverse(compiler,  Root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externes,  renamer);  NodeTraversal.traverse(compiler,  Root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    Root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  externes	93	None	replace
275	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Context  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Context.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Context.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    Converter.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Context	36	None	replace
276	[BUG]  [BUGGY]  Converter.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Converter  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Converter.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Converter.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    Converter.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Converter	36	None	replace
277	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Converter.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Converter  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Converter.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  Converter.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    Converter.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Converter	36	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Converter.traverse(compiler,  root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Converter.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Converter.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    Converter.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	36	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Converter.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Converter.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  Converter.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	          NodeTraversal.traverse(compiler,    root,    renamer);    Converter.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	36	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	35	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  externals  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externals,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  externals	35	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  t  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  t	65	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	65	None	replace
284	[BUG]  [BUGGY]  Context.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Context  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Context.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Context.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	65	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  false,  renamer);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	124	None	replace
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  false,  renamer);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  false,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  false,  renamer);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	124	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  false,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique,boolean)	124	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  true,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  true,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  true,  renamer);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	124	None	replace
289	[BUG]  [BUGGY]  renamer.process(externs,  root,  assertOnChange,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  assertOnChange,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  assertOnChange,  arguments);	  renamer.process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	115	None	replace
290	[BUG]  [BUGGY]  renamer.process(externs,  root,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);	  renamer.process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	117	None	replace
292	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  argumentCount);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  argumentCount);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	134	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  this,  renamer);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,MakeDeclaredNamesUnique)	94	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)	94	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)	94	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  renamer,  arguments);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	94	None	replace
297	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	64	1	add
298	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	64	1	add
299	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	64	1	add
300	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	64	1	add
301	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	64	None	add
302	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	64	None	add
303	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	64	None	add
304	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externals,  this);  [CE]  cannot  find  symbol  externals  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externals,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externals,  this);	  	non-compiled	[CE]  cannot  find  symbol  externals	64	None	add
305	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNKNOWN);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNKNOWN);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN	153	None	replace
306	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNKNOWN);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNKNOWN);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN	153	None	replace
307	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  parent,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  cannot  find  symbol  parent  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  parent,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  parent,  MAKE_LOCAL_NAMES_UNKNOWN);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNKNOWN);    	non-compiled	[CE]  cannot  find  symbol  parent	153	None	replace
308	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  cannot  find  symbol  externals  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  MAKE_LOCAL_NAMES_UNKNOWN);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNKNOWN);    	non-compiled	[CE]  cannot  find  symbol  externals	153	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	104	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer,  externs);  [CE]  cannot  find  symbol  roots  [FE]          AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer,  externs);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  roots,  renamer,  externs);	  NodeTraversal.traverse(compiler,    renamer,    externs);    	non-compiled	[CE]  cannot  find  symbol  roots	107	None	replace
311	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)	96	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)	96	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  renamer,  arguments);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	96	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  externs,  renamer);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node,MakeDeclaredNamesUnique)	96	None	replace
315	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traverse  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Traverse.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Traverse.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    renamer.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	133	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  renamer.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  renamer.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  renamer.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    renamer.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  RENAMER);  [CE]  cannot  find  symbol  RENAMER  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  RENAMER);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  RENAMER);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    RENamer);    	non-compiled	[CE]  cannot  find  symbol  RENAMER	38	None	replace
318	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  RENASCII);  [CE]  cannot  find  symbol  RENASCII  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  RENASCII);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  root,  RENASCII);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    RENamer);    	non-compiled	[CE]  cannot  find  symbol  RENASCII	38	None	replace
319	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  RENamer);  NodeTraversal.traverse(compiler,  root,  RENamer);  [CE]  cannot  find  symbol  RENamer  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  RENamer);  NodeTraversal.traverse(compiler,  root,  RENamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  RENamer);  NodeTraversal.traverse(compiler,  root,  RENamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    RENamer);    	non-compiled	[CE]  cannot  find  symbol  RENamer	38	None	replace
320	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	132	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	132	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	79	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	79	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique,boolean)	95	None	replace
325	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	111	None	replace
326	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  fr()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  fr()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  fr()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	111	None	replace
327	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  expression()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  expression()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  expression()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	111	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  renamer.traverse(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  renamer.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root);  renamer.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    renamer.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	126	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  renamer.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  renamer.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer);  renamer.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    renamer.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    renamer.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	126	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  roots  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  roots,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    renamer,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  roots	91	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  externes  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externes,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    renamer,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  externes	91	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	58	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  NodeTraversal.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	58	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  expected  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  expected  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  expected	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';'  expected  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';'  expected  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';'  expected	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
337	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
338	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  internalRoots,  renamer);  [CE]  cannot  find  symbol  internalRoots  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  internalRoots,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  internalRoots,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externes,    renamer);    	non-compiled	[CE]  cannot  find  symbol  internalRoots	8	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  Context.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  Context  [FE]                AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  Context.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer);  Context.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    Context.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Context	33	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  Context.traverse(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  Context.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root);  Context.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    Context.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	33	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  Context.traverse(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  Context.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  Context.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    Context.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	33	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(arguments!=  null);  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(arguments!=  null);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(arguments!=  null);  NodeTraversal.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    Preconditions.checkArgument(arguments!=    null);    NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	145	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(arguments!=  null);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(arguments!=  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(arguments!=  null);	          NodeTraversal.traverse(compiler,    root,    renamer);    Preconditions.checkArgument(arguments!=    null);    NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	145	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(random!=  null);  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  random  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(random!=  null);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(random!=  null);  NodeTraversal.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    Preconditions.checkArgument(arguments!=    null);    NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  random	145	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(renamer!=  null);  [CE]  cannot  find  symbol  t  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(renamer!=  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  Preconditions.checkArgument(renamer!=  null);	          NodeTraversal.traverse(compiler,    root,    renamer);    Preconditions.checkArgument(arguments!=    null);    NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  t	145	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root);  NodeTraversal.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	29	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]      AssertionFailedError    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  NodeTraversal.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	29	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	110	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	55	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	55	None	replace
351	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	55	None	replace
352	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	135	None	replace
353	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,boolean)	135	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  internals,  renamer);  [CE]  cannot  find  symbol  internals  [FE]          AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  internals,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  internals,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externals,    renamer);    	non-compiled	[CE]  cannot  find  symbol  internals	127	None	replace
355	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	10	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	102	None	replace
357	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  expected  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  expected  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  expected	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	68	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';'  expected  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';'  expected  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  ';'  expected	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	68	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	68	None	replace
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	68	None	replace
361	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	86	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	86	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	86	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,boolean)	86	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	86	None	replace
366	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  CONVERT_WHILE_TO_FOR);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  CONVERT_WHILE_TO_FOR);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique,boolean)	43	None	replace
367	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,boolean)	43	None	replace
368	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  arguments);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	43	None	replace
369	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	43	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	81	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  [CE]  '('  or  '['  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  '('  or  '['  expected	54	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  '('  or  '['  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  '('  or  '['  expected	54	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [CE]  '('  or  '['  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  '('  or  '['  expected	54	None	replace
374	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Opcodes  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Opcodes.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Opcodes.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Opcodes	50	None	replace
375	[BUG]  [BUGGY]  Traversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traversal  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Traversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Traversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	50	None	replace
376	[BUG]  [BUGGY]  Traversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traversal  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Traversal.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Traversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	50	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  '('  or  '['  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	51	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  '('  or  '['  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	51	None	replace
379	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	12	None	replace
380	[BUG]  [BUGGY]  renamer.process(externs,  root,  MAKE_LCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LCAL_NAMES_UNIQUE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  MAKE_LCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  MAKE_LCAL_NAMES_UNIQUE);	  renamer.process(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LCAL_NAMES_UNIQUE	90	None	replace
381	[BUG]  [BUGGY]  renamer.process(externs,  root,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  MAKE_LIST_NAMES_UNIQUE);	  renamer.process(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	90	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN);	  NodeTraversal.traverse(compiler,    root,    renamer,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN	27	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  AssertionFailedError());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  AssertionFailedError());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  AssertionFailedError());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  '('  or  '['  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	104	None	replace
385	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	104	None	replace
386	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	109	None	replace
387	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	109	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  this);	  NodeTraversal.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    this);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	60	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,Normalize)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  this);	  NodeTraversal.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,Normalize)	60	None	replace
390	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_WHILE_TO_FOR);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_WHILE_TO_FOR);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_WHILE_TO_FOR);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNKNOWN);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	153	None	replace
391	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	64	None	add
392	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	64	None	add
393	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(compiler,  externs,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(compiler,  externs,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)	64	None	add
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    root,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,boolean)	95	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_WHILE_TO_FOR);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    root,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	95	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNKNOWN);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renaMER);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN	40	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_WHILE_TO_FOR);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]                    junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_WHILE_TO_FOR);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renaMER);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	40	None	replace
398	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverseRoots(externs,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,MakeDeclaredNamesUnique)  [FE]    AssertionFailedError    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverseRoots(externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        renamer);        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverseRoots(externs,  renamer);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,MakeDeclaredNamesUnique)	28	None	add
399	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	111	None	replace
400	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externals  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  externals	152	None	replace
401	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  internalNames);  [CE]  cannot  find  symbol  internalNames  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  internalNames);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  internalNames);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE,    arguments);    	non-compiled	[CE]  cannot  find  symbol  internalNames	134	None	replace
402	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_WHILE_TO_FOR);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_WHILE_TO_FOR  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_WHILE_TO_FOR);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_WHILE_TO_FOR);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_WHILE_TO_FOR	134	None	replace
403	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  root,  renamer);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node,MakeDeclaredNamesUnique)	94	None	replace
404	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  null);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,<null>)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  null);	  NodeTraversal.traverseRoots(compiler,    externs,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,<null>)	57	None	replace
405	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	112	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	110	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	154	None	replace
408	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    this,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	14	None	replace
409	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNKNOWN);	  NodeTraversal.traverse(compiler,    root,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN	14	None	replace
410	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  this);  [CE]  cannot  find  symbol  roots  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  roots,  this);	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  roots	97	None	replace
411	[BUG]  [BUGGY]  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Annotated:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	105	None	replace
412	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_WHILE_TO_FOR,  renamer);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_WHILE_TO_FOR,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_WHILE_TO_FOR,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    renamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	43	None	replace
413	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  roots,  renamer,  this);  [CE]  cannot  find  symbol  roots  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  roots,  renamer,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  roots,  renamer,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  roots	4	None	replace
414	[BUG]  [BUGGY]  renamer.process(externs,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  new  MakeDeclaredNamesUnique());	  renamer.process(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
415	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,boolean)	10	None	replace
416	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  RENamer);  [CE]  cannot  find  symbol  RENamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  RENamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  RENamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  RENamer	10	None	replace
417	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	49	None	add
418	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	49	None	add
419	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverseRoots(externs,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverseRoots(externs,  root,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	49	None	add
420	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	49	1	add
421	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	49	1	add
422	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  false,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    renamer,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,boolean)	125	None	replace
423	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	141	None	replace
424	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f();  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  expected:  function  f();	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	141	None	replace
425	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  arguments);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    arguments,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	7	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,MakeDeclaredNamesUnique)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,MakeDeclaredNamesUnique)	86	None	replace
427	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	86	None	replace
428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externes  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externes,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  externes	86	None	replace
429	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	45	None	replace
430	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,boolean)	45	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]          AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	62	None	replace
432	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	53	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected  [CE]  '('  or  '['  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  expected	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	53	None	replace
434	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverseRoots(externs,  root);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverseRoots(externs,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverseRoots(externs,  root);	  	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	34	None	add
435	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverseRoots(compiler,  root,  renamer);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)	34	None	add
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  renamer);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	87	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_WHILE_TO_FOR);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	87	None	replace
438	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	74	None	add
439	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	74	1	add
440	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	74	1	add
441	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	74	None	add
442	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  renamer.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  renamer.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  renamer.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    renamer.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
443	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  root,  RENamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  root,  RENamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  renamer.traverse(compiler,  root,  RENamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    renamer.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	37	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Normalize)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  false,  this);	  NodeTraversal.traverse(compiler,    root,    false,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Normalize)	23	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  externals);  [CE]  cannot  find  symbol  externals  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  externals);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  false,  externals);	  NodeTraversal.traverse(compiler,    root,    false,    arguments);    	non-compiled	[CE]  cannot  find  symbol  externals	23	None	replace
446	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  root);	  NodeTraversal.traverseRoots(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,Node)	59	None	replace
447	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	119	None	replace
448	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  null,  renamer);	  NodeTraversal.traverse(compiler,    externs,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,MakeDeclaredNamesUnique)	48	None	replace
449	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	66	None	replace
450	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  renamer,  false);  [CE]  cannot  find  symbol  Root  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  Root,  renamer,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  Root,  renamer,  false);	  NodeTraversal.traverse(compiler,    renamer,    false);    	non-compiled	[CE]  cannot  find  symbol  Root	156	None	replace
451	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  false);  [CE]  cannot  find  symbol  roots  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  roots,  false);	  NodeTraversal.traverse(compiler,    renamer,    false);    	non-compiled	[CE]  cannot  find  symbol  roots	156	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  node  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  node  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  node  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	146	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  root,  renamer);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  node	146	None	replace
454	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  Root  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  Root,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    renamer,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  Root	91	None	replace
455	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  '('  or  '['  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	55	None	replace
456	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  '('  or  '['  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	55	None	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  renamer);	  NodeTraversal.traverse(compiler,    roots,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	71	None	replace
458	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    root);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES	11	None	replace
459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  ';'	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	68	None	replace
460	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  roots  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  roots,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  roots	148	None	replace
461	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	148	None	replace
462	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  false,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  false,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  false,  renamer);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)	124	None	replace
463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  root);	  NodeTraversal.traverse(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    root);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	83	None	replace
464	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique(),  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique(),  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique(),  renamer);	  NodeTraversal.traverse(compiler,    externs,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	85	None	replace
465	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  node	147	None	replace
466	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  callUserDeclarations);  [CE]  cannot  find  symbol  callUserDeclarations  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  callUserDeclarations);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  callUserDeclarations);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  callUserDeclarations	135	None	replace
467	[BUG]  [BUGGY]  Deserialize.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  Deserialize  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Deserialize.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Deserialize.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    Converter.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Deserialize	31	None	replace
468	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  Root  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  Root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  Root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    Root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Root	122	None	replace
469	[BUG]  [BUGGY]  renamer.process(externs,  root,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  checkUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  checkUserDeclarations);	  renamer.process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	115	None	replace
470	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  raf);  [CE]  cannot  find  symbol  raf  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  raf);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  raf);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  raf	47	None	replace
471	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  root);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	47	None	replace
472	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  checkUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  checkUserDeclarations);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	137	None	replace
473	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize,boolean)	137	None	replace
474	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	108	None	replace
475	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  '('  or  '['  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	101	None	replace
476	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  '('  or  '['  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	102	None	replace
477	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  nodeTraversal  [FE]              AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  nodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	nodeTraversal.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    nodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	32	None	replace
478	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]        AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  checkUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	106	None	replace
479	[BUG]  [BUGGY]  renamer.process(externs,  root,  MAKE_WHILE_TO_FOR);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  MAKE_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  MAKE_WHILE_TO_FOR);	  renamer.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	88	None	replace
480	[BUG]  [BUGGY]  renamer.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  renamer.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
481	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	138	None	replace
482	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  nodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  nodeTraversal  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  nodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  nodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	75	None	replace
483	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Preconditions.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Preconditions.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  Preconditions.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
484	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  assertOnChange);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  assertOnChange);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    externals);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean)	42	None	replace
485	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  assertOnChange);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  renamer,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)	96	None	replace
486	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	26	None	replace
487	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  root,  this);  renamer.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Opcodes  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Opcodes.traverse(compiler,  root,  this);  renamer.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Opcodes.traverse(compiler,  root,  this);  renamer.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    renamer.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Opcodes	139	None	replace
488	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Opcodes  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Opcodes.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Opcodes.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    renamer.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Opcodes	139	None	replace
489	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  true);	  NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	22	None	replace
490	[BUG]  [BUGGY]  renamer.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    renamer.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
491	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  RENamer);  [CE]  cannot  find  symbol  RENamer  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  RENamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  RENamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externs,    RENamer);    	non-compiled	[CE]  cannot  find  symbol  RENamer	128	None	replace
492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	51	None	replace
493	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	51	None	replace
494	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	TraverseTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	65	None	replace
495	[BUG]  [BUGGY]  Traversed.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traversed  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Traversed.traverse(compiler,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Traversed.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversed	65	None	replace
496	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  TraverseTraversal.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	TraverseTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	65	None	replace
497	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    arguments,    renamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES	7	None	replace
498	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  args,  renamer);  [CE]  cannot  find  symbol  args  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  args,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  args,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    arguments,    renamer);    	non-compiled	[CE]  cannot  find  symbol  args	7	None	replace
499	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  expected  [CE]  '('  or  '['  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  expected  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  ';'  expected	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	53	None	replace
500	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  Preconditions.checkArgument(arguments!=  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  Preconditions.checkArgument(arguments!=  null);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  Preconditions.checkArgument(arguments!=  null);	          NodeTraversal.traverse(compiler,    root,    renamer);    Preconditions.checkArgument(arguments!=    null);    NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,boolean)	145	None	replace
501	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	74	None	add
502	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique());	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique)	74	None	add
503	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverseRoots(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverseRoots(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        new        MakeDeclaredNamesUnique());        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverseRoots(compiler,  root,  new  MakeDeclaredNamesUnique());	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)	74	None	add
504	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	55	None	replace
505	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	55	None	replace
506	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LCAL_NAMES_UNIQUE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique(),    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LCAL_NAMES_UNIQUE	87	None	replace
507	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,Node)	43	None	replace
508	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  forbidChanges);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    renamer);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	43	None	replace
509	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  TraverseTraversal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  TraverseTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	TraverseTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    renamer.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	78	None	replace
510	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean,boolean)	95	None	replace
511	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	95	None	replace
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  FORWARD_WHILE_TO_FOR);  [CE]  cannot  find  symbol  FORWARD_WHILE_TO_FOR  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  FORWARD_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  FORWARD_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    root,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  FORWARD_WHILE_TO_FOR	95	None	replace
513	[BUG]  [BUGGY]  renamer.process(externs,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  renamer.process(externs,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
514	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	19	None	replace
515	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	49	None	add
516	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	49	None	add
517	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Normalize)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);	  NodeTraversal.traverse(compiler,    externs,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Normalize)	114	None	replace
518	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	118	None	replace
519	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    root);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,boolean,Node)	151	None	replace
520	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    factory,    renamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES	123	None	replace
521	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  factory);  [CE]  cannot  find  symbol  factory  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  factory);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  factory);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    factory,    renamer);    	non-compiled	[CE]  cannot  find  symbol  factory	123	None	replace
522	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	132	None	replace
523	[BUG]  [BUGGY]  Renamer.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Renamer  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Renamer.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Renamer.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    renamer.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Renamer	139	None	replace
524	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN,  arguments);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN,  arguments);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNKNOWN);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN	153	None	replace
525	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNKNOWN);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN	153	None	replace
526	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	64	None	add
527	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	64	None	add
528	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  forbidChanges);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	82	None	replace
529	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  argumentMap,  renamer);  [CE]  cannot  find  symbol  argumentMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  argumentMap,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  argumentMap,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externes,    renamer);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	8	None	replace
530	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES);	  NodeTraversal.traverse(compiler,    Root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES	122	None	replace
531	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  FORWARD_WHILE_TO_FOR);  [CE]  cannot  find  symbol  FORWARD_WHILE_TO_FOR  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  FORWARD_WHILE_TO_FOR);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  FORWARD_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  FORWARD_WHILE_TO_FOR	148	None	replace
532	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [Delete]  ';'  expected  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [Delete]  ';'  expected  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [Delete]  ';'  expected	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	68	None	replace
533	[BUG]  [BUGGY]  renamer.process(externs,  externs,  false);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  externs,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  externs,  false);	  renamer.process(externs,    root,    false);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
534	[BUG]  [BUGGY]  renamer.process(externs,  externs,  true);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  externs,  true);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  externs,  true);	  renamer.process(externs,    root,    false);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
535	[BUG]  [BUGGY]  Traversal.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Traversal  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Traversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Traversal.traverse(compiler,  root,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    Converter.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Traversal	31	None	replace
536	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  this,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  this,  arguments);	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	97	None	replace
537	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	105	None	replace
538	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]              AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	TraverseTraversal.traverse(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    externs,    renamer);    nodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	32	None	replace
539	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root,  externs);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,Node,Node)	44	None	replace
540	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  externs,  root);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    root,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,Node,Node)	44	None	replace
541	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  reamer);  [CE]  cannot  find  symbol  reamer  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  reamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  reamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    arguments);    	non-compiled	[CE]  cannot  find  symbol  reamer	24	None	replace
542	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  arguments);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	99	None	replace
543	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES);	          NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,    externs,    RENamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES	128	None	replace
544	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_FOR);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_FOR  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_FOR);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_FOR);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE,    FORWARD_WHILE_TO_FOR);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_FOR	136	None	replace
545	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  node	147	None	replace
546	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNKNOWN);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNKNOWN);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNKNOWN);  node  =  new  NodeTraversal(compiler,  externs,  renamer);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    node    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN	147	None	replace
547	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  Expected:  var  FOO=true	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  not  a  statement	35	None	replace
548	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,MakeDeclaredNamesUnique,Normalize)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  renamer,  this);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,MakeDeclaredNamesUnique,Normalize)	56	None	replace
549	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES  [FE]            AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES);	  NodeTraversal.traverse(compiler,    externs,    renamer,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES	63	None	replace
550	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  ==  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	140	None	replace
551	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    renamer,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique,boolean)	91	None	replace
552	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique(),  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique(),  arguments);	  NodeTraversal.traverse(compiler,    renamer,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  arguments	91	None	replace
553	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  internalRoots,  renamer,  this);  [CE]  cannot  find  symbol  internalRoots  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  internalRoots,  renamer,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  internalRoots,  renamer,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externes,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  internalRoots	3	None	replace
554	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    renamer,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node,boolean)	129	None	replace
555	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  renamer.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  renamer.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    renamer.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
556	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverseRoots(externs,  root,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique)  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverseRoots(externs,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverseRoots(externs,  root,  renamer);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique)	34	None	add
557	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  Root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Root  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  Root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	                NodeTraversal.traverse(compiler,        root,        renamer);        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  Root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  Root	34	None	add
558	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES);	  NodeTraversal.traverse(compiler,    root,    renamer,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES	27	None	replace
559	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	154	None	replace
560	[BUG]  [BUGGY]  Context  t  =  new  Context(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Context  t  =  new  Context(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Context  t  =  new  Context(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	          NodeTraversal.traverse(compiler,    externs,    renamer);    Context.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
561	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	141	None	replace
562	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    RENamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES	38	None	replace
563	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LIST_NAMES_UNIQUE);	          NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,    root,    RENamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	38	None	replace
564	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  root);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  root);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)	98	None	replace
565	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  arguments,  false);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  arguments,  false);	  NodeTraversal.traverse(compiler,    renamer,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	156	None	replace
566	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Context.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Context.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	138	None	replace
567	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  ramer);  [CE]  cannot  find  symbol  ramer  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  ramer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  ramer);	  NodeTraversal.traverseRoots(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  ramer	59	None	replace
568	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  ramer);  [CE]  cannot  find  symbol  ramer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  ramer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  ramer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  ramer	10	None	replace
569	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	10	None	replace
570	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	110	None	replace
571	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  false,  arguments);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  false,  arguments);	  NodeTraversal.traverse(compiler,    root,    renamer,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	125	None	replace
572	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	150	None	replace
573	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_TO_FOR  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  MAKE_TO_FOR	150	None	replace
574	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	152	None	replace
575	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	152	None	replace
576	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  ramer);  [CE]  cannot  find  symbol  ramer  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  ramer);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  false,  ramer);	  NodeTraversal.traverse(compiler,    root,    false,    arguments);    	non-compiled	[CE]  cannot  find  symbol  ramer	23	None	replace
577	[BUG]  [BUGGY]  renamer.process(externs,  externs,  this);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  externs,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  externs,  this);	  renamer.process(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
578	[BUG]  [BUGGY]  Traversed.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traversed  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  Traversed.traverse(compiler,  root,  this);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	Traversed.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversed	50	None	replace
579	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  ramer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  ramer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  ramer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  ramer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    MAKE_LOCAL_NAMES_UNIQUE,    renamer);    	non-compiled	[CE]  cannot  find  symbol  ramer	17	None	replace
580	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	75	None	replace
581	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  externals  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  MakeDeclaredNamesUnique());  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externals,  new  MakeDeclaredNamesUnique());	          NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  externals	75	None	replace
582	[BUG]  [BUGGY]  renamer.process(externs,  root,  assertOnChange,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();      [BUGGY]  renamer.process(externs,  root,  assertOnChange,  checkUserDeclarations);  [BUGGY]      NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  assertOnChange,  checkUserDeclarations);	  renamer.process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	115	None	replace
