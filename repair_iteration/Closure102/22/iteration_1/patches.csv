bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  this);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize)	24	None	replace
2	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  this);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Normalize)	24	None	replace
3	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer,  this);  [CE]  cannot  find  symbol  externes  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  externes	24	None	replace
4	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer,  this);  [CE]  cannot  find  symbol  externals  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  externals	24	None	replace
5	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  this);  [CE]  cannot  find  symbol  externals  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  this);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  externals	24	None	replace
6	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique)	4	None	replace
7	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  renamer);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	4	None	replace
8	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer);  [CE]  cannot  find  symbol  externes  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    renamer);    	non-compiled	[CE]  cannot  find  symbol  externes	4	None	replace
9	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node)	1	None	replace
10	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean)	1	None	replace
11	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  root);  [CE]  cannot  find  symbol  externals  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    	non-compiled	[CE]  cannot  find  symbol  externals	1	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	8	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [CE]  cannot  find  symbol  t  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  null);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  t	8	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  arguments);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  arguments);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	8	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  arguments);	      	non-compiled	[CE]  cannot  find  symbol  arguments	6	None	replace
16	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean)	23	None	replace
17	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,MakeDeclaredNamesUnique)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean,MakeDeclaredNamesUnique)	23	None	replace
18	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externes  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externes,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  externes	23	None	replace
19	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externals  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externals,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  externals	23	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	16	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  false);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	16	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  true);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  true);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	16	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  arguments);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  false,  arguments);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	16	None	replace
24	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  arguments);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals);    	non-compiled	[CE]  cannot  find  symbol  arguments	5	None	replace
25	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  internal);  [CE]  cannot  find  symbol  internal  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  internal);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  internal);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals);    	non-compiled	[CE]  cannot  find  symbol  internal	5	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	13	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  arguments);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  arguments);	      NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	13	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);	  	compilable	  [FE]  AssertionFailedError  	14	3	add
29	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  renamer);	  	compilable	  [FE]  AssertionFailedError  	14	3	add
30	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externes,  renamer);  [CE]  cannot  find  symbol  externes  [FE]      AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externes,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externes,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  externes	14	None	add
31	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  Converter.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  Converter  [FE]        AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  Converter.traverse(compiler,  externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    renamer);    Converter.traverse(compiler,  externs,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  Converter	14	None	add
32	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  nodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  nodeTraversal  [FE]          AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  nodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    renamer);    nodeTraversal.traverse(compiler,  externs,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	14	None	add
33	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  Context.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  Context  [FE]            AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  Context.traverse(compiler,  externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    renamer);    Context.traverse(compiler,  externs,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  Context	14	None	add
34	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	12	9	add
35	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	12	9	add
36	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  Converter.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Converter  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  Converter.traverse(compiler,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    Converter.traverse(compiler,  root,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  Converter	12	None	add
37	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  renamer.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  renamer.traverse(compiler,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    renamer.traverse(compiler,  root,  renamer);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
38	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  RENamer);  [CE]  cannot  find  symbol  RENamer  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  RENamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  RENamer);	  	non-compiled	[CE]  cannot  find  symbol  RENamer	12	None	add
39	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  roots,  renamer);  [CE]  cannot  find  symbol  roots  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  roots,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  roots,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  roots	12	None	add
40	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renaMER);  [CE]  cannot  find  symbol  renaMER  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renaMER);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renaMER);	  	non-compiled	[CE]  cannot  find  symbol  renaMER	12	None	add
41	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  externs);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node)	2	None	replace
42	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  externals);  [CE]  cannot  find  symbol  externals  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  externals);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  root,  externals);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs);    	non-compiled	[CE]  cannot  find  symbol  externals	2	None	replace
43	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	3	None	replace
44	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  renamer);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  root,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)	3	None	replace
45	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	3	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	11	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  arguments);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  arguments);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	11	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  [CE]  cannot  find  symbol  t  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  null);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  t	11	None	replace
49	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	7	1	add
50	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	7	1	add
51	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	7	None	add
52	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	7	None	add
53	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  ';'  expected	7	None	add
54	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	  	non-compiled	[CE]  not  a  statement	7	None	add
55	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	7	None	add
56	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  root,  this);	      NodeTraversal.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)	18	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this);	      NodeTraversal.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize)	18	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)	18	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  arguments);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  arguments);	      NodeTraversal.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	18	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,Normalize)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  this);	      NodeTraversal.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,Normalize)	18	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]    AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	15	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]      AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	15	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  arguments);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  arguments);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	15	None	replace
64	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	add
65	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	add
66	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	10	None	add
67	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	10	None	add
68	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  ';'  expected	10	None	add
69	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	  	non-compiled	[CE]  not  a  statement	10	None	add
70	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	10	None	add
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer);  [CE]  cannot  find  symbol  roots  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  roots,  renamer);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  cannot  find  symbol  roots	22	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  [CE]  cannot  find  symbol  externes  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externes,  renamer);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  cannot  find  symbol  externes	22	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  root);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Node)	22	None	replace
74	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	add	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	19	1	add
75	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	19	1	add
76	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	19	None	add
77	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	19	None	add
78	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  renamer.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  renamer.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    renamer.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
79	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	  	non-compiled	[CE]  not  a  statement	19	None	add
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  externs);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	17	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	17	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  arguments);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  arguments);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	17	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)	17	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  renamer);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)	17	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  t  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  t	20	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	20	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  arguments);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique(),  arguments);	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  arguments	20	None	replace
88	[BUG]  [BUGGY]  renamer.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  renamer.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      renamer.process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
89	[BUG]  [BUGGY]  renamer.process(externs,  root,  this);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  renamer.process(externs,  root,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  this);	      renamer.process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
90	[BUG]  [BUGGY]  renamer.process(externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  renamer.process(externs,  root,  arguments);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  arguments);	      renamer.process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	21	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	20	None	replace
92	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  Annotated.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  Annotated  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  Annotated.traverse(compiler,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    Annotated.traverse(compiler,  root,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  Annotated	12	None	add
93	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  Root,  renamer);  [CE]  cannot  find  symbol  Root  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  Root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  Root,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  Root	12	None	add
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  renamer);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	11	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	13	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  this,  renamer);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	8	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Normalize)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  this);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Normalize)	8	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root);	      NodeTraversal.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)	18	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer);	      NodeTraversal.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)	18	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer);	      NodeTraversal.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	18	None	replace
101	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	19	None	add
102	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	19	None	add
103	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	  	non-compiled	[CE]  not  a  statement	19	None	add
104	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	19	None	add
105	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	19	None	add
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)  [FE]    AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  this);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)	15	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Node)  [FE]      AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  externs);	      NodeTraversal.traverse(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Node)	15	None	replace
108	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	7	None	add
109	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	7	None	add
110	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	  	non-compiled	[CE]  not  a  statement	7	None	add
111	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	7	None	add
112	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	7	None	add
113	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  roots,  renamer);  [CE]  cannot  find  symbol  roots  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  roots,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  roots,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals,    renamer);    	non-compiled	[CE]  cannot  find  symbol  roots	4	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  this);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)	17	None	replace
115	[BUG]  [BUGGY]  renamer.process(externs,  root,  assertOnChange);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  renamer.process(externs,  root,  assertOnChange);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  assertOnChange);	      renamer.process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
116	[BUG]  [BUGGY]  renamer.process(externs,  root,  false);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  renamer.process(externs,  root,  false);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  root,  false);	      renamer.process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
117	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	10	None	add
118	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	10	None	add
119	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	10	None	add
120	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	10	None	add
121	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	  	non-compiled	[CE]  not  a  statement	10	None	add
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  renamer);  [CE]  cannot  find  symbol  Root  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  Root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  Root,  renamer);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Root	22	None	replace
123	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  factory,  renamer);  [CE]  cannot  find  symbol  factory  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  factory,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  externs,  factory,  renamer);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  factory	3	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  false,  renamer);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	16	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  false);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	16	None	replace
126	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  renamer.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  renamer.traverse(compiler,  externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    renamer);    renamer.traverse(compiler,  externs,  renamer);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
127	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externals,  renamer);  [CE]  cannot  find  symbol  externals  [FE]      AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externals,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externals,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  externals	14	None	add
128	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  RENamer);  [CE]  cannot  find  symbol  RENamer  [FE]        AssertionFailedError    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  renamer);  NodeTraversal.traverse(compiler,  externs,  RENamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    renamer);    NodeTraversal.traverse(compiler,  externs,  RENamer);	  	non-compiled	[CE]  cannot  find  symbol  RENamer	14	None	add
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  root);	      NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)	17	None	replace
130	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	10	None	add
131	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	10	None	add
132	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	10	None	add
133	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  renamer.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  renamer.traverse(compiler,  externs,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    renamer.traverse(compiler,  externs,  this);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
134	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	23	None	replace
135	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	23	None	replace
136	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  FORWARD_WHILE_TO_FOR);  [CE]  cannot  find  symbol  FORWARD_WHILE_TO_FOR  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  FORWARD_WHILE_TO_FOR);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  FORWARD_WHILE_TO_FOR);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  FORWARD_WHILE_TO_FOR	23	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  this);	      NodeTraversal.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)	18	None	replace
138	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	7	None	add
139	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  renamer.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  renamer.traverse(compiler,  root,  this);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    renamer.traverse(compiler,  root,  this);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
140	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	7	None	add
141	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	7	None	add
142	[BUG]  [BUGGY]  renamer.process(externs,  externs,  root);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  renamer.process(externs,  externs,  root);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	renamer.process(externs,  externs,  root);	      renamer.process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
143	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  externs);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  externs);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,Node)	3	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  arguments);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  arguments);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	22	None	replace
145	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  Preconditions.checkArgument(arguments!=  null);  NodeTraversal.traverse(compiler,  root,  renamer);  [CE]  cannot  find  symbol  arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  Preconditions.checkArgument(arguments!=  null);  NodeTraversal.traverse(compiler,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    Preconditions.checkArgument(arguments!=  null);  NodeTraversal.traverse(compiler,  root,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  arguments	12	None	add
146	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  root,  renamer);  [CE]  cannot  find  symbol  node  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  root,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  root,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  node	12	None	add
147	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  node  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  renamer);  NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  externs,  renamer);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    renamer);    NodeTraversal.traverse(compiler,  root,  renamer);  node  =  new  NodeTraversal(compiler,  externs,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  node	12	None	add
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,boolean)  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,boolean)	13	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique());  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  new  MakeDeclaredNamesUnique());	      NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	20	None	replace
150	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    externals);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,boolean)	5	None	replace
151	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  root);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    root);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,Node)	1	None	replace
152	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,Normalize,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this);    	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,MakeDeclaredNamesUnique,Normalize,boolean)	24	None	replace
153	[BUG]  [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer,  MAKE_LOCAL_NAMES_UNKNOWN);	  NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES_UNKNOWN	24	None	replace
154	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	19	None	add
155	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]      NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	        NodeTraversal.traverse(compiler,    root,    new    MakeDeclaredNamesUnique());    junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	19	None	add
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  false);  [BUGGY]    NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	91	91	1	replace	NodeTraversal.traverse(compiler,  renamer,  false);	      NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,boolean)	16	None	replace
