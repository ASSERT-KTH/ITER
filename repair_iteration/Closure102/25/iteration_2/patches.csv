bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(null,  root);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(null,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(null,  root);	  new    PropogateConstantAnnotations(compiler,    externs).process(renamer,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	40	None	replace
2	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  externs);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    externs).process(renamer,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	40	None	replace
3	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(renamer,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(renamer,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(renamer,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(renamer,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	40	None	replace
4	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	122	None	replace
5	[BUG]  [BUGGY]  Function:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Function:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Function:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	122	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	59	None	add
7	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	59	None	add
8	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  ';'  expected	59	None	add
9	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	Preconditions.checkState(externs!=    null);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	59	1	add
10	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	59	1	add
11	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	  	non-compiled	[CE]  not  a  statement	59	None	add
12	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	59	None	add
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  CONVERT_WHILE_TO_FOR);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  CONVERT_WHILE_TO_FOR);	  NodeTraversal.traverse(compiler,    renamer,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	138	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES);	  NodeTraversal.traverse(compiler,    renamer,    root);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES	138	None	replace
15	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	126	None	replace
16	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	126	None	replace
17	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	126	None	replace
18	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [Delete].process(externs,  root);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [Delete].process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [Delete].process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	126	None	replace
19	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [Delete].process(externs,  root);  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [Delete].process(externs,  root);  }  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [Delete].process(externs,  root);  }	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	126	None	replace
20	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    arguments);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	63	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  arguments);	  NodeTraversal.traverse(compiler,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  arguments	6	None	replace
22	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	10	None	replace
25	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traverse  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traverse.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traverse.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	10	None	replace
26	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    arguments).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
27	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  arguments,  assertOnChange).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  arguments,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  arguments,  assertOnChange).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    arguments).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
28	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    arguments).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
29	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externs,  assertOnChange).process(arguments,  root);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externs,  assertOnChange).process(arguments,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externs,  assertOnChange).process(arguments,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    arguments).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	28	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  true);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  true);	  NodeTraversal.traverse(compiler,    externs,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	52	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  false,  arguments);	  NodeTraversal.traverse(compiler,    externs,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	52	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null,  false);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  null,  false);	  NodeTraversal.traverse(compiler,    externs,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,boolean)	52	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	18	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  constantMap);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  constantMap);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  constantMap	18	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  argument);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  argument);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argument	18	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  true);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  true);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  true);	  NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  cannot  find  symbol  arguments	53	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  true);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  null,  true);	  NodeTraversal.traverse(compiler,    root,    true);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,boolean)	53	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	91	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  junit);  [CE]  cannot  find  symbol  junit  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  junit);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  junit);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  junit	91	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(converter!=  null);  [CE]  cannot  find  symbol  converter  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(converter!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(converter!=  null);	  Preconditions.checkState(array!=    null);    	non-compiled	[CE]  cannot  find  symbol  converter	99	None	replace
41	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  t).process(externs,  assertOnChange);  [CE]  cannot  find  symbol  t  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  t).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  t).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externals).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  t	65	None	replace
42	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  exprs).process(externs,  assertOnChange);  [CE]  cannot  find  symbol  exprs  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  exprs).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  exprs).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externals).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  exprs	65	None	replace
43	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	13	None	replace
44	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	13	None	replace
45	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	13	None	replace
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs  ==  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	Preconditions.checkState(externs  ==  null);	  Preconditions.checkState(externs!=    null);    	compilable	  [FE]  RuntimeException  	60	13	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(externs  ==  null);  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs  ==  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs  ==  null);	  Preconditions.checkState(externs!=    null);    	compilable	  [FE]  RuntimeException  	60	13	replace
48	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations),  t.process(externs,  root);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations),  t.process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	133	None	replace
49	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	133	None	replace
50	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	133	None	replace
51	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  root),  t.process(externs,  assertOnChange);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  root),  t.process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  root),  t.process(externs,  assertOnChange);	  new    NodeConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	133	None	replace
52	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  arguments),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  arguments),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  arguments),  t.process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	133	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	128	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  arguments);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	128	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  junit);  [CE]  cannot  find  symbol  junit  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  junit);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  junit);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  junit	128	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	128	None	replace
57	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root  ==  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	Preconditions.checkState(root  ==  null);	  Preconditions.checkState(root!=    null);    	compilable	  [FE]  RuntimeException  	58	13	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(root  ==  null);  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root  ==  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root  ==  null);	  Preconditions.checkState(root!=    null);    	compilable	  [FE]  RuntimeException  	58	13	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  [CE]  cannot  find  symbol  parent  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(parent!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(parent!=  null);	  Preconditions.checkState(root!=    null);    	non-compiled	[CE]  cannot  find  symbol  parent	58	None	replace
60	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externals).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externals  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externals).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externals).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  externals	62	None	replace
61	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  assertOnChange);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	62	None	replace
62	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	105	None	replace
63	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  fr()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  fr()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  fr()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	105	None	replace
64	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  expression()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  expression()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  expression()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	105	None	replace
65	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
66	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externs,  t).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externs,  t).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externs,  t).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
67	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
68	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externs).process(externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externs).process(externs,  root,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externs).process(externs,  root,  arguments);	  new    NodeConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	29	None	replace
69	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs);  [CE]  cannot  find  symbol  converter  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(converter,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(converter,  externs);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	90	None	replace
70	[BUG]  [BUGGY]  t.traverseRoots(constantMap,  root);  [CE]  cannot  find  symbol  constantMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(constantMap,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(constantMap,  root);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  cannot  find  symbol  constantMap	90	None	replace
71	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  arguments);  [CE]  cannot  find  symbol  converter  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(converter,  root,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(converter,  root,  arguments);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	90	None	replace
72	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	149	None	replace
73	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	149	None	replace
74	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	149	None	replace
75	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	149	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(),  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.DuplicateDeclarationHandler,Normalize)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(),  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(),  this);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.DuplicateDeclarationHandler,Normalize)	113	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this,  arguments);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	113	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externals,  this);  [CE]  cannot  find  symbol  externals  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externals,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externals,  this);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    this);    	non-compiled	[CE]  cannot  find  symbol  externals	113	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.DuplicateDeclarationHandler,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.DuplicateDeclarationHandler,boolean)	113	None	replace
80	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
81	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  parent);  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  parent);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  parent);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  parent	116	None	replace
82	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  arguments);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	116	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclaration());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclaration());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclaration());	  NodeTraversal.traverse(compiler,    externs,    new    DuplicateDeclaration());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  arguments);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  arguments);	  NodeTraversal.traverse(compiler,    externs,    new    DuplicateDeclaration());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  new  DuplicateDeclaration());  [CE]  cannot  find  symbol  renamer  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  new  DuplicateDeclaration());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  new  DuplicateDeclaration());	  NodeTraversal.traverse(compiler,    externs,    new    DuplicateDeclaration());    	non-compiled	[CE]  cannot  find  symbol  renamer	32	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  new  DuplicateDeclaration());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  new  DuplicateDeclaration());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  new  DuplicateDeclaration());	  NodeTraversal.traverse(compiler,    externs,    new    DuplicateDeclaration());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
87	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    assertOnChange);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	64	None	replace
88	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    assertOnChange);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	64	None	replace
89	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  checkUserDeclarations).process(externs,  assertOnChange);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  checkUserDeclarations).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  checkUserDeclarations).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	64	None	replace
90	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    assertOnChange);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	64	None	replace
91	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  t).process(externs,  assertOnChange);  [CE]  cannot  find  symbol  t  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  t).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  t).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  t	64	None	replace
92	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	106	None	replace
93	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	106	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	7	None	replace
95	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES).process(externs,  externs);  [CE]  cannot  find  symbol  DEPRECATED_NAMES  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    DEPRECATED_NAMES).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED_NAMES	94	None	replace
96	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES).process(externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES).process(externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES).process(externs,  renamer);	  new    PropogateConstantAnnotations(compiler,    DEPRECATED_NAMES).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	94	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  assertOnChange);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  arguments);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  arguments);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  argument);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  argument);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  argument);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  forbidChanges);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  forbidChanges);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  arguments);  [CE]  cannot  find  symbol  renamer  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  renamer,  arguments);	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  renamer	1	None	replace
102	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	129	None	replace
103	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  arguments	129	None	replace
104	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	129	None	replace
105	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	129	None	replace
106	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  externs,  root);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
107	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externs).process(externs,  assertOnChange);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externs).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externs).process(externs,  assertOnChange);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
108	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  root,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  root,  arguments);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	135	None	replace
109	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	132	None	replace
110	[BUG]  [BUGGY]  constructor  PropogateConstantAnnotations(compiler,  externs,  root).process(externs,  assertOnChange);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  constructor  PropogateConstantAnnotations(compiler,  externs,  root).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	constructor  PropogateConstantAnnotations(compiler,  externs,  root).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    assertOnChange);    	non-compiled	[CE]  ';'  expected	66	None	replace
111	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  root).process(externs,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  root).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  root).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    assertOnChange);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	66	None	replace
112	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	69	1	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	69	1	replace
114	[BUG]  [BUGGY]  Context.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Context  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Context.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Context.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	69	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	69	None	replace
116	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  this);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  this);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  this);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    this);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	107	None	replace
117	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  root,  this);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  root,  this);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  root,  this);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    this);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	107	None	replace
118	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  assertOnChange,  this);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  assertOnChange,  this);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  assertOnChange,  this);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    this);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	107	None	replace
119	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs.cloneTree()).process(externs,  root,  this);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs.cloneTree()).process(externs,  root,  this);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs.cloneTree()).process(externs,  root,  this);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    this);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	107	None	replace
120	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externals).process(externs,  root,  this);  [CE]  cannot  find  symbol  externals  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externals).process(externs,  root,  this);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externals).process(externs,  root,  this);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  externals	107	None	replace
121	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	100	None	replace
122	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  renamer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	100	None	replace
123	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ';'  expected	39	None	replace
124	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ';'  expected	39	None	replace
125	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ';'  expected	39	None	replace
126	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  arguments),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  arguments),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  arguments),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ';'  expected	39	None	replace
127	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root,  assertOnChange);  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ';'  expected	39	None	replace
128	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	15	None	replace
129	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.call(arguments  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	15	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	15	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  this);  [CE]  cannot  find  symbol  roots  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  roots,  this);	  NodeTraversal.traverse(compiler,    externes,    this);    	non-compiled	[CE]  cannot  find  symbol  roots	2	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  false);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  false);	  NodeTraversal.traverse(compiler,    root,    arguments,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	54	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  false);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  false);	  NodeTraversal.traverse(compiler,    root,    arguments,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	54	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.DuplicateDeclarationHandler)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    externs,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.DuplicateDeclarationHandler)	82	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(),  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(),  arguments);	  NodeTraversal.traverse(compiler,    externs,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  arguments	82	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  new  DuplicateDeclarationHandler());  [CE]  cannot  find  symbol  t  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  t,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    externs,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  t	82	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  new  DuplicateDeclarationHandler());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.DuplicateDeclarationHandler)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    externs,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.DuplicateDeclarationHandler)	82	None	replace
138	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	70	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	70	None	replace
140	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	127	None	replace
141	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	function()  {  arguments=Array.prototype.slice.call(	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  ';'  expected	127	None	replace
142	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	127	None	replace
143	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	127	None	replace
144	[BUG]  [BUGGY]  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Annotated:  function  f()  {  arguments=Array.prototype.slice.call(	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	127	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)	101	None	replace
146	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  converter	101	None	replace
147	[BUG]  [BUGGY]  t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  t  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  t	101	None	replace
148	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES_UNIQUE).process(externs,  externs);  [CE]  cannot  find  symbol  DEPRECATED_NAMES_UNIQUE  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES_UNIQUE).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES_UNIQUE).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    DEPRECATED_NAMES_UNIQUE).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED_NAMES_UNIQUE	26	None	replace
149	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  DEPRECATED_NAMES_UNIQUE  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    DEPRECATED_NAMES_UNIQUE).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED_NAMES_UNIQUE	26	None	replace
150	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	45	None	replace
151	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	45	None	replace
152	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	45	None	replace
153	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE	45	None	replace
154	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	11	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  new  DuplicateDeclarationHandler());  [CE]  cannot  find  symbol  renamer  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    root,    renamer,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  renamer	112	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  new  DuplicateDeclarationHandler());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Normalize.DuplicateDeclarationHandler)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    root,    renamer,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Normalize.DuplicateDeclarationHandler)	112	None	replace
157	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externes).process(externs,  root);  [CE]  cannot  find  symbol  externes  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externes).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externes).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    t).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  externes	25	None	replace
158	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externals).process(externs,  root);  [CE]  cannot  find  symbol  externals  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externals).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externals).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    t).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  externals	25	None	replace
159	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  t);  [CE]  cannot  find  symbol  t  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  t);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  t);	  new    PropogateConstantAnnotations(compiler,    t).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	25	None	replace
160	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  assertOnChange);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  assertOnChange);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
161	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
162	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	117	None	replace
163	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
164	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	93	None	replace
165	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE	93	None	replace
166	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	93	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	8	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	8	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	8	None	replace
170	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	148	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	148	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);	  NodeTraversal.traverse(compiler,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  renamer	98	None	replace
173	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol  renamer	41	None	replace
174	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  null);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  null);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  null);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    externs);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	41	None	replace
175	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange),  t.process(externs,  root);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	36	None	replace
176	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	36	None	replace
177	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  arguments,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  arguments,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  arguments,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	36	None	replace
178	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	36	None	replace
179	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  arguments);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	21	None	replace
180	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	21	None	replace
181	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  t).process(externs,  root);  [CE]  cannot  find  symbol  t  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  t).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  t).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	21	None	replace
182	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  root).process(externs,  root);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  root).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  root).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	21	None	replace
183	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=.process(externs,  root);  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=.process(externs,  root);  }  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=.process(externs,  root);  }	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	81	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  checkUserDeclarations);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    externs,    this,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	92	None	replace
185	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations),  t.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations),  t.traverseRoots(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations),  t.traverseRoots(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	140	None	replace
186	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE),  t.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE),  t.traverseRoots(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE),  t.traverseRoots(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	140	None	replace
187	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root),  t.traverseRoots(externs,  assertOnChange);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root),  t.traverseRoots(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root),  t.traverseRoots(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	140	None	replace
188	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs),  t.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs),  t.traverseRoots(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs),  t.traverseRoots(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	140	None	replace
189	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.traverseRoots(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.traverseRoots(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange)&&    t.process(externs,    root);    	non-compiled	[CE]  not  a  statement	111	None	replace
190	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  externs,  root);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange)&&    t.process(externs,    root);    	non-compiled	[CE]  not  a  statement	111	None	replace
191	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  forbidChanges),  t.process(externs,  root);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  forbidChanges),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  forbidChanges),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	35	None	replace
192	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  checkUserDeclarations,  assertOnChange),  t.process(externs,  root);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  checkUserDeclarations,  assertOnChange),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  checkUserDeclarations,  assertOnChange),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	35	None	replace
193	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root,  checkUserDeclarations),  t.process(externs,  assertOnChange);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root,  checkUserDeclarations),  t.process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root,  checkUserDeclarations),  t.process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	35	None	replace
194	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  checkUserDeclarations),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  checkUserDeclarations),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  checkUserDeclarations),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	35	None	replace
195	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);	  	compilable	  [FE]  RuntimeException  	3	13	add
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);	  	compilable	  [FE]  RuntimeException  	3	13	add
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  t  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  t	3	None	add
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);.process(externs,  root);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);.process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);.process(externs,  root);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
199	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  removeDuplicateDeclarations(root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);  removeDuplicateDeclarations(root);	  	compilable	  [FE]  RuntimeException  	3	13	add
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  removeDuplicateDeclarations(root);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  removeDuplicateDeclarations(root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);  removeDuplicateDeclarations(root);	  	compilable	  [FE]  RuntimeException  	3	13	add
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverse(compiler,  root,  null);  [CE]  cannot  find  symbol  t  [FE]            RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverse(compiler,  root,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    t.traverse(compiler,  root,  null);	  	non-compiled	[CE]  cannot  find  symbol  t	3	None	add
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  null);  [CE]  cannot  find  symbol  externals  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externals,  null);	  NodeTraversal.traverse(compiler,    root,    null);    	non-compiled	[CE]  cannot  find  symbol  externals	4	None	replace
203	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  checkUserDeclarations).process(externs,  root);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  checkUserDeclarations).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  checkUserDeclarations).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
204	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  checkUserDeclarations,  assertOnChange).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  checkUserDeclarations,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  checkUserDeclarations,  assertOnChange).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
205	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externs,  checkUserDeclarations).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externs,  checkUserDeclarations).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externs,  checkUserDeclarations).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
206	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  verifyOnChange,  checkUserDeclarations).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  verifyOnChange,  checkUserDeclarations).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  verifyOnChange,  checkUserDeclarations).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
207	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externals,  assertOnChange).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externals,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externals,  assertOnChange).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    externals).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
208	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externes,  assertOnChange).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externes,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externes,  assertOnChange).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    externals).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
209	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externals).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externals).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externals).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    externals).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
210	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  externs).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  externs).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  externs).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    externals).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
211	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  this);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  this);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    arguments);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
212	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    arguments);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
213	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  assertOnChange);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    arguments);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
214	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root);  [CE]  cannot  find  symbol  t  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(compiler,  externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(compiler,  externs,  root);	  t.traverseRoots(constantMap,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	137	None	replace
215	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(root,  externs,  constantMap);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(root,  externs,  constantMap);	  t.traverseRoots(constantMap,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  constantMap	137	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler());  [CE]  cannot  find  symbol  externals  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    externes,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  externals	86	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  DuplicateDeclarationHandler());  [CE]  cannot  find  symbol  roots  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  roots,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    externes,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  roots	86	None	replace
218	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(arguments,  assertOnChange);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(arguments,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(arguments,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(arguments,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
219	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(arguments,  assertOnChange);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(arguments,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(arguments,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(arguments,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
220	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(arguments,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
221	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(arguments,  externs);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(arguments,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(arguments,  externs);	  new    PropogateConstantAnnotations(compiler,    externs).process(arguments,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
222	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(arguments,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(arguments,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(arguments,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(arguments,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
223	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  arguments);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	42	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  false,  root);	  NodeTraversal.traverse(compiler,    root,    false,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)	55	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  false,  externs);  [CE]  cannot  find  symbol  arguments  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  false,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  false,  externs);	  NodeTraversal.traverse(compiler,    root,    false,    externs);    	non-compiled	[CE]  cannot  find  symbol  arguments	55	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  true,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  true,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  true,  externs);	  NodeTraversal.traverse(compiler,    root,    false,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)	55	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  false,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,Node)  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  false,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  false,  externs);	  NodeTraversal.traverse(compiler,    root,    false,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,Node)	55	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  externs,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  externs,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  false,  externs,  arguments);	  NodeTraversal.traverse(compiler,    root,    false,    externs);    	non-compiled	[CE]  cannot  find  symbol  arguments	55	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(root));  [CE]  constructor  DuplicateDeclarationHandler  in  class  Normalize.DuplicateDeclarationHandler  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(root));  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(root));	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(externs));    	non-compiled	[CE]  constructor  DuplicateDeclarationHandler  in  class  Normalize.DuplicateDeclarationHandler  cannot  be  applied  to  given  types;	85	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(externs));  [CE]  constructor  DuplicateDeclarationHandler  in  class  Normalize.DuplicateDeclarationHandler  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(externs));  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(externs));	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(externs));    	non-compiled	[CE]  constructor  DuplicateDeclarationHandler  in  class  Normalize.DuplicateDeclarationHandler  cannot  be  applied  to  given  types;	85	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(null));  [CE]  constructor  DuplicateDeclarationHandler  in  class  Normalize.DuplicateDeclarationHandler  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(null));  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(null));	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(externs));    	non-compiled	[CE]  constructor  DuplicateDeclarationHandler  in  class  Normalize.DuplicateDeclarationHandler  cannot  be  applied  to  given  types;	85	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclarationHandler(root));  [CE]  cannot  find  symbol  externes  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclarationHandler(root));  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclarationHandler(root));	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(externs));    	non-compiled	[CE]  cannot  find  symbol  externes	85	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(ref));  [CE]  cannot  find  symbol  ref  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(ref));  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(ref));	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(externs));    	non-compiled	[CE]  cannot  find  symbol  ref	85	None	replace
234	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	44	None	replace
235	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	44	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	71	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	71	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	71	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments!=  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments!=  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments!=	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	74	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(args  ==  null);  [CE]  cannot  find  symbol  args  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(args  ==  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(args  ==  null);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  cannot  find  symbol  args	56	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  false);  [CE]  cannot  find  symbol  renamer  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  false);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  false);	  NodeTraversal.traverse(compiler,    root,    renamer,    false);    	non-compiled	[CE]  cannot  find  symbol  renamer	120	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  false);  [CE]  cannot  find  symbol  t  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  false);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  t,  false);	  NodeTraversal.traverse(compiler,    root,    renamer,    false);    	non-compiled	[CE]  cannot  find  symbol  t	120	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	14	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	14	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	14	None	replace
246	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	37	None	replace
247	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	37	None	replace
248	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  externs);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	37	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  renamer);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  false,  renamer);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  cannot  find  symbol  renamer	121	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  false,  renamer);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  false,  renamer);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  false,  renamer);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	121	None	replace
251	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  true,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  true,  renamer);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  true,  renamer);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  cannot  find  symbol  renamer	121	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  false,  arguments);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	121	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  false,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  false,  renamer);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  false,  renamer);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  cannot  find  symbol  renamer	121	None	replace
254	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  renamer),  t.process(externs,  root);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  renamer),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  renamer),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    renamer),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	110	None	replace
255	[BUG]  [BUGGY]  new  NormalizeConstantAnnotations(compiler,  externs),  t.process(externs,  root);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NormalizeConstantAnnotations(compiler,  externs),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NormalizeConstantAnnotations(compiler,  externs),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    renamer),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	110	None	replace
256	[BUG]  [BUGGY]  new  NormalizeConstantAnnotations(compiler,  renamer),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NormalizeConstantAnnotations(compiler,  renamer),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NormalizeConstantAnnotations(compiler,  renamer),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    renamer),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	110	None	replace
257	[BUG]  [BUGGY]  new  ProtogateConstantAnnotations(compiler,  externs),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  ProtogateConstantAnnotations(compiler,  externs),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  ProtogateConstantAnnotations(compiler,  externs),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    renamer),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	110	None	replace
258	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this);  [CE]  cannot  find  symbol  t  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(externs,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(externs,  root,  this);	  t.traverseRoots(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  t	88	None	replace
259	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange);  [CE]  cannot  find  symbol  t  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(externs,  root,  assertOnChange);	  t.traverseRoots(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  t	88	None	replace
260	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  false);  [CE]  cannot  find  symbol  t  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(externs,  root,  false);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(externs,  root,  false);	  t.traverseRoots(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  t	88	None	replace
261	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs.cloneTree()).process(externs,  root);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs.cloneTree()).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs.cloneTree()).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    arguments).process(externs,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	22	None	replace
262	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	124	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	124	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	124	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	124	None	replace
266	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	96	1	add
267	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	96	1	add
268	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	96	None	add
269	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	96	None	add
270	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  ';'  expected	96	None	add
271	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	  	non-compiled	[CE]  not  a  statement	96	None	add
272	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }	  	non-compiled	[CE]  not  a  statement	96	None	add
273	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  assertOnChange);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	49	None	replace
274	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	151	None	replace
275	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	151	None	replace
276	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	12	None	replace
277	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	12	None	replace
278	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  t,  assertOnChange).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  t,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  t,  assertOnChange).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    t).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
279	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  t).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  t).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  t).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    t).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	72	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	72	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  externs);	  t.traverseRoots(externs,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)	89	None	replace
283	[BUG]  [BUGGY]  t.traverseRoots(constantMap,  externs);  [CE]  cannot  find  symbol  constantMap  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(constantMap,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(constantMap,  externs);	  t.traverseRoots(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol  constantMap	89	None	replace
284	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	9	1	add
285	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	9	1	add
286	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	9	None	add
287	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	9	None	add
288	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	9	None	add
289	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	9	None	add
290	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	9	1	add
291	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	9	1	add
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  checkUserDeclarations,  new  DuplicateDeclarationHandler());  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  checkUserDeclarations,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  checkUserDeclarations,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    root,    this,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	83	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externals,  new  DuplicateDeclarationHandler());  [CE]  cannot  find  symbol  externals  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externals,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  externals,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    root,    this,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  externals	83	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  new  DuplicateDeclarationHandler(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  new  DuplicateDeclarationHandler(),  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  new  DuplicateDeclarationHandler(),  arguments);	  NodeTraversal.traverse(compiler,    root,    this,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  arguments	83	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  internals,  new  DuplicateDeclarationHandler());  [CE]  cannot  find  symbol  internals  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  internals,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  internals,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    root,    this,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  internals	83	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    root,    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  ')'  expected	95	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  forbidChanges);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    root,    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  ')'  expected	95	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    root,    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  ')'  expected	95	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    root,    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  ')'  expected	95	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    root,    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  ')'  expected	95	None	replace
301	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	43	None	replace
302	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	43	1	replace
303	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	43	1	replace
304	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	43	None	replace
305	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	75	1	add
306	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	75	1	add
307	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	75	None	add
308	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	75	None	add
309	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);  [CE]  cannot  find  symbol  externals  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);	  	non-compiled	[CE]  cannot  find  symbol  externals	75	None	add
310	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	75	None	add
311	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	75	1	add
312	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	75	1	add
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	73	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	73	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	73	None	replace
316	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    arguments);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	130	None	replace
317	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    arguments);    	non-compiled	[CE]  cannot  find  symbol  arguments	130	None	replace
318	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    arguments);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	130	None	replace
319	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  checkUserDeclarations);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  checkUserDeclarations);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	51	None	replace
320	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	51	None	replace
321	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  externs,  renamer);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	146	None	replace
322	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    externs,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	146	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	145	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externals);  [CE]  cannot  find  symbol  externals  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externals);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  externals);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    arguments);    	non-compiled	[CE]  cannot  find  symbol  externals	84	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  internals);  [CE]  cannot  find  symbol  internals  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  internals);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  internals);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    arguments);    	non-compiled	[CE]  cannot  find  symbol  internals	84	None	replace
326	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traverse  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traverse.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traverse.traverse(compiler,  externs,  this);	  Traverse.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	5	None	replace
327	[BUG]  [BUGGY]  Traverse.traverse(compiler,  root,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traverse.traverse(compiler,  root,  this,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traverse.traverse(compiler,  root,  this,  arguments);	  Traverse.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	5	None	replace
328	[BUG]  [BUGGY]  Traverse.traverse(compiler,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traverse.traverse(compiler,  root,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traverse.traverse(compiler,  root,  arguments);	  Traverse.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	5	None	replace
329	[BUG]  [BUGGY]  Traverse.traverse(compiler,  root,  null);  [CE]  cannot  find  symbol  Traverse  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traverse.traverse(compiler,  root,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traverse.traverse(compiler,  root,  null);	  Traverse.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	5	None	replace
330	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	131	None	replace
331	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  root,  assertOnChange);  [CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  root,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE	131	None	replace
332	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE	131	None	replace
333	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	131	None	replace
334	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  this);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  this);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  this);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
335	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  checkUserDeclarations);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  checkUserDeclarations);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	134	None	replace
336	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  forbidChanges);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	134	None	replace
337	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    renamer);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	48	None	replace
338	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  root);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    renamer);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	48	None	replace
339	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	47	None	replace
340	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	47	None	replace
341	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	47	None	replace
342	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(compiler,  root);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(compiler,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(compiler,  root);	  new    PropogateConstantAnnotations(compiler,    compiler).process(externs,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	125	None	replace
343	[BUG]  [BUGGY]  if(compiler  instanceof  PropogateConstantAnnotations)  {  new  PropogateConstantAnnotations(compiler,  compiler).process(externs,  root);  }  [CE]  inconvertible  types  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  if(compiler  instanceof  PropogateConstantAnnotations)  {  new  PropogateConstantAnnotations(compiler,  compiler).process(externs,  root);  }  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	if(compiler  instanceof  PropogateConstantAnnotations)  {  new  PropogateConstantAnnotations(compiler,  compiler).process(externs,  root);  }	  new    PropogateConstantAnnotations(compiler,    compiler).process(externs,    root);    	non-compiled	[CE]  inconvertible  types	125	None	replace
344	[BUG]  [BUGGY]  if(compiler  instanceof  PropogateConstantAnnotations)  {  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root);  }  [CE]  inconvertible  types  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  if(compiler  instanceof  PropogateConstantAnnotations)  {  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root);  }  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	if(compiler  instanceof  PropogateConstantAnnotations)  {  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root);  }	  new    PropogateConstantAnnotations(compiler,    compiler).process(externs,    root);    	non-compiled	[CE]  inconvertible  types	125	None	replace
345	[BUG]  [BUGGY]  constructor  PropogateConstantAnnotations(compiler,  externs).process(externs,  root);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  constructor  PropogateConstantAnnotations(compiler,  externs).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	constructor  PropogateConstantAnnotations(compiler,  externs).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    compiler).process(externs,    root);    	non-compiled	[CE]  ';'  expected	125	None	replace
346	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);  [CE]  cannot  find  symbol  externals  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol  externals	76	None	replace
347	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	136	None	replace
348	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  externs);  [CE]  cannot  find  symbol  converter  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(converter,  root,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(converter,  root,  externs);	  t.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	136	None	replace
349	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);	  	compilable	  [FE]  RuntimeException  	23	2	add
350	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);	  	compilable	  [FE]  RuntimeException  	23	2	add
351	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  NodeTraversal.traverse(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean)  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  NodeTraversal.traverse(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root);    NodeTraversal.traverse(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean)	23	None	add
352	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  createConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  createConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root);    createConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
353	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  MAKE_LCAL_NAMES_UNIQUE).process(externs,  root);  [CE]  cannot  find  symbol  MAKE_LCAL_NAMES_UNIQUE  [FE]          RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  MAKE_LCAL_NAMES_UNIQUE).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  MAKE_LCAL_NAMES_UNIQUE).process(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  MAKE_LCAL_NAMES_UNIQUE	23	None	add
354	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  createDeclaredAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  createDeclaredAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root);    createDeclaredAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
355	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externs,  null);	  	compilable	  [FE]  RuntimeException  	16	13	add
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externs,  null);	  	compilable	  [FE]  RuntimeException  	16	13	add
357	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  externs,  null);  [CE]  cannot  find  symbol  arguments  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    Preconditions.checkState(arguments!=  null);  NodeTraversal.traverse(compiler,  externs,  null);	  	non-compiled	[CE]  cannot  find  symbol  arguments	16	None	add
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  externs,  null);  [CE]  cannot  find  symbol  arguments  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    Preconditions.checkState(arguments  ==  null);  NodeTraversal.traverse(compiler,  externs,  null);	  	non-compiled	[CE]  cannot  find  symbol  arguments	16	None	add
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  t.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  t  [FE]          RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  t.traverseRoots(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externs,  null);  t.traverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  t	16	None	add
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);.process(externs,  root);  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);.process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externs,  null);.process(externs,  root);	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
361	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  this);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  this);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    this);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  this,  arguments);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  this,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  this,  arguments);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    this);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  null);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  null);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    this);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root);  [CE]  cannot  find  symbol  converter  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(converter,  externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(converter,  externs,  root);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	102	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(externs,  root,  arguments);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	102	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root);  [CE]  cannot  find  symbol  externes  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  externes,  root);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  externes	102	None	replace
367	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(concreteMap,  externs,  root);  [CE]  cannot  find  symbol  concreteMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(concreteMap,  externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(concreteMap,  externs,  root);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  concreteMap	102	None	replace
368	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(this  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(this  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(this  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(this    }    	non-compiled	[CE]  not  a  statement	150	None	replace
369	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(this    }    	non-compiled	[CE]  not  a  statement	150	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(this    }    	non-compiled	[CE]  not  a  statement	150	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	123	None	replace
372	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externals).process(externs,  assertOnChange);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externals).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externals).process(externs,  assertOnChange);	  new    NodeConstantAnnotations(compiler,    root).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
373	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externes).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externes).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externes).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    root).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
374	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externes).process(root,  assertOnChange);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externes).process(root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externes).process(root,  assertOnChange);	  new    NodeConstantAnnotations(compiler,    root).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	57	None	add
376	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	57	None	add
377	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  ';'  expected	57	None	add
378	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	Preconditions.checkState(root!=    null);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	57	1	add
379	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	57	1	add
380	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	  	non-compiled	[CE]  not  a  statement	57	None	add
381	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	57	None	add
382	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)||  t.process(externs,  root);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)||  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange)||  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange)&&    t.process(externs,    externs);    	non-compiled	[CE]  not  a  statement	141	None	replace
383	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root)&&  t.process(externs,  assertOnChange);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root)&&  t.process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root)&&  t.process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange)&&    t.process(externs,    externs);    	non-compiled	[CE]  not  a  statement	141	None	replace
384	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  arguments)&&  t.process(externs,  externs);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  arguments)&&  t.process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  arguments)&&  t.process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange)&&    t.process(externs,    externs);    	non-compiled	[CE]  not  a  statement	141	None	replace
385	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,  externs,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	104	1	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	104	1	replace
387	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	104	1	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	104	1	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [CE]  cannot  find  symbol  nodeTraversal  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	104	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean)	78	None	replace
391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean)	78	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externals);  [CE]  cannot  find  symbol  externals  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externals);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externals);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol  externals	78	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root).process(externs,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)	78	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externes);  [CE]  cannot  find  symbol  externes  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externes);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externes);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol  externes	78	None	replace
395	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	103	1	add
396	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	103	1	add
397	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	103	None	add
398	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	103	None	add
399	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	103	None	add
400	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	103	None	add
401	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	103	None	add
402	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  root);  [CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  root);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE	24	None	replace
403	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  renamer);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	24	None	replace
404	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  arguments,  null);	  NodeTraversal.traverse(compiler,    externs,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	17	None	replace
405	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange,  checkUserDeclarations).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange,  checkUserDeclarations).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange,  checkUserDeclarations).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	46	None	replace
406	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	46	None	replace
407	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    externs,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	46	None	replace
408	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	46	None	replace
409	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  forbidChanges);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  forbidChanges);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclaration(),  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
410	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclaration(),  forbidChanges);  [CE]  cannot  find  symbol  externes  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclaration(),  forbidChanges);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externes,  new  DuplicateDeclaration(),  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  externes	108	None	replace
411	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  externs);	  NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	20	None	replace
412	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	20	None	replace
413	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	20	None	replace
414	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  arguments);	  NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	20	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  this);	  NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)	20	None	replace
416	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	add
417	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	add
418	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	add
419	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	add
420	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	68	None	add
421	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	68	None	add
422	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	68	None	add
423	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  Annotated:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    Annotated:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  ';'  expected	68	None	add
424	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  root,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(externs,  root,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	50	None	replace
425	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs.cloneTree()).process(externs,  root,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs.cloneTree()).process(externs,  root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs.cloneTree()).process(externs,  root,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	50	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(),  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(),  forbidChanges);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(),  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	114	None	replace
427	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs),  t.process(externs,  assertOnChange);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs),  t.process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs),  t.process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root),    t.process(externs,    assertOnChange);    	non-compiled	[CE]  ';'  expected	38	None	replace
428	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  t.process(externs,  assertOnChange);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  t.process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  t.process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root),    t.process(externs,    assertOnChange);    	non-compiled	[CE]  ')'  expected	38	None	replace
429	[BUG]  [BUGGY]  new  NormalizeConstantAnnotations(compiler,  externs),  t.process(externs,  assertOnChange);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NormalizeConstantAnnotations(compiler,  externs),  t.process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NormalizeConstantAnnotations(compiler,  externs),  t.process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root),    t.process(externs,    assertOnChange);    	non-compiled	[CE]  ';'  expected	38	None	replace
430	[BUG]  [BUGGY]  new  ProtogateConstantAnnotations(compiler,  externs),  t.process(externs,  assertOnChange);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  ProtogateConstantAnnotations(compiler,  externs),  t.process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  ProtogateConstantAnnotations(compiler,  externs),  t.process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root),    t.process(externs,    assertOnChange);    	non-compiled	[CE]  ';'  expected	38	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  root,  externs);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)	87	None	replace
432	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)	87	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  assertOnChange);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)	87	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  arguments);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  arguments);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	87	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize)	87	None	replace
436	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	74	None	replace
437	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	74	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	74	None	replace
439	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	57	None	add
440	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	57	None	add
441	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	57	None	add
442	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	  	non-compiled	[CE]  not  a  statement	57	None	add
443	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  NodeTraversal.traverse(compiler,  root,  this);  Preconditions.checkState(root!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	Preconditions.checkState(root!=    null);    NodeTraversal.traverse(compiler,  root,  this);  Preconditions.checkState(root!=  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	57	1	add
444	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  NodeTraversal.traverse(compiler,  root,  this);  Preconditions.checkState(root!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  NodeTraversal.traverse(compiler,  root,  this);  Preconditions.checkState(root!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    NodeTraversal.traverse(compiler,  root,  this);  Preconditions.checkState(root!=  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	57	1	add
445	[BUG]  [BUGGY]  new  ProtogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  ProtogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  ProtogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
446	[BUG]  [BUGGY]  new  NormalizeConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NormalizeConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NormalizeConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
447	[BUG]  [BUGGY]  t.traverseRoots(consumeMap,  externs,  root);  [CE]  cannot  find  symbol  consumeMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(consumeMap,  externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(consumeMap,  externs,  root);	  t.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  consumeMap	136	None	replace
448	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	117	None	replace
449	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
450	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  renamer).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  renamer).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  renamer).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
451	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	96	1	add
452	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	96	1	add
453	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer);	  	non-compiled	[CE]  cannot  find  symbol  renamer	96	None	add
454	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(null,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(null,  root);	  	compilable	  [FE]  RuntimeException  	96	13	add
455	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(null,  root);  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(null,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(null,  root);	  	compilable	  [FE]  RuntimeException  	96	13	add
456	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertonChange).process(externs,  root);  [CE]  cannot  find  symbol  assertonChange  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertonChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertonChange).process(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  assertonChange	96	None	add
457	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  RuntimeException  	16	13	add
458	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  RuntimeException  	16	13	add
459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange),.process(externs,  root);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange),.process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange),.process(externs,  root);	  	non-compiled	[CE]  ';'  expected	16	None	add
460	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externs,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,	  	non-compiled	[CE]  ')'  expected	16	None	add
461	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer,  checkUserDeclarations),  t.process(externs,  root);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer,  checkUserDeclarations),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer,  checkUserDeclarations),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	35	None	replace
462	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  [CE]  cannot  find  symbol  t  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(externs,  root,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(externs,  root,  null);	  t.traverseRoots(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  t	88	None	replace
463	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  root);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	18	None	replace
464	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	151	None	replace
465	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	151	None	replace
466	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  root).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  root).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  root).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    NodeConstantAnnotations(compiler,    root).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
467	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >=  not  a  statement  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >=  not  a  statement  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >=  not  a  statement	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	126	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	59	None	add
469	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations());  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations());	  	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	59	None	add
470	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	59	None	add
471	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	59	None	add
472	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	  	non-compiled	[CE]  not  a  statement	59	None	add
473	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  renamer);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	21	None	replace
474	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(root,  externs);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(root,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(root,  externs);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	21	None	replace
475	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  CONVERT_WHILE_TO_FOR).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    t).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
476	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  t).process(externs,  externs);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  t).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  t).process(externs,  externs);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    t).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
477	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  renamer  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	100	None	replace
478	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  root,  MAKE_WHILE_TO_FOR);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  root,  MAKE_WHILE_TO_FOR);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  root,  MAKE_WHILE_TO_FOR);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	100	None	replace
479	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  false,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	121	None	replace
480	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  junit);  [CE]  cannot  find  symbol  junit  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  junit);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  false,  junit);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  cannot  find  symbol  junit	121	None	replace
481	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Normalize)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  false,  this);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Normalize)	121	None	replace
482	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(externs,  root,  this);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	102	None	replace
483	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  renamer);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(externs,  root,  renamer);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	102	None	replace
484	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_LIST_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	42	None	replace
485	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_GLOBAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_GLOBAL_NAMES_UNIQUE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_GLOBAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_GLOBAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_GLOBAL_NAMES_UNIQUE	42	None	replace
486	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  junit,  this);  [CE]  cannot  find  symbol  junit  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  junit,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  junit,  this);	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  junit	1	None	replace
487	[BUG]  [BUGGY]  t.traverseRoots(consumeMap,  root);  [CE]  cannot  find  symbol  consumeMap  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(consumeMap,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(consumeMap,  root);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  cannot  find  symbol  consumeMap	90	None	replace
488	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  null);  [CE]  cannot  find  symbol  renamer  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  renamer,  null);	  NodeTraversal.traverse(compiler,    root,    null);    	non-compiled	[CE]  cannot  find  symbol  renamer	4	None	replace
489	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.DuplicateDeclarationHandler,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    forbidChanges);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.DuplicateDeclarationHandler,boolean)	114	None	replace
490	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	8	None	replace
491	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	8	None	replace
492	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    root,    arguments);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	6	1	replace
493	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    root,    arguments);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	6	1	replace
494	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	45	None	replace
495	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	45	None	replace
496	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	45	None	replace
497	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  renamer  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	45	None	replace
498	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	87	None	replace
499	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	87	None	replace
500	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler(root));  [CE]  cannot  find  symbol  externals  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler(root));  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externals,  new  DuplicateDeclarationHandler(root));	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(externs));    	non-compiled	[CE]  cannot  find  symbol  externals	85	None	replace
501	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	103	1	add
502	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	103	1	add
503	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	103	1	add
504	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	103	1	add
505	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	103	None	add
506	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mocketMap,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  mocketMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mocketMap,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(mocketMap,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    MAKE_LOCAL_NAMES_UNIQUE,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  mocketMap	47	None	replace
507	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  renamer	129	None	replace
508	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  renamer	129	None	replace
509	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange),  t.process(externs,  externs);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange),  t.process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange),  t.process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	36	None	replace
510	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	36	None	replace
511	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE),  t.process(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	36	None	replace
512	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root),  t.process(externs,  renamer);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root),  t.process(externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root),  t.process(externs,  renamer);	  new    PropogateConstantAnnotations(compiler,    renamer),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	110	None	replace
513	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  renamer);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  renamer	134	None	replace
514	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externes);  [CE]  cannot  find  symbol  externes  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externes);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externes);	  	non-compiled	[CE]  cannot  find  symbol  externes	75	None	add
515	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  interns);  [CE]  cannot  find  symbol  interns  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  interns);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  interns);	  	non-compiled	[CE]  cannot  find  symbol  interns	75	None	add
516	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(null,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(null,  externs);	  	compilable	  [FE]  RuntimeException  	75	13	add
517	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(null,  externs);  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(null,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(null,  externs);	  	compilable	  [FE]  RuntimeException  	75	13	add
518	[BUG]  [BUGGY]  Preconditions.checkState(annotations!=  null);  [CE]  cannot  find  symbol  annotations  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(annotations!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(annotations!=  null);	  Preconditions.checkState(args!=    null);    	non-compiled	[CE]  cannot  find  symbol  annotations	61	None	replace
519	[BUG]  [BUGGY]  node.traverseRoots(externs,  externs);  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  node.traverseRoots(externs,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	node.traverseRoots(externs,  externs);	  t.traverseRoots(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol  node	89	None	replace
520	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ';'  expected	39	None	replace
521	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  CONVERT_WHILE_TO_FOR),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  CONVERT_WHILE_TO_FOR),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  CONVERT_WHILE_TO_FOR),  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ';'  expected	39	None	replace
522	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	39	None	replace
523	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  t.process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ')'  expected	39	None	replace
524	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [CE]  cannot  find  symbol  renamer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  renamer,  externs);	  NodeTraversal.traverse(compiler,    renamer,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	138	None	replace
525	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root);  [CE]  cannot  find  symbol  t  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  t,  root);	  NodeTraversal.traverse(compiler,    renamer,    root);    	non-compiled	[CE]  cannot  find  symbol  t	138	None	replace
526	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  '('  or  '['  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	13	None	replace
527	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	13	None	replace
528	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  '('  or  '['  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	13	None	replace
529	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer,  assertOnChange);  [CE]  cannot  find  symbol  renamer  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  renamer	64	None	replace
530	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(null,  externs,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(null,  externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(null,  externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    assertOnChange);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	64	None	replace
531	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(converter,  externs,  assertOnChange);  [CE]  cannot  find  symbol  converter  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(converter,  externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(converter,  externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  converter	64	None	replace
532	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(mAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(mAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  assertOnChange).process(mAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    externs,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE	46	None	replace
533	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	124	None	replace
534	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    F()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	124	None	replace
535	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externs).process(externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externs).process(externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externs).process(externs,  renamer);	  new    NodeConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	29	None	replace
536	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  root).process(externs,  externs);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  root).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  root).process(externs,  externs);	  new    NodeConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
537	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	122	None	replace
538	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	122	None	replace
539	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	122	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(annotations  ==  null);  [CE]  cannot  find  symbol  annotations  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(annotations  ==  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(annotations  ==  null);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  cannot  find  symbol  annotations	56	None	replace
541	[BUG]  [BUGGY]  if(compiler!=  null)  {  new  PropogateConstantAnnotations(compiler,  compiler).process(externs,  root);  }  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  if(compiler!=  null)  {  new  PropogateConstantAnnotations(compiler,  compiler).process(externs,  root);  }  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	if(compiler!=  null)  {  new  PropogateConstantAnnotations(compiler,  compiler).process(externs,  root);  }	  new    PropogateConstantAnnotations(compiler,    compiler).process(externs,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	125	None	replace
542	[BUG]  [BUGGY]  if(compiler!=  null)  {  new  PropogateConstantAnnotations(compiler,  compiler).process(externs,  root);  }  else  {  NodeTraversal.traverse(compiler,  externs,  renamer);  }  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  if(compiler!=  null)  {  new  PropogateConstantAnnotations(compiler,  compiler).process(externs,  root);  }  else  {  NodeTraversal.traverse(compiler,  externs,  renamer);  }  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	if(compiler!=  null)  {  new  PropogateConstantAnnotations(compiler,  compiler).process(externs,  root);  }  else  {  NodeTraversal.traverse(compiler,  externs,  renamer);  }	  new    PropogateConstantAnnotations(compiler,    compiler).process(externs,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	125	None	replace
543	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  externals);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  externals);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  externals);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    this);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
544	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  false);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  false);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  false);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    this);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
545	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	106	None	replace
546	[BUG]  [BUGGY]  Traverse.traverse(compiler,  renamer,  this);  [CE]  cannot  find  symbol  renamer  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traverse.traverse(compiler,  renamer,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traverse.traverse(compiler,  renamer,  this);	  Traverse.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  renamer	5	None	replace
547	[BUG]  [BUGGY]  Traverse.traverse(compiler,  root,  t);  [CE]  cannot  find  symbol  t  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traverse.traverse(compiler,  root,  t);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traverse.traverse(compiler,  root,  t);	  Traverse.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  t	5	None	replace
548	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t);  [CE]  cannot  find  symbol  t  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  t);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  t	91	None	replace
549	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	71	None	replace
550	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	72	None	replace
551	[BUG]  [BUGGY]  Traversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traversal  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	10	None	replace
552	[BUG]  [BUGGY]  Traversed.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traversed  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traversed.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traversed.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversed	10	None	replace
553	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  true);  [CE]  cannot  find  symbol  renamer  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  true);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  true);	  NodeTraversal.traverse(compiler,    root,    renamer,    false);    	non-compiled	[CE]  cannot  find  symbol  renamer	120	None	replace
554	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externals).process(externs,  root,  assertOnChange);  [CE]  cannot  find  symbol  externals  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externals).process(externs,  root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externals).process(externs,  root,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  externals	50	None	replace
555	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  RuntimeException  	3	13	add
556	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  RuntimeException  	3	13	add
557	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);.process(externs,  root);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);.process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);.process(externs,  root);	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
558	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);.process(externs,  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);.process(externs,  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);.process(externs,	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
559	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  new  DuplicateDeclarationHandler());  [CE]  cannot  find  symbol  renamer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  renamer,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    root,    this,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  renamer	83	None	replace
560	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  new  DuplicateDeclarationHandler(),  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.DuplicateDeclarationHandler,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  new  DuplicateDeclarationHandler(),  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  new  DuplicateDeclarationHandler(),  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    this,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Normalize.DuplicateDeclarationHandler,boolean)	83	None	replace
561	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  new  DuplicateDeclarationHandler(),  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  new  DuplicateDeclarationHandler(),  forbidChanges);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  new  DuplicateDeclarationHandler(),  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    this,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	83	None	replace
562	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
563	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	non-compiled	[CE]  ')'  expected	104	None	replace
564	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  assertOnChange);  [CE]  cannot  find  symbol  renamer  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externals).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  renamer	65	None	replace
565	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_WHILE_TO_FOR);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_WHILE_TO_FOR);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(externs,  root,  MAKE_WHILE_TO_FOR);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	101	None	replace
566	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  converter	101	None	replace
567	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	9	1	add
568	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	9	1	add
569	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	9	None	add
570	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(renamer,  externs);  [CE]  cannot  find  symbol  renamer  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(renamer,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(renamer,  externs);	  new    PropogateConstantAnnotations(compiler,    externs).process(renamer,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	40	None	replace
571	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	93	None	replace
572	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(arguments,  assertOnChange);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(arguments,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer).process(arguments,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(arguments,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
573	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(arguments,  renamer);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(arguments,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(arguments,  renamer);	  new    PropogateConstantAnnotations(compiler,    externs).process(arguments,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
574	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer),  t.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer),  t.traverseRoots(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer),  t.traverseRoots(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	140	None	replace
575	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange),  t.traverseRoots(externs,  externs);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange),  t.traverseRoots(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange),  t.traverseRoots(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	140	None	replace
576	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs),  t.process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs),  t.process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs),  t.process(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	37	None	replace
577	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
578	[BUG]  [BUGGY]  new  ProtogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  ProtogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  ProtogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
579	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  root,  assertOnChange);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  root,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	131	None	replace
580	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  renamer,  assertOnChange);  [CE]  cannot  find  symbol  renamer  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  renamer,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  renamer,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  renamer	131	None	replace
581	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  assertOnChange,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  assertOnChange,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  assertOnChange,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	131	None	replace
582	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  root,  checkUserDeclarations).process(externs,  assertOnChange);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  root,  checkUserDeclarations).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  root,  checkUserDeclarations).process(externs,  assertOnChange);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
583	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  testUserDeclarations,  checkUserDeclarations).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  testUserDeclarations,  checkUserDeclarations).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  testUserDeclarations,  checkUserDeclarations).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
584	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.DuplicateDeclarationHandler,<null>)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  null);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.DuplicateDeclarationHandler,<null>)	113	None	replace
585	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.DuplicateDeclarationHandler,Normalize,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this,  assertOnChange);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.DuplicateDeclarationHandler,Normalize,boolean)	113	None	replace
586	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  [Delete]  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  [Delete]  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  [Delete]	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	15	None	replace
587	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  t  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(constantMap,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	137	None	replace
588	[BUG]  [BUGGY]  t.traverseRoots(null,  externs,  root);  [CE]  cannot  find  symbol  t  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(null,  externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(null,  externs,  root);	  t.traverseRoots(constantMap,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	137	None	replace
589	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  renamer).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  renamer).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  renamer).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    arguments).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
590	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  arguments).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  arguments).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  arguments).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    arguments).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
591	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    arguments);    	non-compiled	[CE]  cannot  find  symbol  renamer	130	None	replace
592	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  checkUserDeclarations);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  checkUserDeclarations);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  checkUserDeclarations);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
593	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  this);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChange,  this);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
594	[BUG]  [BUGGY]  .process(externs,  root);  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  .process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
595	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	127	None	replace
596	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	127	None	replace
597	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	127	None	replace
598	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations  [CE]  '('  or  '['  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    root,    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  '('  or  '['  expected	95	None	replace
599	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnno  [CE]  '('  or  '['  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnno  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  NodeTraversal.traverse(compiler,  root,  new  PropogateConstantAnno	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    root,    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  '('  or  '['  expected	95	None	replace
600	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  renamer);	  NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	20	None	replace
601	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t);  [CE]  cannot  find  symbol  t  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  t);	  NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	20	None	replace
602	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	68	None	add
603	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	68	None	add
604	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	  	non-compiled	[CE]  not  a  statement	68	None	add
605	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  renamer),  t.process(externs,  root);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  renamer),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  renamer),  t.process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	133	None	replace
606	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  root);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root);    	non-compiled	[CE]  not  a  statement	133	None	replace
607	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    externals).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
608	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  externs);  [CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(mAKE_LOCAL_NAMES_UNIQUE,  externs);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  mAKE_LOCAL_NAMES_UNIQUE	43	None	replace
609	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	43	None	replace
610	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
611	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  DuplicateDeclarationHandler());  [CE]  cannot  find  symbol  renamer  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  DuplicateDeclarationHandler());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  renamer,  new  DuplicateDeclarationHandler());	  NodeTraversal.traverse(compiler,    externes,    new    DuplicateDeclarationHandler());    	non-compiled	[CE]  cannot  find  symbol  renamer	86	None	replace
612	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [Delete]  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [Delete]  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [Delete]	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	105	None	replace
613	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(this    }    	non-compiled	[CE]  not  a  statement	150	None	replace
614	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LCAL_NAMES_UNIQUE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LCAL_NAMES_UNIQUE	48	None	replace
615	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    renamer,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	132	None	replace
616	[BUG]  [BUGGY]  Traversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traversal  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	69	None	replace
617	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	44	None	replace
618	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externals).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  cannot  find  symbol  externals  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externals).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externals).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  externals	44	None	replace
619	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs)&&  t.process(externs,  assertOnChange);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs)&&  t.process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs)&&  t.process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange)&&    t.process(externs,    externs);    	non-compiled	[CE]  not  a  statement	141	None	replace
620	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  Root);  [CE]  cannot  find  symbol  Root  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  Root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  Root);	  	non-compiled	[CE]  cannot  find  symbol  Root	23	None	add
621	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externals  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  false,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    false,    externs);    	non-compiled	[CE]  cannot  find  symbol  externals	55	None	replace
622	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  renamer,  assertOnChange);  [CE]  cannot  find  symbol  renamer  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  renamer,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  renamer,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  renamer	66	None	replace
623	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  renamer  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	62	None	replace
624	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  t);  [CE]  cannot  find  symbol  t  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  t);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  t);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  t	128	None	replace
625	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  t).process(arguments,  assertOnChange);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  t).process(arguments,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  t).process(arguments,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externs).process(arguments,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
626	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  '('  or  '['  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  '('  or  '['  expected	13	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkState(this.forbidChanges!=  null);  [CE]  cannot  find  symbol  forbidChanges  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(this.forbidChanges!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(this.forbidChanges!=  null);	  Preconditions.checkState(externs!=    null);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	60	None	replace
628	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  FORbidChanges);  [CE]  cannot  find  symbol  FORbidChanges  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  FORbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  FORbidChanges);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    arguments);    	non-compiled	[CE]  cannot  find  symbol  FORbidChanges	130	None	replace
629	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  FORBY_LIST);  [CE]  cannot  find  symbol  FORBY_LIST  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  FORBY_LIST);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  FORBY_LIST);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    MAKE_LOCAL_NAMES_UNIQUE,    arguments);    	non-compiled	[CE]  cannot  find  symbol  FORBY_LIST	130	None	replace
630	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange),  t.process(externs,  externs,  root);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange),  t.process(externs,  externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange),  t.process(externs,  externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    externs,    root);    	non-compiled	[CE]  ';'  expected	135	None	replace
631	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  FOREVER).process(externs,  root);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  FOREVER).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  FOREVER).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    arguments).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
632	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    arguments).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
633	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  internals);  [CE]  cannot  find  symbol  internals  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  internals);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  internals);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    interns);    	non-compiled	[CE]  cannot  find  symbol  internals	80	None	replace
634	[BUG]  [BUGGY]  t.traverseRoots(mocketMap,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  mocketMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(mocketMap,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(mocketMap,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  mocketMap	101	None	replace
635	[BUG]  [BUGGY]  t.traverseRoots(parent,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(parent,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(parent,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  parent	101	None	replace
636	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  null);  [CE]  cannot  find  symbol  roots  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  roots,  null);	  NodeTraversal.traverse(compiler,    externs,    null);    	non-compiled	[CE]  cannot  find  symbol  roots	17	None	replace
637	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  root);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    t).process(externs,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	25	None	replace
638	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  t);  [CE]  cannot  find  symbol  t  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false,  t);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  false,  t);	  NodeTraversal.traverse(compiler,    externs,    false);    	non-compiled	[CE]  cannot  find  symbol  t	52	None	replace
639	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(this  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(this  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(this  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(this    }    	non-compiled	[CE]  not  a  statement	150	None	replace
640	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  externs).process(externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  externs).process(externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  externs).process(externs,  renamer);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    externals).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	31	None	replace
641	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(null,  externs);  [CE]  cannot  find  symbol  renamer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(null,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer).process(null,  externs);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol  renamer	41	None	replace
642	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  NodeTraversal.traverse(compiler,  root,  new  PropogateConstants());  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  NodeTraversal.traverse(compiler,  root,  new  PropogateConstants());  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    NodeTraversal.traverse(compiler,  root,  new  PropogateConstants());	  	non-compiled	[CE]  cannot  find  symbol	59	None	add
643	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  Preconditions.checkState(externs!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	Preconditions.checkState(externs!=    null);    Preconditions.checkState(externs!=  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	59	1	add
644	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  Preconditions.checkState(externs!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  Preconditions.checkState(externs!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    Preconditions.checkState(externs!=  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	59	1	add
645	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	59	None	add
646	[BUG]  [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(externs!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(externs!=    null);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	59	None	add
647	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	117	None	replace
648	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	103	None	add
649	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }	  	non-compiled	[CE]  not  a  statement	103	None	add
650	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	103	None	add
651	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this	  	non-compiled	[CE]  not  a  statement	103	None	add
652	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  t);  [CE]  cannot  find  symbol  t  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  t);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  false,  t);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  cannot  find  symbol  t	121	None	replace
653	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  renamer  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  false,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    false,    renamer);    	non-compiled	[CE]  cannot  find  symbol  renamer	121	None	replace
654	[BUG]  [BUGGY]  Preconditions.checkState(anonChange!=  null);  [CE]  cannot  find  symbol  anonChange  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(anonChange!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(anonChange!=  null);	  Preconditions.checkState(args!=    null);    	non-compiled	[CE]  cannot  find  symbol  anonChange	61	None	replace
655	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange),  t.process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange),  t.process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange),  t.process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  ';'  expected	39	None	replace
656	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  not  a  statement	39	None	replace
657	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  false,  externs);  [CE]  cannot  find  symbol  renamer  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  false,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  false,  externs);	  NodeTraversal.traverse(compiler,    root,    false,    externs);    	non-compiled	[CE]  cannot  find  symbol  renamer	55	None	replace
658	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  compiler);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  root).process(externs,  compiler);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  root).process(externs,  compiler);	  new    PropogateConstantAnnotations(compiler,    compiler).process(externs,    root);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	125	None	replace
659	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  arguments).process(externs,  assertOnChange);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  arguments).process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  arguments).process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    externals).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	65	None	replace
660	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	9	None	add
661	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	9	None	add
662	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(this  }	  	non-compiled	[CE]  not  a  statement	9	None	add
663	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	106	None	replace
664	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	44	None	replace
665	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(compiler));  [CE]  constructor  DuplicateDeclarationHandler  in  class  Normalize.DuplicateDeclarationHandler  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(compiler));  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(compiler));	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(externs));    	non-compiled	[CE]  constructor  DuplicateDeclarationHandler  in  class  Normalize.DuplicateDeclarationHandler  cannot  be  applied  to  given  types;	85	None	replace
666	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(t));  [CE]  cannot  find  symbol  t  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(t));  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(t));	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(externs));    	non-compiled	[CE]  cannot  find  symbol  t	85	None	replace
667	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(this));  [CE]  constructor  DuplicateDeclarationHandler  in  class  Normalize.DuplicateDeclarationHandler  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(this));  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externs,  new  DuplicateDeclarationHandler(this));	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(externs));    	non-compiled	[CE]  constructor  DuplicateDeclarationHandler  in  class  Normalize.DuplicateDeclarationHandler  cannot  be  applied  to  given  types;	85	None	replace
668	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  ==  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    Expected:    function()    ==    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	74	None	replace
669	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  expr);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  expr);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  arguments,  expr);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    arguments);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
670	[BUG]  [BUGGY]  Preconditions.checkState(argumentMap  ==  null);  [CE]  cannot  find  symbol  argumentMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(argumentMap  ==  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(argumentMap  ==  null);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	56	None	replace
671	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root);  [CE]  cannot  find  symbol  externals  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverseRoots(compiler,  externals,  root);	  NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  externals	102	None	replace
672	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange),  t.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange),  t.traverseRoots(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange),  t.traverseRoots(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	133	None	replace
673	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  externs);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  externs);	  new    NodeConstantAnnotations(compiler,    assertOnChange),    t.process(externs,    root);    	non-compiled	[CE]  not  a  statement	133	None	replace
674	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer,  root);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  renamer,  root);	  new    PropogateConstantAnnotations(compiler,    externs).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	21	None	replace
675	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root,  null);  [CE]  cannot  find  symbol  t  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    t.traverseRoots(externs,  root,  null);	  	non-compiled	[CE]  cannot  find  symbol  t	3	None	add
676	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  nodeTraversal.traverse(compiler,  root,  null);  [CE]  cannot  find  symbol  nodeTraversal  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  nodeTraversal.traverse(compiler,  root,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    nodeTraversal.traverse(compiler,  root,  null);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	3	None	add
677	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(compiler,  root,  null);  [CE]  cannot  find  symbol  t  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(compiler,  root,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    t.traverseRoots(compiler,  root,  null);	  	non-compiled	[CE]  cannot  find  symbol  t	3	None	add
678	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  null);  [CE]  cannot  find  symbol  t  [FE]          RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    root,    null);    t.traverseRoots(externs,  null);	  	non-compiled	[CE]  cannot  find  symbol  t	3	None	add
679	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  TraverseTraversal.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	TraverseTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	10	None	replace
680	[BUG]  [BUGGY]  TraverseStructure.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  TraverseStructure  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  TraverseStructure.traverse(compiler,  root,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	TraverseStructure.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseStructure	10	None	replace
681	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:	          NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:    expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	145	None	replace
682	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES_UNIQUE).process(externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES_UNIQUE).process(externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  DEPRECATED_NAMES_UNIQUE).process(externs,  renamer);	  new    PropogateConstantAnnotations(compiler,    DEPRECATED_NAMES_UNIQUE).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	26	None	replace
683	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChanges);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChanges);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclaration(),  assertOnChanges);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclaration(),    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
684	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    externs,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	46	None	replace
685	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  renamer);	  new    PropogateConstantAnnotations(compiler,    externs,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	46	None	replace
686	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NeighborTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NeighborTraversal.traverse(compiler,  root,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    root,    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  ')'  expected	95	None	replace
687	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  externals,  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    root,    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  ')'  expected	95	None	replace
688	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  renamer  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	146	None	replace
689	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	TraverseTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	69	None	replace
690	[BUG]  [BUGGY]  Traversed.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traversed  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Traversed.traverse(compiler,  externs,  this);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Traversed.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversed	69	None	replace
691	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  arguments);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    Annotated:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  cannot  find  symbol  arguments	81	None	replace
692	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  renamer  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  renamer	62	None	replace
693	[BUG]  [BUGGY]  t.traverseRoots(converter,  externals);  [CE]  cannot  find  symbol  converter  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(converter,  externals);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(converter,  externals);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	90	None	replace
694	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	68	None	add
695	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	68	None	add
696	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	68	None	add
697	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	junit.framework.AssertionFailedError:  expected:  function  f()  ==  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    ==    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	149	None	replace
698	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this,  argument);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  new  DuplicateDeclarationHandler(),  this,  argument);	  NodeTraversal.traverse(compiler,    root,    new    DuplicateDeclarationHandler(),    this);    	non-compiled	[CE]  cannot  find  symbol  argument	113	None	replace
699	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  root,  assertOnChange,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  root,  assertOnChange,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  root,  assertOnChange,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	131	None	replace
700	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  constructor  PropogateConstantAnnotations  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	131	None	replace
701	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  nodeTraversal.traverse(compiler,  externs,  null);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  nodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    nodeTraversal.traverse(compiler,  externs,  null);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	16	None	add
702	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  t.traverseRoots(externs,  null);  [CE]  cannot  find  symbol  t  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  t.traverseRoots(externs,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    t.traverseRoots(externs,  null);	  	non-compiled	[CE]  cannot  find  symbol  t	16	None	add
703	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externes,  null);  [CE]  cannot  find  symbol  externes  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externes,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externes,  null);	  	non-compiled	[CE]  cannot  find  symbol  externes	16	None	add
704	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externals,  null);  [CE]  cannot  find  symbol  externals  [FE]          RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externals,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externals,  null);	  	non-compiled	[CE]  cannot  find  symbol  externals	16	None	add
705	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  t.traverse(compiler,  externs,  null);  [CE]  cannot  find  symbol  t  [FE]            RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  t.traverse(compiler,  externs,  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    t.traverse(compiler,  externs,  null);	  	non-compiled	[CE]  cannot  find  symbol  t	16	None	add
706	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer),  t.process(externs,  assertOnChange);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer),  t.process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer),  t.process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root),    t.process(externs,    assertOnChange);    	non-compiled	[CE]  ';'  expected	38	None	replace
707	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  t),  t.process(externs,  assertOnChange);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs,  t),  t.process(externs,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs,  t),  t.process(externs,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    root),    t.process(externs,    assertOnChange);    	non-compiled	[CE]  ';'  expected	38	None	replace
708	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  forbidChanges);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    this,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	92	None	replace
709	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  renamer).process(externs,  root,  assertOnChange);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  renamer).process(externs,  root,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  renamer).process(externs,  root,  assertOnChange);	  new    NodeConstantAnnotations(compiler,    root).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
710	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	8	None	replace
711	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.traverseRoots(externs,  externs);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.traverseRoots(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.traverseRoots(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange)&&    t.process(externs,    externs);    	non-compiled	[CE]  not  a  statement	141	None	replace
712	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  forbidChanges);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange)&&  t.process(externs,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    assertOnChange)&&    t.process(externs,    externs);    	non-compiled	[CE]  not  a  statement	141	None	replace
713	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer,  factory),  t.process(externs,  root);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer,  factory),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer,  factory),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    renamer),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	110	None	replace
714	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  t),  t.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  t),  t.traverseRoots(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  t),  t.traverseRoots(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    t).process(externs,    root);    	non-compiled	[CE]  ';'  expected	30	None	replace
715	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  t),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  t),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  t),  t.process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    t).process(externs,    root);    	non-compiled	[CE]  ';'  expected	30	None	replace
716	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  t).process(externs,  externs,  root);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  t).process(externs,  externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  t).process(externs,  externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    t).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
717	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  forbidChanges).process(externs,  root);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  forbidChanges).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  forbidChanges).process(externs,  root);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
718	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange,  checkUserDeclarations).process(externs,  renamer);	  new    NodeConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	27	None	replace
719	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externs);  [CE]  cannot  find  symbol  nodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  nodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	nodeTraversal.traverse(compiler,  assertOnChange).process(externs,  externs);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    NodeTraversal.traverse(compiler,    assertOnChange).process(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	78	None	replace
720	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE,  t.process(externs,  root));  [CE]  cannot  find  symbol  t  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE,  t.process(externs,  root));  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE,  t.process(externs,  root));	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	36	None	replace
721	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  t);  [CE]  cannot  find  symbol  t  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  t);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  t);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  t	48	None	replace
722	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	75	1	add
723	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	75	1	add
724	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  this  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  this  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  this  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	  	non-compiled	[CE]  not  a  statement	75	None	add
725	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);  [CE]  cannot  find  symbol  externals  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externals);	  	non-compiled	[CE]  cannot  find  symbol  externals	75	None	add
726	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  t,  checkUserDeclarations),  t.process(externs,  root);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  t,  checkUserDeclarations),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  t,  checkUserDeclarations),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	35	None	replace
727	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations),  t.process(externs,  root);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE,  checkUserDeclarations),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    assertOnChange,    checkUserDeclarations),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	35	None	replace
728	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(raf,  root);  [CE]  cannot  find  symbol  raf  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(raf,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(raf,  root);	  new    PropogateConstantAnnotations(compiler,    externs).process(renamer,    root);    	non-compiled	[CE]  cannot  find  symbol  raf	40	None	replace
729	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(raw,  root);  [CE]  cannot  find  symbol  raw  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(raw,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(raw,  root);	  new    PropogateConstantAnnotations(compiler,    externs).process(renamer,    root);    	non-compiled	[CE]  cannot  find  symbol  raw	40	None	replace
730	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  renamer,  assertOnChange);  [CE]  cannot  find  symbol  renamer  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  renamer,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  renamer,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  renamer	50	None	replace
731	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    assertOnChange);    	non-compiled	[CE]  method  process  in  class  PropogateConstantAnnotations  cannot  be  applied  to  given  types;	50	None	replace
732	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  assertOnChange,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  externs).process(externs,  assertOnChange,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  externs).process(externs,  assertOnChange,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    root).process(externs,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	66	None	replace
733	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	104	1	replace
734	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	104	1	replace
735	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	104	1	replace
736	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	NodeTraversal.traverse(compiler,  root,  this);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	104	1	replace
737	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  renamer,  this);  [CE]  cannot  find  symbol  renamer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  renamer,  this);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  renamer,  this);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  renamer	107	None	replace
738	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  this,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  this,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs,  this,  renamer);	  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  renamer	107	None	replace
739	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	96	1	add
740	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  externs);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	96	1	add
741	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  this  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  this  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  this  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);	  	non-compiled	[CE]  not  a  statement	96	None	add
742	[BUG]  [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    externs);    new  PropogateConstantAnnotations(compiler,  assertOnChange).process(externs,  root);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new        PropogateConstantAnnotations(compiler,        assertOnChange).process(externs,        externs);        new    PropogateConstantAnnotations(compiler,    assertOnChange).process(externs,    root);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	96	None	add
743	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  externals);  [CE]  cannot  find  symbol  converter  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(converter,  root,  externals);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(converter,  root,  externals);	  t.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	136	None	replace
744	[BUG]  [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  t);  [CE]  cannot  find  symbol  t  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  t);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  NodeConstantAnnotations(compiler,  assertOnChange).process(externs,  t);	  new    NodeConstantAnnotations(compiler,    assertOnChange).process(externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  t	116	None	replace
745	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  renamer);  [CE]  cannot  find  symbol  renamer  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  renamer);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE).process(externs,  externs,  renamer);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE).process(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  renamer	24	None	replace
746	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  t.traverseRoots(externs,  externs));  [CE]  cannot  find  symbol  t  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  t.traverseRoots(externs,  externs));  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  t.traverseRoots(externs,  externs));	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	140	None	replace
747	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  t.traverseRoots(externs,  root));  [CE]  cannot  find  symbol  t  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange,  t.traverseRoots(externs,  root));  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange,  t.traverseRoots(externs,  root));	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	140	None	replace
748	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange),  t.traverseRoots(externs,  externs,  forbidChanges);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  assertOnChange),  t.traverseRoots(externs,  externs,  forbidChanges);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  assertOnChange),  t.traverseRoots(externs,  externs,  forbidChanges);	  new    PropogateConstantAnnotations(compiler,    assertOnChange),    t.traverseRoots(externs,    root);    	non-compiled	[CE]  ';'  expected	140	None	replace
749	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  renamer).process(externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  new    PropogateConstantAnnotations(compiler,    renamer).process(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	100	None	replace
750	[BUG]  [BUGGY]  t.traverseRoots(root,  externs);  [CE]  cannot  find  symbol  t  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(root,  externs);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(root,  externs);	  t.traverseRoots(externs,    externs);    	non-compiled	[CE]  cannot  find  symbol  t	89	None	replace
751	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.traverseRoots(externs,  root);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.traverseRoots(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE),  t.traverseRoots(externs,  root);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	37	None	replace
752	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEFAULT_WHILE_TO_FOR),  t.process(externs,  root);  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  DEFAULT_WHILE_TO_FOR),  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  DEFAULT_WHILE_TO_FOR),  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ';'  expected	37	None	replace
753	[BUG]  [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  t.process(externs,  root);  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  t.process(externs,  root);  [BUGGY]      .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	new  PropogateConstantAnnotations(compiler,  MAKE_LOCAL_NAMES_UNIQUE,  t.process(externs,  root);	  new    PropogateConstantAnnotations(compiler,    MAKE_LOCAL_NAMES_UNIQUE),    t.process(externs,    root);    	non-compiled	[CE]  ')'  expected	37	None	replace
754	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  root);  [CE]  cannot  find  symbol  t  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(root,  externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(root,  externs,  root);	  t.traverseRoots(constantMap,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  t	137	None	replace
755	[BUG]  [BUGGY]  t.traverseRoots(parentMap,  externs,  root);  [CE]  cannot  find  symbol  parentMap  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  t.traverseRoots(parentMap,  externs,  root);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	t.traverseRoots(parentMap,  externs,  root);	  t.traverseRoots(constantMap,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  parentMap	137	None	replace
756	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  Preconditions.checkState(root!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	add	Preconditions.checkState(root!=    null);    Preconditions.checkState(root!=  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	57	1	add
757	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  Preconditions.checkState(root!=  null);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  Preconditions.checkState(root!=  null);  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    Preconditions.checkState(root!=  null);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	57	1	add
758	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	57	None	add
759	[BUG]  [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);  t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);      [BUGGY]  Preconditions.checkState(root!=  null);  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(  [BUGGY]      new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	95	96	1	replace	Preconditions.checkState(root!=    null);    junit.framework.AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	57	None	add
