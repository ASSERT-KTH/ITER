bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  c  =  node.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  c  =  node.getNext();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  node.getNext();	      Node    c    =    n.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
2	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);	      Context.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
3	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION,  arguments);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION,  arguments);	      Context.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
4	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);	      Context.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
5	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);	      Context.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  next,  this);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  this);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  arguments);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
9	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.traverse(compiler,  n,  this);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.traverse(compiler,  n,  this);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
11	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE));	      Context.reportCodeChange();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
12	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE));	      Context.reportCodeChange();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
13	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	      Context.reportCodeChange();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
14	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	      Context.reportCodeChange();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
15	[BUG]  [BUGGY]  Node  next  =  c.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  next  =  c.getLastChild();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  c.getLastChild();	      Node    next    =    c.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
16	[BUG]  [BUGGY]  Node  next  =  c.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  next  =  c.getFirstChild();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  c.getFirstChild();	      Node    next    =    c.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
17	[BUG]  [BUGGY]  Node  next  =  n.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  next  =  n.getNext();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  n.getNext();	      Node    next    =    c.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
18	[BUG]  [BUGGY]  Node  next  =  c.next();  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  next  =  c.next();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  c.next();	      Node    next    =    c.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
19	[BUG]  [BUGGY]  n  =  c.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  n  =  c.getFirstChild();  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  c.getFirstChild();	  n    =    c.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
20	[BUG]  [BUGGY]  n  =  next.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  n  =  next.getNext();  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  next.getNext();	  n    =    c.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
21	[BUG]  [BUGGY]  n  =  c.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  n  =  c.getLastChild();  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  c.getLastChild();	  n    =    c.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
22	[BUG]  [BUGGY]  n  =  c.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  n  =  c.getParent();  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  c.getParent();	  n    =    c.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
23	[BUG]  [BUGGY]  next  =  n.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  next  =  n.getLastChild();  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  n.getLastChild();	  next    =    c.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback());  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments);	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback());  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
28	[BUG]  [BUGGY]  Node  c  =  next.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  c  =  next.getLastChild();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  next.getLastChild();	      Node    c    =    next.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
29	[BUG]  [BUGGY]  Node  c  =  c.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  c  =  c.getFirstChild();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  c.getFirstChild();	      Node    c    =    next.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
30	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  n.getLastChild();	      Node    c    =    next.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
31	[BUG]  [BUGGY]  next  =  n.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  next  =  n.getFirstChild();  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  n.getFirstChild();	  next    =    c.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
32	[BUG]  [BUGGY]  c.removeChild(c);  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  c.removeChild(c);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c.removeChild(c);	      c.removeChild(n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
33	[BUG]  [BUGGY]  c.replaceChild(n,  next);  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  c.replaceChild(n,  next);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c.replaceChild(n,  next);	      c.removeChild(n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
34	[BUG]  [BUGGY]  Node  c  =  c.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  c  =  c.getNext();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  c.getNext();	      Node    c    =    next.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
35	[BUG]  [BUGGY]  next  =  n.next();  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  next  =  n.next();  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  n.next();	  next    =    c.next();    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
36	[BUG]  [BUGGY]  next  =  c.next()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  next  =  c.next()  +  1;  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  c.next()  +  1;	  next    =    c.next();    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
37	[BUG]  [BUGGY]  Node  c  =  node.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  c  =  node.getFirstChild();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  node.getFirstChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
38	[BUG]  [BUGGY]  next  =  n.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  next  =  n.getNext();  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  n.getNext();	  next    =    c.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
39	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE));	      Context.reportCodeChange();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
40	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	      Context.reportCodeChange();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
41	[BUG]  [BUGGY]  Context.report(JSError.make(n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.report(JSError.make(n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	      Context.reportCodeChange();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
42	[BUG]  [BUGGY]  Context.report(JSError.make(n,  c.getSourceName()));  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.report(JSError.make(n,  c.getSourceName()));  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(n,  c.getSourceName()));	      Context.reportCodeChange();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
43	[BUG]  [BUGGY]  next  =  c.nextToken();  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  next  =  c.nextToken();  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  c.nextToken();	  next    =    c.next();    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  next);  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  next);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  next);	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
45	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.hasChildren());	      Context.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  null);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  next);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  next);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  next);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argumentMap);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
49	[BUG]  [BUGGY]  c.replaceChild(n,  newVar);  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  c.replaceChild(n,  newVar);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c.replaceChild(n,  newVar);	      c.removeChild(n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
50	[BUG]  [BUGGY]  c.addChildToFront(n);  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  c.addChildToFront(n);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c.addChildToFront(n);	      c.removeChild(n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
51	[BUG]  [BUGGY]  Node  c  =  n.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  c  =  n.getParent();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  n.getParent();	      Node    c    =    n.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
52	[BUG]  [BUGGY]  next  =  c.removeFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  next  =  c.removeFirstChild();  [BUGGY]    if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  c.removeFirstChild();	  next    =    c.next();    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
53	[BUG]  [BUGGY]  Node  next  =  c.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  next  =  c.getParent();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  c.getParent();	      Node    next    =    c.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
54	[BUG]  [BUGGY]  n.removeChild(c);  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  n.removeChild(c);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n.removeChild(c);	      c.removeChild(n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
55	[BUG]  [BUGGY]  c.addChildToFront(c);  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  c.addChildToFront(c);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c.addChildToFront(c);	      c.removeChild(n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
57	[BUG]  [BUGGY]  Context.report(JSError.make(n,  c.getLineno(),  c.getCharno()));  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.report(JSError.make(n,  c.getLineno(),  c.getCharno()));  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(n,  c.getLineno(),  c.getCharno()));	      Context.reportCodeChange();    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
58	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CALL);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CALL);	      Context.checkState(c.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
59	[BUG]  [BUGGY]  Node  c  =  next.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {    [BUGGY]  Node  c  =  next.getParent();  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  next.getParent();	      Node    c    =    next.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
