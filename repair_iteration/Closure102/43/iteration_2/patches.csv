bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  c.replaceChild(n,  newVar,  c);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  c.replaceChild(n,  newVar,  c);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c.replaceChild(n,  newVar,  c);	  c.replaceChild(n,    newVar);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
2	[BUG]  [BUGGY]  c.replaceChild(n,  newVar,  next);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  c.replaceChild(n,  newVar,  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c.replaceChild(n,  newVar,  next);	  c.replaceChild(n,    newVar);    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
3	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.VAR);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.VAR);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
4	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.VAR);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.VAR);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
5	[BUG]  [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
6	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR,  arguments);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
7	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Node  next  =  n.getFirstChild();  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  n.getFirstChild();	  Node    next    =    c.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback(),  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    c,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback(),  next);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback(),  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback(),  next);	  NodeTraversal.traverse(compiler,    c,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
10	[BUG]  [BUGGY]  n  =  next.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  n  =  next.getParent();  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  next.getParent();	  n    =    c.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
11	[BUG]  [BUGGY]  Node  next  =  n.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Node  next  =  n.getLastChild();  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  n.getLastChild();	  Node    next    =    c.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
12	[BUG]  [BUGGY]  c.replaceChild(n,  c);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  c.replaceChild(n,  c);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c.replaceChild(n,  c);	  c.replaceChild(n,    next);    	non-compiled	[CE]  reached  end  of  file  while  parsing	33	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  n);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  n);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  n);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    next);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  c);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  c);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  c);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    next);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  c);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  c);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  c);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    next);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  next,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  next,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  next,  arguments);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    next);    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
17	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  c,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  c,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  c,  MAKE_LOCAL_NAMES_UNIQUE));	  Context.report(JSError.make(sourceName,    c,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
18	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  n,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(sourceName,    c,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
19	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  next,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  next,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  next,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(sourceName,    c,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
20	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE,  argument));  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE,  argument));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE,  argument));	  Context.report(JSError.make(sourceName,    c,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
21	[BUG]  [BUGGY]  c.addChildToFront(newVar);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  c.addChildToFront(newVar);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c.addChildToFront(newVar);	  c.addChildToFront(n);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
22	[BUG]  [BUGGY]  n.addChildToFront(c);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  n.addChildToFront(c);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n.addChildToFront(c);	  n.removeChild(c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    next,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  arguments,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  arguments,  new  ScopeTicklingCallback());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  arguments,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    next,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	24	None	replace
25	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION,  arguments,  next);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION,  arguments,  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION,  arguments,  next);	  Context.checkState(c.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
26	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.FUNCTION);	  Context.checkState(c.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
27	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION,  arguments,  c);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION,  arguments,  c);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION,  arguments,  c);	  Context.checkState(c.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
28	[BUG]  [BUGGY]  next  =  c.nextToken().getNext();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  next  =  c.nextToken().getNext();  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  c.nextToken().getNext();	  next    =    c.nextToken();    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
29	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.CALL);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.CALL);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.CALL);    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
30	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.CALL);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.CALL);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.CALL);    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
31	[BUG]  [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.CALL);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.CALL);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.CALL);    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
32	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CALL,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CALL,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.CALL,  arguments);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.CALL);    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
33	[BUG]  [BUGGY]  Node  c  =  node.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Node  c  =  node.getLastChild();  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  node.getLastChild();	  Node    c    =    next.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
34	[BUG]  [BUGGY]  Node  c  =  c.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Node  c  =  c.getLastChild();  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  c.getLastChild();	  Node    c    =    next.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
35	[BUG]  [BUGGY]  n  =  next.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  n  =  next.getFirstChild();  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  next.getFirstChild();	  n    =    next.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
36	[BUG]  [BUGGY]  n  =  next.getNext()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  n  =  next.getNext()  +  1;  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  next.getNext()  +  1;	  n    =    next.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
37	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  this,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.traverse(compiler,  n,  this,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.traverse(compiler,  n,  this,  arguments);	  Context.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
38	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.traverse(compiler,  n,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.traverse(compiler,  n,  arguments);	  Context.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
39	[BUG]  [BUGGY]  Context.traverse(compiler,  next,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.traverse(compiler,  next,  this);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.traverse(compiler,  next,  this);	  Context.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
40	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  this,  argument);  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.traverse(compiler,  n,  this,  argument);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.traverse(compiler,  n,  this,  argument);	  Context.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
41	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  next);  [CE]  reached  end  of  file  while  parsing  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.traverse(compiler,  n,  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.traverse(compiler,  n,  next);	  Context.traverse(compiler,    n,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  this);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  c,  this);	  NodeTraversal.traverse(compiler,    next,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  arguments);	  NodeTraversal.traverse(compiler,    next,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  this,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  this,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  this,  arguments);	  NodeTraversal.traverse(compiler,    next,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
45	[BUG]  [BUGGY]  next  =  next.next();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  next  =  next.next();  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  next.next();	  next    =    n.next();    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
46	[BUG]  [BUGGY]  Context.report(JSError.make(c,  next,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  next,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  next,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(c,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
47	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));	  Context.report(JSError.make(c,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
48	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n.getLineno(),  c.getCharno()));  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  n.getLineno(),  c.getCharno()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n.getLineno(),  c.getCharno()));	  Context.report(JSError.make(n,    c.getLineno(),    c.getCharno()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
49	[BUG]  [BUGGY]  Context.report(JSError.make(n,  c.getLineno(),  c.getCharno(),  next));  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(n,  c.getLineno(),  c.getCharno(),  next));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(n,  c.getLineno(),  c.getCharno(),  next));	  Context.report(JSError.make(n,    c.getLineno(),    c.getCharno()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
50	[BUG]  [BUGGY]  Context.report(JSError.make(Token.VAR,  c.getLineno(),  c.getCharno()));  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(Token.VAR,  c.getLineno(),  c.getCharno()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(Token.VAR,  c.getLineno(),  c.getCharno()));	  Context.report(JSError.make(n,    c.getLineno(),    c.getCharno()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
51	[BUG]  [BUGGY]  Context.report(JSError.make(Token.NAME,  c.getLineno(),  c.getCharno()));  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(Token.NAME,  c.getLineno(),  c.getCharno()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(Token.NAME,  c.getLineno(),  c.getCharno()));	  Context.report(JSError.make(n,    c.getLineno(),    c.getCharno()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
52	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  c.getLineno(),  c.getCharno()));  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  c.getLineno(),  c.getCharno()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  c.getLineno(),  c.getCharno()));	  Context.report(JSError.make(n,    c.getLineno(),    c.getCharno()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  this,  argument);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  this,  argument);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  this,  argument);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  next);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument,  next);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  expectedConst);  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument,  expectedConst);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    this,    argument);    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  this);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  new  ScopeTicklingCallback(),  this);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this,  arguments);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback(),  this);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  c,  new  ScopeTicklingCallback(),  this);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  ScopeTicklingCallback(),  this);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  new  ScopeTicklingCallback(),  this);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  null,  new  ScopeTicklingCallback(),  this);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	56	None	replace
60	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n.getSourceName()));  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  n.getSourceName()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n.getSourceName()));	  Context.report(JSError.make(n,    c.getSourceName()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
61	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  n.getSourceName()));  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  n.getSourceName()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  n.getSourceName()));	  Context.report(JSError.make(n,    c.getSourceName()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
62	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  c.getSourceName()));  [CE]  reached  end  of  file  while  parsing  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  c.getSourceName()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  c.getSourceName()));	  Context.report(JSError.make(n,    c.getSourceName()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
63	[BUG]  [BUGGY]  Context.report(JSError.make(Token.VAR,  c.getSourceName()));  [CE]  reached  end  of  file  while  parsing  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(Token.VAR,  c.getSourceName()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(Token.VAR,  c.getSourceName()));	  Context.report(JSError.make(n,    c.getSourceName()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
64	[BUG]  [BUGGY]  Context.report(JSError.make(n,  c.getLineno()));  [CE]  reached  end  of  file  while  parsing  [FE]                                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(n,  c.getLineno()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(n,  c.getLineno()));	  Context.report(JSError.make(n,    c.getSourceName()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
65	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  c,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  c,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  c,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(sourceName,    c,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
66	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  c,  arguments,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  c,  arguments,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  c,  arguments,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(sourceName,    c,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
67	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(sourceName,    c,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
68	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  c,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);	  Context.report(JSError.make(sourceName,    c,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  this,  argumentMap);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  this,  argumentMap);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  this,  argumentMap);	  NodeTraversal.traverse(compiler,    n,    this,    argumentMap);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  arguments);	  NodeTraversal.traverse(compiler,    n,    this,    argumentMap);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  next);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argumentMap,  next);	  NodeTraversal.traverse(compiler,    n,    this,    argumentMap);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
72	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  this,  argumentMap);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.traverse(compiler,  n,  this,  argumentMap);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.traverse(compiler,  n,  this,  argumentMap);	  NodeTraversal.traverse(compiler,    n,    this,    argumentMap);    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  next);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  next);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments,  new  ScopeTicklingCallback());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  arguments,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  expectedConst);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  expectedConst);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  arguments,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback(),    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
76	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.hasChildren());  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.hasChildren());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.hasChildren());	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.hasChildren());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
77	[BUG]  [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.hasChildren());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.hasChildren());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.hasChildren());	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.hasChildren());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
78	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.hasChildren());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
79	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.next().hasChildren());  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.next().hasChildren());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.next().hasChildren());	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.hasChildren());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
80	[BUG]  [BUGGY]  Node  next  =  n.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Node  next  =  n.getParent();  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  n.getParent();	  Node    next    =    c.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
81	[BUG]  [BUGGY]  c  =  n.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  c  =  n.getLastChild();  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c  =  n.getLastChild();	  next    =    n.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
82	[BUG]  [BUGGY]  Context.report(JSError.make(c,  next,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  next,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  next,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(c,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
83	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(c,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
84	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  next));  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  next));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  next));	  Context.report(JSError.make(c,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
85	[BUG]  [BUGGY]  c  =  next.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  c  =  next.getFirstChild();  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c  =  next.getFirstChild();	  next    =    n.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  null);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  c,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  c,  null);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  c,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
88	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.traverse(compiler,  n,  null);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
89	[BUG]  [BUGGY]  Node  next  =  n.next();  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Node  next  =  n.next();  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  n.next();	  Node    next    =    c.next();    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
90	[BUG]  [BUGGY]  Node  next  =  c.removeFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Node  next  =  c.removeFirstChild();  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  c.removeFirstChild();	  Node    next    =    c.next();    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  this,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  this,  new  ScopeTicklingCallback());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  this,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  new  ScopeTicklingCallback());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ScopeTicklingCallback(),  arguments);	  NodeTraversal.traverse(compiler,    n,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null,  new  ScopeTicklingCallback());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null,  new  ScopeTicklingCallback());	  NodeTraversal.traverse(compiler,    n,    this,    new    ScopeTicklingCallback());    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  next);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  next);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  expectedConst);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  expectedConst);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  expectedConst);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments,  null);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments,  null);	  NodeTraversal.traverse(compiler,    n,    this,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
98	[BUG]  [BUGGY]  n  =  c.removeFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  n  =  c.removeFirstChild();  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  c.removeFirstChild();	  next    =    c.removeFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  this,  n);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  this,  n);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  this,  n);	  NodeTraversal.traverse(compiler,    n,    this,    next);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  c);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  c);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  c);	  NodeTraversal.traverse(compiler,    n,    this,    next);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
101	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
102	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.EXPR_RESULT);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.EXPR_RESULT);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
103	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT,  arguments);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
104	[BUG]  [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
105	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.NAME);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  &&  c.getType()  ==  Token.NAME);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
106	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME,  arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.NAME,  arguments);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
107	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.NAME);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION  ||  c.getType()!=  Token.NAME);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
108	[BUG]  [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.checkState(c.getType()!=  Token.FUNCTION  ||  c.getType()  ==  Token.NAME);	  Context.checkState(c.getType()    ==    Token.FUNCTION    ||    c.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
109	[BUG]  [BUGGY]  next  =  c.getNext()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  next  =  c.getNext()  +  1;  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  c.getNext()  +  1;	  next    =    c.next()    +    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.arguments);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this.arguments);	  NodeTraversal.traverse(compiler,    n,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments,  next);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  arguments,  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  arguments,  next);	  NodeTraversal.traverse(compiler,    n,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  next);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  next);	  NodeTraversal.traverse(compiler,    n,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
113	[BUG]  [BUGGY]  Node  c  =  c.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Node  c  =  c.getParent();  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  c  =  c.getParent();	  Node    c    =    next.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
114	[BUG]  [BUGGY]  Context.report(JSError.make(c,  next,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  next,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  next,  MAKE_LOCAL_NAMES_UNIQUE));	  Context.report(JSError.make(c,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
115	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));	  Context.report(JSError.make(c,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
116	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  next));  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  next));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  next));	  Context.report(JSError.make(c,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
117	[BUG]  [BUGGY]  n  =  next.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  n  =  next.getLastChild();  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  next.getLastChild();	  n    =    c.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
118	[BUG]  [BUGGY]  Context.report(JSError.make(c,  next,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  next,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  next,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(c,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
119	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));	  Context.report(JSError.make(c,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
120	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  expectedConst));  [CE]  reached  end  of  file  while  parsing  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  expectedConst));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  expectedConst));	  Context.report(JSError.make(c,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
121	[BUG]  [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  next));  [CE]  reached  end  of  file  while  parsing  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  next));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  next));	  Context.report(JSError.make(c,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
122	[BUG]  [BUGGY]  Context.report(JSError.make(n,  c,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(n,  c,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(n,  c,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
123	[BUG]  [BUGGY]  Context.report(JSError.make(n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(n,  arguments,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
124	[BUG]  [BUGGY]  Context.report(JSError.make(n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
125	[BUG]  [BUGGY]  Context.report(JSError.make(c,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(c,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(c,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
126	[BUG]  [BUGGY]  Context.report(JSError.make(n,  c,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(n,  c,  arguments));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(n,  c,  arguments));	  Context.report(JSError.make(n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newVarDeclarations);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newVarDeclarations);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  newVarDeclarations);	  NodeTraversal.traverse(compiler,    n,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
128	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  c,  STRICT_MODULE_NAMES_UNIQUE,  arguments));  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  c,  STRICT_MODULE_NAMES_UNIQUE,  arguments));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  c,  STRICT_MODULE_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(sourceName,    c,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  next,  n);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  next,  n);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  next,  n);	  NodeTraversal.traverse(compiler,    next,    this);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  node);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  node);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  node);	  NodeTraversal.traverse(compiler,    n,    this,    next);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this,    next);    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
132	[BUG]  [BUGGY]  Next  =  c.next();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Next  =  c.next();  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Next  =  c.next();	  next    =    n.next();    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
133	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  n.getLineno(),  c.getCharno()));  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(sourceName,  n.getLineno(),  c.getCharno()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(sourceName,  n.getLineno(),  c.getCharno()));	  Context.report(JSError.make(n,    c.getLineno(),    c.getCharno()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
134	[BUG]  [BUGGY]  Context.report(JSError.make(name,  c.getLineno(),  c.getCharno()));  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(name,  c.getLineno(),  c.getCharno()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(name,  c.getLineno(),  c.getCharno()));	  Context.report(JSError.make(n,    c.getLineno(),    c.getCharno()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
135	[BUG]  [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(c),  n.getSourceName()));  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(SourceNameUtil.getSourceName(c),  n.getSourceName()));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(SourceNameUtil.getSourceName(c),  n.getSourceName()));	  Context.report(JSError.make(n,    c.getSourceName()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
136	[BUG]  [BUGGY]  Context.report(JSError.make(n,  c.getSourceName(),  NON_GLOBAL_NAMES_UNIQUE));  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Context.report(JSError.make(n,  c.getSourceName(),  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Context.report(JSError.make(n,  c.getSourceName(),  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(n,    c.getSourceName()));    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  next);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  next);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	NodeTraversal.traverse(compiler,  n,  null,  next);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
138	[BUG]  [BUGGY]  c.addChildToBack(n);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  c.addChildToBack(n);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	c.addChildToBack(n);	  c.addChildToFront(c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
139	[BUG]  [BUGGY]  n  =  c.getPrevious();  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  n  =  c.getPrevious();  [BUGGY]      if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  c.getPrevious();	  n    =    c.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
140	[BUG]  [BUGGY]  Node  next  =  c.nextToken();  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {      [BUGGY]  Node  next  =  c.nextToken();  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	Node  next  =  c.nextToken();	  Node    next    =    c.next();    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
