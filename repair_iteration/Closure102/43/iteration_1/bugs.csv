bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Node  c  =  next.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]    Node  c  =  next.getFirstChild();  [BUGGY]  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	    Node  c  =  next.getFirstChild();		non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
2	[BUG]  [BUGGY]    Node  c  =  next.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]    Node  c  =  next.getNext();  [BUGGY]  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	    Node  c  =  next.getNext();		non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
3	[BUG]  [BUGGY]    Node  c  =  n.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]    Node  c  =  n.getFirstChild();  [BUGGY]  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	    Node  c  =  n.getFirstChild();		non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
4	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  this);  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]    NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	    NodeTraversal.traverse(compiler,  n,  this);		non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
5	[BUG]  [BUGGY]    Node  next  =  c.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]    Node  next  =  c.getNext();  [BUGGY]  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	    Node  next  =  c.getNext();		non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
6	[BUG]  [BUGGY]    Context.reportCodeChange();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]    Context.reportCodeChange();  [BUGGY]  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	    Context.reportCodeChange();		non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
7	[BUG]  [BUGGY]  next  =  c.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]  next  =  c.getLastChild();  [BUGGY]  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  c.getLastChild();	next  =  c.getNext();  	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
8	[BUG]  [BUGGY]  next  =  c.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]  next  =  c.getFirstChild();  [BUGGY]  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  c.getFirstChild();	next  =  c.getNext();  	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
9	[BUG]  [BUGGY]  next  =  c.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]  next  =  c.getParent();  [BUGGY]  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  c.getParent();	next  =  c.getNext();  	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
10	[BUG]  [BUGGY]  n  =  c.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]  n  =  c.getNext();  [BUGGY]  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	n  =  c.getNext();	next  =  c.getNext();  	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
11	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());		non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
12	[BUG]  [BUGGY]    Node  c  =  n.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]    Node  c  =  n.getNext();  [BUGGY]  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	    Node  c  =  n.getNext();		non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
13	[BUG]  [BUGGY]  next  =  c.next();  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]  next  =  c.next();  [BUGGY]  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	next  =  c.next();	next  =  c.getNext();  	non-compiled	[CE]  reached  end  of  file  while  parsing	87	None	replace
14	[BUG]  [BUGGY]    c.removeChild(n);  [CE]  reached  end  of  file  while  parsing  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]    c.removeChild(n);  [BUGGY]  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	    c.removeChild(n);		non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
15	[BUG]  [BUGGY]    Context.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [CONTEXT]  private  void  splitVarDeclarations(Node  n)  {  for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  [BUGGY]    Context.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException( "Empty  VAR  node. ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  n.addChildBefore(newVar,  c);  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	356	356	1	replace	    Context.checkState(c.getType()  ==  Token.FUNCTION);		non-compiled	[CE]  reached  end  of  file  while  parsing	88	None	add
