4	[BUG]    [BUGGY]            NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,    root,    this);    [FE]    junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments    [FE]        junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments        [CONTEXT]        public    void    process(Node    externs,    Node    root)    {    NodeTraversal.traverse(compiler,    root,    this);    if    (MAKE_LOCAL_NAMES_UNIQUE)    {    MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique();    NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);        [BUGGY]            NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,    root,    this);    [BUGGY]        t.traverseRoots(externs,    root);    }    removeDuplicateDeclarations(root);    new    PropogateConstantAnnotations(compiler,    assertOnChange)    .process(externs,    root);    }    [CLASS]    Normalize    PropogateConstantAnnotations    VerifyConstants    DuplicateDeclarationHandler    ScopeTicklingCallback    [METHOD]    process    [RETURN_TYPE]    void    Node    externs    Node    root    [VARIABLES]    AbstractCompiler    compiler    MakeDeclaredNamesUnique    renamer    boolean    CONVERT_WHILE_TO_FOR    MAKE_LOCAL_NAMES_UNIQUE    assertOnChange    checkUserDeclarations    forbidChanges    Map    constantMap    NodeTraversal    t    Node    externs    root    	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,    root,    this);    	plausible		85	0
5	[BUG]    [BUGGY]            NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,    root,    this);    [FE]    junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments    [FE]        junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments        [CONTEXT]        public    void    process(Node    externs,    Node    root)    {    NodeTraversal.traverse(compiler,    root,    this);    if    (MAKE_LOCAL_NAMES_UNIQUE)    {    MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique();    NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);        [BUGGY]            NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,    root,    this);    [BUGGY]        t.traverseRoots(externs,    root);    }    removeDuplicateDeclarations(root);    new    PropogateConstantAnnotations(compiler,    assertOnChange)    .process(externs,    root);    }    [CLASS]    Normalize    PropogateConstantAnnotations    VerifyConstants    DuplicateDeclarationHandler    ScopeTicklingCallback    [METHOD]    process    [RETURN_TYPE]    void    Node    externs    Node    root    [VARIABLES]    AbstractCompiler    compiler    MakeDeclaredNamesUnique    renamer    boolean    CONVERT_WHILE_TO_FOR    MAKE_LOCAL_NAMES_UNIQUE    assertOnChange    checkUserDeclarations    forbidChanges    Map    constantMap    NodeTraversal    t    Node    externs    root    	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,    root,    this);    	plausible		85	0
100	[BUG]    [BUGGY]            NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,    externs,    this);    [FE]    junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments    [FE]                junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments        [CONTEXT]        public    void    process(Node    externs,    Node    root)    {    NodeTraversal.traverse(compiler,    root,    this);    if    (MAKE_LOCAL_NAMES_UNIQUE)    {    MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique();    NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);        [BUGGY]            NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,    externs,    this);    [BUGGY]        t.traverseRoots(externs,    root);    }    removeDuplicateDeclarations(root);    new    PropogateConstantAnnotations(compiler,    assertOnChange)    .process(externs,    root);    }    [CLASS]    Normalize    PropogateConstantAnnotations    VerifyConstants    DuplicateDeclarationHandler    ScopeTicklingCallback    [METHOD]    process    [RETURN_TYPE]    void    Node    externs    Node    root    [VARIABLES]    AbstractCompiler    compiler    MakeDeclaredNamesUnique    renamer    boolean    CONVERT_WHILE_TO_FOR    MAKE_LOCAL_NAMES_UNIQUE    assertOnChange    checkUserDeclarations    forbidChanges    Map    constantMap    NodeTraversal    t    Node    externs    root    	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,    externs,    this);    	plausible		46	0
101	[BUG]    [BUGGY]            NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,    externs,    this);    [FE]    junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments    [FE]                junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments        [CONTEXT]        public    void    process(Node    externs,    Node    root)    {    NodeTraversal.traverse(compiler,    root,    this);    if    (MAKE_LOCAL_NAMES_UNIQUE)    {    MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique();    NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);        [BUGGY]            NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,    externs,    this);    [BUGGY]        t.traverseRoots(externs,    root);    }    removeDuplicateDeclarations(root);    new    PropogateConstantAnnotations(compiler,    assertOnChange)    .process(externs,    root);    }    [CLASS]    Normalize    PropogateConstantAnnotations    VerifyConstants    DuplicateDeclarationHandler    ScopeTicklingCallback    [METHOD]    process    [RETURN_TYPE]    void    Node    externs    Node    root    [VARIABLES]    AbstractCompiler    compiler    MakeDeclaredNamesUnique    renamer    boolean    CONVERT_WHILE_TO_FOR    MAKE_LOCAL_NAMES_UNIQUE    assertOnChange    checkUserDeclarations    forbidChanges    Map    constantMap    NodeTraversal    t    Node    externs    root    	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,    externs,    this);    	plausible		46	0
105	[BUG]    [BUGGY]            NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    [FE]    junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments    [FE]        junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments        [CONTEXT]        public    void    process(Node    externs,    Node    root)    {    NodeTraversal.traverse(compiler,    root,    this);    if    (MAKE_LOCAL_NAMES_UNIQUE)    {    MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique();    NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);        [BUGGY]            NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    [BUGGY]        t.traverseRoots(externs,    root);    }    removeDuplicateDeclarations(root);    new    PropogateConstantAnnotations(compiler,    assertOnChange)    .process(externs,    root);    }    [CLASS]    Normalize    PropogateConstantAnnotations    VerifyConstants    DuplicateDeclarationHandler    ScopeTicklingCallback    [METHOD]    process    [RETURN_TYPE]    void    Node    externs    Node    root    [VARIABLES]    AbstractCompiler    compiler    MakeDeclaredNamesUnique    renamer    boolean    CONVERT_WHILE_TO_FOR    MAKE_LOCAL_NAMES_UNIQUE    assertOnChange    checkUserDeclarations    forbidChanges    Map    constantMap    NodeTraversal    t    Node    externs    root    	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	plausible		12	0
152	[BUG]    [BUGGY]            NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    [FE]    junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments    [FE]        junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments        [CONTEXT]        public    void    process(Node    externs,    Node    root)    {    NodeTraversal.traverse(compiler,    root,    this);    if    (MAKE_LOCAL_NAMES_UNIQUE)    {    MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique();    NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);        [BUGGY]            NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    [BUGGY]        t.traverseRoots(externs,    root);    }    removeDuplicateDeclarations(root);    new    PropogateConstantAnnotations(compiler,    assertOnChange)    .process(externs,    root);    }    [CLASS]    Normalize    PropogateConstantAnnotations    VerifyConstants    DuplicateDeclarationHandler    ScopeTicklingCallback    [METHOD]    process    [RETURN_TYPE]    void    Node    externs    Node    root    [VARIABLES]    AbstractCompiler    compiler    MakeDeclaredNamesUnique    renamer    boolean    CONVERT_WHILE_TO_FOR    MAKE_LOCAL_NAMES_UNIQUE    assertOnChange    checkUserDeclarations    forbidChanges    Map    constantMap    NodeTraversal    t    Node    externs    root    	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	plausible		43	0
521	[BUG]    [BUGGY]            t.traverseRoots(externs,    root);    t.traverseRoots(externs,    root);    [FE]    junit.framework.AssertionFailedError:    Expected:    var    FOO=true    [FE]        junit.framework.AssertionFailedError:    Expected:    var    FOO=true        [CONTEXT]        public    void    process(Node    externs,    Node    root)    {    NodeTraversal.traverse(compiler,    root,    this);    if    (MAKE_LOCAL_NAMES_UNIQUE)    {    MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique();    NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);        [BUGGY]            t.traverseRoots(externs,    root);    t.traverseRoots(externs,    root);    [BUGGY]        t.traverseRoots(externs,    root);    }    removeDuplicateDeclarations(root);    new    PropogateConstantAnnotations(compiler,    assertOnChange)    .process(externs,    root);    }    [CLASS]    Normalize    PropogateConstantAnnotations    VerifyConstants    DuplicateDeclarationHandler    ScopeTicklingCallback    [METHOD]    process    [RETURN_TYPE]    void    Node    externs    Node    root    [VARIABLES]    AbstractCompiler    compiler    MakeDeclaredNamesUnique    renamer    boolean    CONVERT_WHILE_TO_FOR    MAKE_LOCAL_NAMES_UNIQUE    assertOnChange    checkUserDeclarations    forbidChanges    Map    constantMap    NodeTraversal    t    Node    externs    root    	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(externs.getType()  ==  Token.EXPR_RESULT)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    t.traverseRoots(externs,    root);    	plausible		2	0
