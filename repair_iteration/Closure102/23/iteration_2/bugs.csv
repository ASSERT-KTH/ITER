bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	        t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	6	10	add
2	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	6	10	add
3	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  NodeTraversal.traverseRoots(externs,  root);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  NodeTraversal.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    NodeTraversal.traverseRoots(externs,  root);	  	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	6	None	add
4	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  n.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  n  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  n.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    n.traverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  n	6	None	add
5	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  t.traverseRoots(extras,  root);  [CE]  cannot  find  symbol  extras  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  t.traverseRoots(extras,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    t.traverseRoots(extras,  root);	  	non-compiled	[CE]  cannot  find  symbol  extras	6	None	add
6	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  t.traverseRoots(extrs,  root);  [CE]  cannot  find  symbol  extrs  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  t.traverseRoots(extrs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    t.traverseRoots(extrs,  root);	  	non-compiled	[CE]  cannot  find  symbol  extrs	6	None	add
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,  externs,  null);	      NodeTraversal.traverse(compiler,    externs,    this);    	compilable	  [FE]  RuntimeException  	5	13	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  null);	      NodeTraversal.traverse(compiler,    externs,    this);    	compilable	  [FE]  RuntimeException  	5	13	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  arguments);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  arguments);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	5	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,NodeTraversal)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  t);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,NodeTraversal)	5	None	replace
11	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	1	1	add
12	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	1	1	add
13	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	1	None	add
14	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	  	non-compiled	[CE]  not  a  statement	1	None	add
15	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  	non-compiled	[CE]  not  a  statement	1	None	add
16	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==	  	non-compiled	[CE]  not  a  statement	1	None	add
17	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=	  	non-compiled	[CE]  not  a  statement	1	None	add
18	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	13	None	replace
19	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)	13	None	replace
20	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	13	None	replace
21	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  converter	13	None	replace
22	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean)	13	None	replace
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,  root,  null);	      NodeTraversal.traverse(compiler,    root,    this);    	compilable	  [FE]  RuntimeException  	2	13	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  null);	      NodeTraversal.traverse(compiler,    root,    this);    	compilable	  [FE]  RuntimeException  	2	13	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  false);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  false);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	2	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  arguments);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  arguments);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	2	None	replace
27	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	14	None	replace
28	[BUG]  [BUGGY]  t.traverseRoots(compiler,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  root);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  root);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)	14	None	replace
29	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs);  [CE]  cannot  find  symbol  converter  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	14	None	replace
30	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  arguments);  [CE]  cannot  find  symbol  converter  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  arguments);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  root,  arguments);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	14	None	replace
31	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  root);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root);	  t.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)	17	None	replace
32	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  externs);  [CE]  cannot  find  symbol  converter  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  root,  externs);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  root,  externs);	  t.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	17	None	replace
33	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	17	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  root);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	3	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	3	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  arguments);	      NodeTraversal.traverse(compiler,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	3	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer);  [CE]  cannot  find  symbol  roots  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  roots,  renamer);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  cannot  find  symbol  roots	16	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  [CE]  cannot  find  symbol  externes  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externes,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externes,  renamer);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  cannot  find  symbol  externes	16	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  renamer,  externs);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Node)	16	None	replace
40	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(constantMap,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)	18	None	replace
41	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs,  constantMap);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,  externs,  constantMap);	  t.traverseRoots(constantMap,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  constantMap	18	None	replace
42	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	4	1	add
43	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	4	1	add
44	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	4	None	add
45	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	        NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	4	1	add
46	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	4	1	add
47	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	4	10	add
48	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	4	10	add
49	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	  	non-compiled	[CE]  not  a  statement	4	None	add
50	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	  	non-compiled	[CE]  not  a  statement	4	None	add
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,NodeTraversal)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,NodeTraversal)	8	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean)	8	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  arguments);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  arguments);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  cannot  find  symbol  arguments	8	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NodeTraversal)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  t);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NodeTraversal)	15	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  externs);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	15	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,NodeTraversal)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  t);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,NodeTraversal)	15	None	replace
57	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  false);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  false);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  false);	  t.traverseRoots(externs,    root,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)	12	None	replace
58	[BUG]  [BUGGY]  t.traverseDeclarations(externs,  root);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseDeclarations(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseDeclarations(externs,  root);	      t.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
59	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	t.traverseRoots(root,  externs);	      t.traverseRoots(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	7	1	replace
60	[BUG]  [BUGGY]  t.traverseRoots(root,  externs);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(root,  externs);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,  externs);	      t.traverseRoots(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	7	1	replace
61	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  this,  arguments);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  arguments);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	10	None	replace
62	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  this);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  this);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)	10	None	replace
63	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  this,  argument);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  argument);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	10	None	replace
64	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,boolean)	10	None	replace
65	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  assertOnChange);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,boolean)	10	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)	9	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)	9	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  arguments);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  arguments);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	9	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)	9	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  this);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)	9	None	replace
71	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  arguments);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  assertOnChange,  arguments);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	11	None	replace
72	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  assertOnChange);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)	11	None	replace
73	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  arguments,  assertOnChange);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  arguments,  assertOnChange);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  arguments,  assertOnChange);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	11	None	replace
74	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  argument);  [CE]  cannot  find  symbol  argument  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  argument);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  assertOnChange,  argument);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  argument	11	None	replace
75	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  this,  renamer);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  renamer);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,MakeDeclaredNamesUnique)	10	None	replace
76	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  null);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	t.traverseRoots(externs,  root,  null);	  t.traverseRoots(externs,    root,    this);    	compilable	  [FE]  RuntimeException  	10	13	replace
77	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  null);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  null);	  t.traverseRoots(externs,    root,    this);    	compilable	  [FE]  RuntimeException  	10	13	replace
78	[BUG]  [BUGGY]  t.traverseRoots(constantMap,  root);  [CE]  cannot  find  symbol  constantMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(constantMap,  root);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(constantMap,  root);	  t.traverseRoots(converter,    root);    	non-compiled	[CE]  cannot  find  symbol  constantMap	14	None	replace
79	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  forbidChanges);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  assertOnChange,  forbidChanges);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	11	None	replace
80	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  checkUserDeclarations);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  assertOnChange,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	11	None	replace
81	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean)	13	None	replace
82	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean)	13	None	replace
83	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argumentMap);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argumentMap);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	13	None	replace
84	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	        NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	1	1	add
85	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	1	1	add
86	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    t.traverseRoots(externs,  root,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	1	None	add
87	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  Annotated.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Annotated  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  Annotated.traverse(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    Annotated.traverse(compiler,  root,  this);	  	non-compiled	[CE]  cannot  find  symbol  Annotated	1	None	add
88	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  Context.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Context  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  Context.traverse(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    Context.traverse(compiler,  root,  this);	  	non-compiled	[CE]  cannot  find  symbol  Context	1	None	add
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  renamer);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	2	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Normalize)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  renamer,  this);	      NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Normalize)	2	None	replace
91	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  node.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  node  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  node.traverseRoots(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    node.traverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  node	6	None	add
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  renamer);  [CE]  cannot  find  symbol  Root  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  Root,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  Root,  renamer);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Root	16	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  renamer,  root);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,Node)	16	None	replace
94	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique());  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique());	  t.traverseRoots(externs,    root,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique)	12	None	replace
95	[BUG]  [BUGGY]  t.traverseNodeDeclarations(externs,  root);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseNodeDeclarations(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseNodeDeclarations(externs,  root);	      t.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  renamer);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	5	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  renamer);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,MakeDeclaredNamesUnique)	8	None	replace
98	[BUG]  [BUGGY]  MutableMap.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  MutableMap  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  MutableMap.traverseRoots(externs,  root);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	MutableMap.traverseRoots(externs,  root);	  t.traverseRoots(constantMap,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  MutableMap	18	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  t);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,NodeTraversal)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  t);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,NodeTraversal)	9	None	replace
100	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Normalize)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Normalize)	4	None	add
101	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);  [CE]  cannot  find  symbol  node  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);	  	non-compiled	[CE]  cannot  find  symbol  node	4	None	add
102	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  renamer.replaceChild(externs,  root);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  renamer.replaceChild(externs,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  renamer.replaceChild(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
103	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  renamer);  [CE]  cannot  find  symbol  converter  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  renamer);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  renamer);	  t.traverseRoots(converter,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	17	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)	9	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root);  [CE]  cannot  find  symbol  externals  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externals,  root);	      NodeTraversal.traverseRoots(compiler,    root);    	non-compiled	[CE]  cannot  find  symbol  externals	9	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  t,  root);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  t,  root);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Node)	8	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,Normalize)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  this);	      NodeTraversal.traverse(compiler,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,Normalize)	8	None	replace
108	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  this);  [CE]  cannot  find  symbol  converter  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  this);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  this);	  t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  converter	10	None	replace
109	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	13	None	replace
110	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    nodeTraversal.traverse(compiler,  root,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	1	None	add
111	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  t.traverseNode(compiler,  root,  this);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  t.traverseNode(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    t.traverseNode(compiler,  root,  this);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
112	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  Context.reportCodeChange();  [CE]  cannot  find  symbol  Context  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  root,  this);  Context.reportCodeChange();  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    root,    this);    Context.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  Context	1	None	add
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  renamer);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  t,  renamer);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,MakeDeclaredNamesUnique)	15	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE);	      NodeTraversal.traverse(compiler,    externs,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean)	15	None	replace
115	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  t.traverseRoots(externs,  root);  }  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  t.traverseRoots(externs,  root);  }  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  t.traverseRoots(externs,  root);  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
116	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	        t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	6	10	add
117	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	6	10	add
118	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  removeDuplicateDeclarations(root);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  removeDuplicateDeclarations(root);  }  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  removeDuplicateDeclarations(root);  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
119	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  return;  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  return;  }  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  return;  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
120	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	        t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	6	10	add
121	[BUG]  [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	6	10	add
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,NodeTraversal)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  t);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  renamer,  t);	      NodeTraversal.traverse(compiler,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,NodeTraversal)	16	None	replace
123	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  renamer);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  renamer);	  t.traverseRoots(constantMap,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique)	18	None	replace
124	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  externs);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	t.traverseRoots(externs,  root,  externs);	  t.traverseRoots(constantMap,    externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	18	1	replace
125	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  externs);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  externs);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  externs);	  t.traverseRoots(constantMap,    externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	18	1	replace
126	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  TraverseConstants  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  TraverseConstants.traverse(compiler,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  root,  this);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	5	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  this);  [CE]  cannot  find  symbol  roots  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  NodeTraversal.traverse(compiler,  roots,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  roots,  this);	      NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  roots	5	None	replace
128	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,  root,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	4	None	add
129	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    nodeTraversal.traverse(compiler,  externs,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	4	None	add
130	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  t.traverseNodeDeclarations(externs,  this);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]      NodeTraversal.traverse(compiler,  externs,  this);  t.traverseNodeDeclarations(externs,  this);  [BUGGY]    t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseNodeDeclarations(externs,  this);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
131	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LIST_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	12	None	replace
132	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  renamer,  assertOnChange);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean)	11	None	replace
133	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  assertOnChange);  [CE]  cannot  find  symbol  converter  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);    [BUGGY]  t.traverseRoots(converter,  externs,  root,  assertOnChange);  [BUGGY]    }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  root,  assertOnChange);	  t.traverseRoots(externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  converter	11	None	replace
