bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	34	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  arguments);	  NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	34	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  this);	  NodeTraversal.traverse(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize)	34	None	replace
4	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traverse  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	85	None	replace
5	[BUG]  [BUGGY]  Traversed.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traversed  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traversed.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traversed.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversed	85	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  t);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,NodeTraversal)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  t);	  NodeTraversal.traverseRoots(compiler,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,NodeTraversal)	99	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,NodeTraversal)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t);	  NodeTraversal.traverseRoots(compiler,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,NodeTraversal)	99	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,NodeTraversal,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,NodeTraversal,boolean)	99	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  t);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,NodeTraversal)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  t);	  NodeTraversal.traverseRoots(compiler,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,NodeTraversal)	99	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,Normalize)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  t,  this);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,Normalize)	107	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,NodeTraversal,Normalize)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t,  this);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,NodeTraversal,Normalize)	107	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Normalize)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  this);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Normalize)	107	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean,Normalize)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  this);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean,Normalize)	107	None	replace
14	[BUG]  [BUGGY]  t.traverseRoots(constantMap,  externs);  [CE]  cannot  find  symbol  constantMap  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(constantMap,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(constantMap,  externs);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  cannot  find  symbol  constantMap	60	None	replace
15	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)	31	None	replace
16	[BUG]  [BUGGY]  t.traverseRoots(compiler,  root,  externs);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  root,  externs);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  root,  externs);	  t.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)	31	None	replace
17	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  root,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  arguments);	  t.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	31	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  this);  [CE]  cannot  find  symbol  externals  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externals,  this);	  NodeTraversal.traverse(compiler,    roots,    this);    	non-compiled	[CE]  cannot  find  symbol  externals	127	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externes,  this);  [CE]  cannot  find  symbol  externes  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externes,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externes,  this);	  NodeTraversal.traverse(compiler,    roots,    this);    	non-compiled	[CE]  cannot  find  symbol  externes	127	None	replace
20	[BUG]  [BUGGY]  t.traverseRoots(root,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  constantMap);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,  constantMap);	  t.traverseRoots(constantMap,    root);    	non-compiled	[CE]  cannot  find  symbol  constantMap	78	None	replace
21	[BUG]  [BUGGY]  t.traverseRoots(arguments,  root);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(arguments,  root);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(arguments,  root);	  t.traverseRoots(constantMap,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	78	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  arguments);  t.traverseRoots(externs,  this);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  arguments);  t.traverseRoots(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  arguments);  t.traverseRoots(externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	100	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Normalize)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Normalize)	100	None	replace
24	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  externs,  this,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  externs,  this,  arguments);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	100	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    roots,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,boolean)	37	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  [CE]  cannot  find  symbol  externals  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externals,  renamer);	  NodeTraversal.traverse(compiler,    roots,    renamer);    	non-compiled	[CE]  cannot  find  symbol  externals	37	None	replace
27	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs);	  t.traverseRoots(converter,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)	29	None	replace
28	[BUG]  [BUGGY]  t.traverseRoots(externs,  converter);  [CE]  cannot  find  symbol  converter  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  converter);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  converter);	  t.traverseRoots(converter,    externs);    	non-compiled	[CE]  cannot  find  symbol  converter	29	None	replace
29	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  assertOnChange,  arguments);	  t.traverseRoots(externs,    root,    this,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	65	None	replace
30	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  checkUserDeclarations,  assertOnChange);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  checkUserDeclarations,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  checkUserDeclarations,  assertOnChange);	  t.traverseRoots(externs,    root,    this,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	65	None	replace
31	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  this,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  this,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  this,  assertOnChange);	  t.traverseRoots(externs,    root,    this,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean)	65	None	replace
32	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,boolean,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  t.traverseRoots(externs,    root,    this,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,boolean,boolean)	65	None	replace
33	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange,  argument);  [CE]  cannot  find  symbol  argument  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange,  argument);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  assertOnChange,  argument);	  t.traverseRoots(externs,    root,    this,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  argument	65	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,NodeTraversal)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  t);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,NodeTraversal)	51	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE,    t);    	non-compiled	[CE]  cannot  find  symbol  arguments	51	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	51	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  t);  [CE]  cannot  find  symbol  arguments  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  t);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE,    t);    	non-compiled	[CE]  cannot  find  symbol  arguments	51	None	replace
38	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  cannot  find  symbol  converter  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  t.traverseRoots(converter,    externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  converter	133	None	replace
39	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  cannot  find  symbol  converter  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  t.traverseRoots(converter,    externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  converter	133	None	replace
40	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  externs);  t.traverseRoots(root,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	t.traverseRoots(root,    externs);    t.traverseRoots(root,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	59	10	add
41	[BUG]  [BUGGY]  t.traverseRoots(root,  externs);  t.traverseRoots(root,  externs);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  externs);  t.traverseRoots(root,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,    externs);    t.traverseRoots(root,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	59	10	add
42	[BUG]  [BUGGY]  t.traverseRoots(root,  externs);  NodeTraversal.traverseRoots(root,  externs);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  externs);  NodeTraversal.traverseRoots(root,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,    externs);    NodeTraversal.traverseRoots(root,  externs);	  	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	59	None	add
43	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  externs);  t.traverseRoots(externs,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	t.traverseRoots(root,    externs);    t.traverseRoots(externs,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	59	10	add
44	[BUG]  [BUGGY]  t.traverseRoots(root,  externs);  t.traverseRoots(externs,  externs);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  externs);  t.traverseRoots(externs,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,    externs);    t.traverseRoots(externs,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	59	10	add
45	[BUG]  [BUGGY]  t.traverseRoots(root,  externs);  t.traverseRoots(root,  externals);  [CE]  cannot  find  symbol  externals  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  externs);  t.traverseRoots(root,  externals);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,    externs);    t.traverseRoots(root,  externals);	  	non-compiled	[CE]  cannot  find  symbol  externals	59	None	add
46	[BUG]  [BUGGY]  t.traverseRoots(root,  externs);  n.traverseRoots(root,  externs);  [CE]  cannot  find  symbol  n  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  externs);  n.traverseRoots(root,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,    externs);    n.traverseRoots(root,  externs);	  	non-compiled	[CE]  cannot  find  symbol  n	59	None	add
47	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  cannot  find  symbol  Context  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Context.reportCodeChange();  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Context.reportCodeChange();	          NodeTraversal.traverse(compiler,    root,    this);    Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  Context	112	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Context.reportCodeChange();  [CE]  cannot  find  symbol  Context  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Context.reportCodeChange();  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  Context.reportCodeChange();	          NodeTraversal.traverse(compiler,    root,    this);    Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  Context	112	None	replace
49	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  this);  [CE]  cannot  find  symbol  converter  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  root,  this);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  root,  this);	  t.traverseRoots(converter,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  converter	108	None	replace
50	[BUG]  [BUGGY]  t.traverseRoots(constantMap,  externs,  this);  [CE]  cannot  find  symbol  constantMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(constantMap,  externs,  this);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(constantMap,  externs,  this);	  t.traverseRoots(converter,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  constantMap	108	None	replace
51	[BUG]  [BUGGY]  t.traverseRoots(constantMap,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  constantMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(constantMap,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(constantMap,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  constantMap	33	None	replace
52	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  converter  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  t.traverseRoots(converter,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  converter	33	None	replace
53	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    assertOnChange,    checkUserDeclarations);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean)	80	None	replace
54	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  FORBY_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  FORBY_LOCAL_NAMES_UNIQUE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  FORBY_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  assertOnChange,  FORBY_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    assertOnChange,    checkUserDeclarations);    	non-compiled	[CE]  cannot  find  symbol  FORBY_LOCAL_NAMES_UNIQUE	80	None	replace
55	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  FORBIND_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  FORBIND_LOCAL_NAMES_UNIQUE  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  FORBIND_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  assertOnChange,  FORBIND_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    assertOnChange,    checkUserDeclarations);    	non-compiled	[CE]  cannot  find  symbol  FORBIND_LOCAL_NAMES_UNIQUE	80	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	35	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	35	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	35	None	replace
59	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,boolean,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  t.traverseRoots(externs,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,boolean,MakeDeclaredNamesUnique)	75	None	replace
60	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,MakeDeclaredNamesUnique,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,MakeDeclaredNamesUnique,boolean)	75	None	replace
61	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  this,  renamer);  [CE]  cannot  find  symbol  converter  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  root,  this,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  root,  this,  renamer);	  t.traverseRoots(externs,    root,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  converter	75	None	replace
62	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  this,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  this,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  this,  renamer);	  t.traverseRoots(externs,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	75	None	replace
63	[BUG]  [BUGGY]  t.traverseRoots(compiler,  root,  this,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  root,  this,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  root,  this,  renamer);	  t.traverseRoots(externs,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	75	None	replace
64	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	121	1	replace
65	[BUG]  [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	121	1	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	121	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)	121	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)	121	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean,MakeDeclaredNamesUnique)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    root,    t,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean,MakeDeclaredNamesUnique)	97	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    t,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	97	None	replace
71	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	1	10	add
72	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	1	10	add
73	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  NodeTraversal.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  NodeTraversal.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        t.traverseRoots(externs,    root);    NodeTraversal.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);	  	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	1	None	add
74	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  n.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  n  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  n.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        t.traverseRoots(externs,    root);    n.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  n	1	None	add
75	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  Root);  t.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  Root  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  Root);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        t.traverseRoots(externs,    root);    t.traverseRoots(externs,  Root);  t.traverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  Root	1	None	add
76	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(extras,  root);  t.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  extras  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(extras,  root);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        t.traverseRoots(externs,    root);    t.traverseRoots(extras,  root);  t.traverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  extras	1	None	add
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    t,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	52	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer,  this);  [CE]  cannot  find  symbol  roots  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  roots,  renamer,  this);	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  roots	90	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  this);	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Normalize)	90	None	replace
80	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	11	1	add
81	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	11	1	add
82	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	11	1	add
83	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	11	1	add
84	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	11	None	add
85	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  nodeTraversal.traverse(compiler,  root,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	11	None	add
86	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	11	None	add
87	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique)	123	None	replace
88	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean)	123	None	replace
89	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  renamer);  [CE]  cannot  find  symbol  converter  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  root,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  root,  renamer);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  converter	123	None	replace
90	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  renamer);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)	123	None	replace
91	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR);	  t.traverseRoots(externs,    root,    MAKE_LIST_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)	131	None	replace
92	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  checkUserDeclarations,  assertOnChange);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  checkUserDeclarations,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  checkUserDeclarations,  assertOnChange);	  t.traverseRoots(externs,    root,    arguments,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	73	None	replace
93	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  externs);  t.traverseRoots(externs,  root,  externs);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	t.traverseRoots(externs,    root,    externs);    t.traverseRoots(externs,  root,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	124	10	add
94	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  externs);  t.traverseRoots(externs,  root,  externs);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  externs);  t.traverseRoots(externs,  root,  externs);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    externs);    t.traverseRoots(externs,  root,  externs);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	124	10	add
95	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  externs);  NodeTraversal.traverseRoots(externs,  root,  externs);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  externs);  NodeTraversal.traverseRoots(externs,  root,  externs);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    externs);    NodeTraversal.traverseRoots(externs,  root,  externs);	  	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	124	None	add
96	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  externs);  t.traverseRoots(externs,  root,  externals);  [CE]  cannot  find  symbol  externals  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  externs);  t.traverseRoots(externs,  root,  externals);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    externs);    t.traverseRoots(externs,  root,  externals);	  	non-compiled	[CE]  cannot  find  symbol  externals	124	None	add
97	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  externs);  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  externs);  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    externs);    function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  ';'  expected	124	None	add
98	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  externs);  t.traverseRoots(externs,  root,  externes);  [CE]  cannot  find  symbol  externes  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  externs);  t.traverseRoots(externs,  root,  externes);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    externs);    t.traverseRoots(externs,  root,  externes);	  	non-compiled	[CE]  cannot  find  symbol  externes	124	None	add
99	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  externs);  .traverseRoots(externs,  root,  externs);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  externs);  .traverseRoots(externs,  root,  externs);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    externs);    .traverseRoots(externs,  root,  externs);	  	non-compiled	[CE]  illegal  start  of  expression	124	None	add
100	[BUG]  [BUGGY]  Traverse.traverse(compiler,  root,  this);  t.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traverse  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  root,  this);  t.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  root,  this);  t.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	46	None	replace
101	[BUG]  [BUGGY]  t.traverseRoots(compiler,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  root,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  root,  arguments);	  t.traverseRoots(converter,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  arguments	30	None	replace
102	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  arguments);  [CE]  cannot  find  symbol  converter  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  arguments);	  t.traverseRoots(converter,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  converter	30	None	replace
103	[BUG]  [BUGGY]  t.traverseRoots(constantMap,  root,  arguments);  [CE]  cannot  find  symbol  constantMap  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(constantMap,  root,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(constantMap,  root,  arguments);	  t.traverseRoots(converter,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  constantMap	30	None	replace
104	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,Normalize)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  this);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  assertOnChange,  this);	  t.traverseRoots(externs,    root,    assertOnChange,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,Normalize)	71	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	12	None	replace
106	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traverse  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	12	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	44	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	44	None	replace
109	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	44	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	44	None	replace
111	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    argument);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean)	20	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  arguments);  t.traverseRoots(externs,  root,  this);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  arguments);  t.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  arguments);  t.traverseRoots(externs,  root,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	128	None	replace
113	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this,  renamer);  [CE]  cannot  find  symbol  Traverse  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  externs,  this,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  externs,  this,  renamer);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	128	None	replace
114	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	86	None	replace
115	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [CE]  cannot  find  symbol  Traverse  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	86	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Annotated  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Annotated.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  Annotated.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    Annotated.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Annotated	87	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments);  Annotated.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments);  Annotated.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  arguments);  Annotated.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    Annotated.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	87	None	replace
118	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  converter	81	None	replace
119	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,boolean)	81	None	replace
120	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  t.traverseRoots(externs,    root,    CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	81	None	replace
121	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  arguments,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  arguments,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  arguments,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	81	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(externs,  root);	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    NodeTraversal.traverseDeclarations(compiler,    assertOnChange);    return;    }    	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	119	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs);	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    NodeTraversal.traverseDeclarations(compiler,    assertOnChange);    return;    }    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)	119	None	replace
124	[BUG]  [BUGGY]  TraverseConstants.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  TraverseConstants  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverseRoots(externs,  root);	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    NodeTraversal.traverseDeclarations(compiler,    assertOnChange);    return;    }    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	119	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  renamer.replaceChild(externs,  root);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  renamer.replaceChild(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  renamer.replaceChild(externs,  root);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    renamer.replaceChild(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
126	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traverse  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    renamer.replaceChild(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  Traverse	102	None	replace
127	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traverse  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    renamer.replaceChild(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  Traverse	102	None	replace
128	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  arguments);	  t.traverseRoots(externs,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  arguments	94	None	replace
129	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  new  MakeDeclaredNamesUnique());	  t.traverseRoots(externs,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)	94	None	replace
130	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean)	94	None	replace
131	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,MakeDeclaredNamesUnique)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  new  MakeDeclaredNamesUnique());  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  new  MakeDeclaredNamesUnique());	  t.traverseRoots(externs,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,MakeDeclaredNamesUnique)	94	None	replace
132	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  new  MakeDeclaredNamesUnique());  [CE]  cannot  find  symbol  converter  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  new  MakeDeclaredNamesUnique());  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  new  MakeDeclaredNamesUnique());	  t.traverseRoots(externs,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  cannot  find  symbol  converter	94	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)	70	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  arguments);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	70	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean)	70	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	50	None	replace
137	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	50	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  ';'  expected	50	None	replace
139	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  context);  [CE]  cannot  find  symbol  context  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  context);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  context);	  t.traverseRoots(converter,    root,    externs);    	non-compiled	[CE]  cannot  find  symbol  context	32	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    externs,    t,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	114	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    t,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	114	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    externs,    t,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	114	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  NodeTraversal.traverse(compiler,    externs,    t,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	114	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  t,  root);	  NodeTraversal.traverse(compiler,    t,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,Node)	106	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  null);  [CE]  cannot  find  symbol  externals  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externals,  null);	  NodeTraversal.traverse(compiler,    root,    null);    	non-compiled	[CE]  cannot  find  symbol  externals	24	None	replace
146	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	function()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  ';'  expected	15	None	replace
147	[BUG]  [BUGGY]  n.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  n  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  n.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	n.traverseRoots(externs,  root);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  cannot  find  symbol  n	15	None	replace
148	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	junit.framework.AssertionFailedError:  Expected:  var  FOO=true	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
149	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  var  FOO=false  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  var  FOO=false  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	junit.framework.AssertionFailedError:  Expected:  var  FOO=false	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
150	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  var  FOO=true  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  AssertionFailedError:  Expected:  var  FOO=true  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	AssertionFailedError:  Expected:  var  FOO=true	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
151	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  var  FOO=false  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  AssertionFailedError:  Expected:  var  FOO=false  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	AssertionFailedError:  Expected:  var  FOO=false	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
152	[BUG]  [BUGGY]  Traversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traversal  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	43	None	replace
153	[BUG]  [BUGGY]  Traverse.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traverse  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	43	None	replace
154	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  constantMap);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  constantMap);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  constantMap	83	None	replace
155	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    argumentMap);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	83	None	replace
156	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments!=    	non-compiled	[CE]  ';'  expected	17	None	replace
157	[BUG]  [BUGGY]  &&  arguments!=  Array.prototype.slice.call(arguments  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  &&  arguments!=  Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	&&  arguments!=  Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments!=    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
158	[BUG]  [BUGGY]  &&  arguments  ==  Array.prototype.slice.call(arguments  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  &&  arguments  ==  Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	&&  arguments  ==  Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments!=    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    renamer,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	56	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  externs);	  NodeTraversal.traverse(compiler,    externs,    renamer,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)	56	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,NodeTraversal)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  t);	  NodeTraversal.traverse(compiler,    externs,    renamer,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,NodeTraversal)	56	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  renamer);	  NodeTraversal.traverse(compiler,    externs,    renamer,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)	56	None	replace
163	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR,  arguments);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  cannot  find  symbol  arguments	82	None	replace
164	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,boolean)	82	None	replace
165	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  cannot  find  symbol  converter  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  cannot  find  symbol  converter	82	None	replace
166	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [CE]  cannot  find  symbol  arguments  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  cannot  find  symbol  arguments	82	None	replace
167	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  CONVERT_WHILE_TO_FOR);  [CE]  cannot  find  symbol  arguments  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  CONVERT_WHILE_TO_FOR);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  CONVERT_WHILE_TO_FOR);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  cannot  find  symbol  arguments	82	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)	67	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverseRoots(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
170	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	67	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externes  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externes,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  externes	67	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externals  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  externals	67	None	replace
173	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	13	None	replace
174	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	13	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	13	None	replace
176	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [Delete]  t.traverseRoots(externs,  root);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [Delete]  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [Delete]  t.traverseRoots(externs,  root);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	13	None	replace
177	[BUG]  [BUGGY]  t.traverseDeclarations(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseDeclarations(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseDeclarations(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
178	[BUG]  [BUGGY]  t.traverseDeclarations(externs,  root,  assertOnChange);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseDeclarations(externs,  root,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseDeclarations(externs,  root,  assertOnChange);	  t.traverseDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
179	[BUG]  [BUGGY]  t.traverseDeclarations(externs,  root,  this);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseDeclarations(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseDeclarations(externs,  root,  this);	  t.traverseDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
180	[BUG]  [BUGGY]  t.traverseDeclarations(converter,  externs,  root);  [CE]  cannot  find  symbol  converter  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseDeclarations(converter,  externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseDeclarations(converter,  externs,  root);	  t.traverseDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	58	None	replace
181	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  nodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	nodeTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    nodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	129	None	replace
182	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseTraversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    nodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	129	None	replace
183	[BUG]  [BUGGY]  Traversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traversal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traversal.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    nodeTraversal.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	129	None	replace
184	[BUG]  [BUGGY]  NodeUtil.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeUtil.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeUtil.traverseRoots(externs,  root);	          t.traverseRoots(externs,    root);    n.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
185	[BUG]  [BUGGY]  node.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  node.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	node.traverseRoots(externs,  root);	          t.traverseRoots(externs,    root);    n.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  node	4	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer,  externs);  [CE]  cannot  find  symbol  roots  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  renamer,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  roots,  renamer,  externs);	  NodeTraversal.traverse(compiler,    renamer,    externs);    	non-compiled	[CE]  cannot  find  symbol  roots	39	None	replace
187	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	45	1	add
188	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	45	1	add
189	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	45	1	add
190	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	45	1	add
191	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externals,  this);  [CE]  cannot  find  symbol  externals  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externals,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externals,  this);	  	non-compiled	[CE]  cannot  find  symbol  externals	45	None	add
192	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	45	1	add
193	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	45	1	add
194	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	45	None	add
195	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externes,  this);  [CE]  cannot  find  symbol  externes  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externes,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externes,  this);	  	non-compiled	[CE]  cannot  find  symbol  externes	45	None	add
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  root);	  NodeTraversal.traverse(compiler,    renamer,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)	93	None	replace
197	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	47	10	add
198	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	47	10	add
199	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	47	10	add
200	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	47	10	add
201	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	47	10	add
202	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	47	10	add
203	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externals,  this);  [CE]  cannot  find  symbol  externals  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externals,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externals,  this);	  	non-compiled	[CE]  cannot  find  symbol  externals	47	None	add
204	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(externs,  root);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(externs,  root);	  	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	47	None	add
205	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	47	10	add
206	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	47	10	add
207	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  constantMap);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  constantMap);	  t.traverseRoots(externs,    root,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  constantMap	61	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);  [CE]  cannot  find  symbol  node  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    node    =    new    NodeTraversal(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  node	101	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    node    =    new    NodeTraversal(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  node	101	None	replace
210	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externals,  this);  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externals,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externals,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    node    =    new    NodeTraversal(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  node	101	None	replace
211	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  t,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NodeTraversal,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  t,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  externs,  t,  renamer);	  NodeTraversal.traverse(compiler,    externs,    t,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NodeTraversal,MakeDeclaredNamesUnique)	113	None	replace
212	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    externs,    t,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean,MakeDeclaredNamesUnique)	113	None	replace
213	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  externs,  renamer);	  NodeTraversal.traverse(compiler,    externs,    t,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)	113	None	replace
214	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  renamer);  [CE]  cannot  find  symbol  converter  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  root,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  root,  renamer);	  t.traverseRoots(converter,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  converter	103	None	replace
215	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	14	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	14	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	14	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments,  null);  [CE]  cannot  find  symbol  arguments  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  arguments,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  arguments,  null);	  NodeTraversal.traverse(compiler,    externs,    null);    	non-compiled	[CE]  cannot  find  symbol  arguments	8	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  null);  [CE]  cannot  find  symbol  roots  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  roots,  null);	  NodeTraversal.traverse(compiler,    externs,    null);    	non-compiled	[CE]  cannot  find  symbol  roots	8	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)	89	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)	89	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  renamer,  arguments);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	89	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	89	None	replace
224	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  root,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	t.traverseRoots(externs,    root,    null);    t.traverseRoots(externs,  root,  null);	  	compilable	  [FE]  RuntimeException  	76	13	add
225	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  root,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  root,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    t.traverseRoots(externs,  root,  null);	  	compilable	  [FE]  RuntimeException  	76	13	add
226	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  NodeTraversal.traverseRoots(externs,  root,  null);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  NodeTraversal.traverseRoots(externs,  root,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    NodeTraversal.traverseRoots(externs,  root,  null);	  	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	76	None	add
227	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  NodeUtil.traverseRoots(externs,  root,  null);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  NodeUtil.traverseRoots(externs,  root,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    NodeUtil.traverseRoots(externs,  root,  null);	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
228	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  root,  null).process(externs,  root);  [CE]  void  cannot  be  dereferenced  [FE]          RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  root,  null).process(externs,  root);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    t.traverseRoots(externs,  root,  null).process(externs,  root);	  	non-compiled	[CE]  void  cannot  be  dereferenced	76	None	add
229	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  node.traverseRoots(externs,  root,  null);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  node.traverseRoots(externs,  root,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    node.traverseRoots(externs,  root,  null);	  	non-compiled	[CE]  cannot  find  symbol  node	76	None	add
230	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
231	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
232	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs  ==  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs  ==  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
233	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs  ==  null)  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs  ==  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs  ==  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
234	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  externs);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  externs);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  externs);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)	120	None	add
235	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  junit.framework.AssertionFailedError:  Expected:  var  FOO=false  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  junit.framework.AssertionFailedError:  Expected:  var  FOO=false  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    junit.framework.AssertionFailedError:  Expected:  var  FOO=false	  	non-compiled	[CE]  not  a  statement	120	None	add
236	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
237	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
238	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseDeclarations(externs,  root);  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseDeclarations(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseDeclarations(externs,  root);  }	  	non-compiled	[CE]  cannot  find  symbol	120	None	add
239	[BUG]  [BUGGY]  t.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)	27	None	replace
240	[BUG]  [BUGGY]  t.traverseRoots(converter,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  converter	27	None	replace
241	[BUG]  [BUGGY]  t.traverseRoots(constantMap,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  constantMap  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(constantMap,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(constantMap,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  constantMap	27	None	replace
242	[BUG]  [BUGGY]  t.traverseNodeDeclarations(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseNodeDeclarations(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseNodeDeclarations(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseNodeDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
243	[BUG]  [BUGGY]  t.traverseNodeDeclarations(externs,  root,  assertOnChange);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseNodeDeclarations(externs,  root,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseNodeDeclarations(externs,  root,  assertOnChange);	  t.traverseNodeDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
244	[BUG]  [BUGGY]  t.traverseNodeDeclarations(externs,  root,  this);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseNodeDeclarations(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseNodeDeclarations(externs,  root,  this);	  t.traverseNodeDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
245	[BUG]  [BUGGY]  t.traverseNodeDeclarations(externs,  root,  false);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseNodeDeclarations(externs,  root,  false);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseNodeDeclarations(externs,  root,  false);	  t.traverseNodeDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	69	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  renamer);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)	69	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	69	None	replace
249	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  true);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  true);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  true);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)	57	None	replace
250	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  arguments,  false);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  arguments,  false);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	57	None	replace
251	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  false);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  false);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  false);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean)	57	None	replace
252	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  false,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  false,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  false,  arguments);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	57	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)	96	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,MakeDeclaredNamesUnique)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  this,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  this,  renamer);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,MakeDeclaredNamesUnique)	96	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,MakeDeclaredNamesUnique)	96	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  renamer,  arguments);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	96	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  t.traverseNodeDeclarations(externs,  this);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  t.traverseNodeDeclarations(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  t.traverseNodeDeclarations(externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseNodeDeclarations(externs,    this);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
258	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this);  t.traverseNodeDeclarations(externs,  this);  [CE]  cannot  find  symbol  Traverse  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  externs,  this);  t.traverseNodeDeclarations(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  externs,  this);  t.traverseNodeDeclarations(externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseNodeDeclarations(externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	130	None	replace
259	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  arguments);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	22	None	replace
260	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  forbidChanges);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  forbidChanges);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	22	None	replace
261	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  cannot  find  symbol  arguments  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	22	None	replace
262	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  argument);  [CE]  cannot  find  symbol  argument  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  argument);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  argument);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  argument	22	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	49	None	replace
264	[BUG]  [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	49	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  rhs);  [CE]  cannot  find  symbol  rhs  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  rhs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  rhs);	  NodeTraversal.traverse(compiler,    root,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  rhs	26	None	replace
266	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);	  	compilable	  [FE]  RuntimeException  	23	13	add
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);	  	compilable	  [FE]  RuntimeException  	23	13	add
268	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root);	  	compilable	  [FE]  RuntimeException  	23	13	add
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root);	  	compilable	  [FE]  RuntimeException  	23	13	add
270	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverse(compiler,  root,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,    root,    null);    t.traverse(compiler,  root,  null);	  	compilable	  [FE]  RuntimeException  	23	13	add
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverse(compiler,  root,  null);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverse(compiler,  root,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    root,    null);    t.traverse(compiler,  root,  null);	  	compilable	  [FE]  RuntimeException  	23	13	add
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  nodeTraversal.traverse(compiler,  root,  null);  [CE]  cannot  find  symbol  nodeTraversal  [FE]          RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  nodeTraversal.traverse(compiler,  root,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    root,    null);    nodeTraversal.traverse(compiler,  root,  null);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	23	None	add
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  t.traverseDeclarations(externs,  root);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  root,  null);  t.traverseDeclarations(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  root,  null);  t.traverseDeclarations(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  false);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  false);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	48	None	replace
275	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  assertOnChange,  arguments);	  t.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	72	None	replace
276	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange,  forbidChanges);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  assertOnChange,  forbidChanges);	  t.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	72	None	replace
277	[BUG]  [BUGGY]  t.traverseRoots(compiler,  root,  externs,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  root,  externs,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  root,  externs,  assertOnChange);	  t.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)	72	None	replace
278	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  t.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean,boolean)	72	None	replace
279	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange,  argument);  [CE]  cannot  find  symbol  argument  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange,  argument);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  assertOnChange,  argument);	  t.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  argument	72	None	replace
280	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  TraverseConstants  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  externs,  this);	  TraverseConstants.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	126	None	replace
281	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  root,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  root,  this,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  root,  this,  arguments);	  TraverseConstants.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	126	None	replace
282	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  root,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  root,  arguments);	  TraverseConstants.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	126	None	replace
283	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  root,  null);  [CE]  cannot  find  symbol  TraverseConstants  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  root,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  root,  null);	  TraverseConstants.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	126	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);	          t.traverseRoots(externs,    root);    t.traverseRoots(extrs,    root);    	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	6	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  t.traverseRoots(compiler,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs);  t.traverseRoots(compiler,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs);  t.traverseRoots(compiler,  root);	          t.traverseRoots(externs,    root);    t.traverseRoots(extrs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node)	6	None	replace
286	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  t.traverseRoots(externs,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	64	None	replace
287	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,boolean)	64	None	replace
288	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  t.traverseRoots(externs,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	64	None	replace
289	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	64	None	replace
290	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames);  [CE]  cannot  find  symbol  argumentNames  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentNames	18	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	9	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  constantMap);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  constantMap);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  constantMap	9	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  rhs);  [CE]  cannot  find  symbol  rhs  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  rhs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  rhs);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  rhs	9	None	replace
294	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
295	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
296	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
297	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
298	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externals,  this);  [CE]  cannot  find  symbol  externals  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externals,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externals,  this);	  	non-compiled	[CE]  cannot  find  symbol  externals	42	None	add
299	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externes,  this);  [CE]  cannot  find  symbol  externes  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externes,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externes,  this);	  	non-compiled	[CE]  cannot  find  symbol  externes	42	None	add
300	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	42	None	add
301	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
302	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	add
303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  true);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  true);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  true);	  NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	25	None	replace
304	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  false);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  false);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  false);	  NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  cannot  find  symbol  arguments	25	None	replace
305	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  false,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  false,  externs);	  NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)	25	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(externs,  root,  this);	          t.traverseRoots(externs,    root);    NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	3	None	replace
307	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(externs,  root,  renamer);	          t.traverseRoots(externs,    root);    NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique)	3	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  false);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(externs,  root,  false);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(externs,  root,  false);	          t.traverseRoots(externs,    root);    NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)	3	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  externs);	  NodeTraversal.traverse(compiler,    root,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,Node)	55	None	replace
310	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externals  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  externals,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    externs);    	non-compiled	[CE]  cannot  find  symbol  externals	55	None	replace
311	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  nodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	nodeTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    nodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	110	None	replace
312	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseTraversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    nodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	110	None	replace
313	[BUG]  [BUGGY]  Traverse.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traverse  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    nodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	110	None	replace
314	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
315	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
316	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
317	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
318	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  root);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)	116	None	add
319	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
320	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
321	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs  ==  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs  ==  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
322	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs  ==  null)  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs  ==  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs  ==  null)  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
323	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.	  	non-compiled	[CE]  ';'  expected	116	None	add
324	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	84	1	add
325	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	84	1	add
326	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	84	1	add
327	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	84	1	add
328	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	84	None	add
329	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:  Expected:  function()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	84	None	add
330	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    Annotated:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	84	None	add
331	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externs,  null);	  	compilable	  [FE]  RuntimeException  	7	13	add
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externs,  null);	  	compilable	  [FE]  RuntimeException  	7	13	add
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externes,  null);  [CE]  cannot  find  symbol  externes  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externes,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externes,  null);	  	non-compiled	[CE]  cannot  find  symbol  externes	7	None	add
334	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  t.traverse(compiler,  externs,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,    externs,    null);    t.traverse(compiler,  externs,  null);	  	compilable	  [FE]  RuntimeException  	7	13	add
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  t.traverse(compiler,  externs,  null);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  t.traverse(compiler,  externs,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    t.traverse(compiler,  externs,  null);	  	compilable	  [FE]  RuntimeException  	7	13	add
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  nodeTraversal.traverse(compiler,  externs,  null);  [CE]  cannot  find  symbol  nodeTraversal  [FE]          RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  nodeTraversal.traverse(compiler,  externs,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    nodeTraversal.traverse(compiler,  externs,  null);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	7	None	add
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externals,  null);  [CE]  cannot  find  symbol  externals  [FE]            RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  NodeTraversal.traverse(compiler,  externals,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    NodeTraversal.traverse(compiler,  externals,  null);	  	non-compiled	[CE]  cannot  find  symbol  externals	7	None	add
338	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  null);  [CE]  cannot  find  symbol  converter  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  root,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  root,  null);	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  cannot  find  symbol  converter	77	None	replace
339	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  externs,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	t.traverseRoots(root,  externs,  null);	  t.traverseRoots(externs,    root,    null);    	compilable	  [FE]  RuntimeException  	77	13	replace
340	[BUG]  [BUGGY]  t.traverseRoots(root,  externs,  null);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  externs,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,  externs,  null);	  t.traverseRoots(externs,    root,    null);    	compilable	  [FE]  RuntimeException  	77	13	replace
341	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  null);  [CE]  cannot  find  symbol  converter  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  null);	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  cannot  find  symbol  converter	77	None	replace
342	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  renamer,  assertOnChange);	  t.traverseRoots(externs,    root,    renamer,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique,boolean)	132	None	replace
343	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  assertOnChange,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  assertOnChange,  renamer);	  t.traverseRoots(externs,    root,    renamer,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique)	132	None	replace
344	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  arguments,  renamer,  assertOnChange);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  arguments,  renamer,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  arguments,  renamer,  assertOnChange);	  t.traverseRoots(externs,    root,    renamer,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	132	None	replace
345	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  renamer,  assertOnChange);  [CE]  cannot  find  symbol  converter  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  root,  renamer,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  root,  renamer,  assertOnChange);	  t.traverseRoots(externs,    root,    renamer,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  converter	132	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,NodeTraversal)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  t);	  NodeTraversal.traverse(compiler,    externs,    this,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,NodeTraversal)	10	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  t,  arguments);	  NodeTraversal.traverse(compiler,    externs,    this,    t);    	non-compiled	[CE]  cannot  find  symbol  arguments	10	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,NodeTraversal)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  renamer,  t);	  NodeTraversal.traverse(compiler,    externs,    this,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,NodeTraversal)	10	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,NodeTraversal)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE,  t);	  NodeTraversal.traverse(compiler,    externs,    this,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean,NodeTraversal)	10	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node,NodeTraversal)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  root,  t);	  NodeTraversal.traverse(compiler,    externs,    this,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node,NodeTraversal)	10	None	replace
351	[BUG]  [BUGGY]  t.traverseNode(compiler,  root,  this);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseNode(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseNode(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverseNode(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root);  [CE]  cannot  find  symbol  externes  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externes,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externes,  root);	  NodeTraversal.traverseRoots(compiler,    externals,    root);    	non-compiled	[CE]  cannot  find  symbol  externes	105	None	replace
353	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    externs,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  converter	21	None	replace
354	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  root,  this);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  this);	  t.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize)	62	None	replace
355	[BUG]  [BUGGY]  t.traverseRoots(compiler,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  root,  this);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  root,  this);	  t.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize)	62	None	replace
356	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  this,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  this,  arguments);	  t.traverseRoots(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	62	None	replace
357	[BUG]  [BUGGY]  t.traverseRoots(root,  compiler);  [CE]  no  suitable  method  found  for  traverseRoots(Node,AbstractCompiler)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  compiler);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,  compiler);	  t.traverseRoots(compiler,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,AbstractCompiler)	28	None	replace
358	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  t.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	19	None	replace
359	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  t.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	19	None	replace
360	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  t.traverseRoots(compiler,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	19	None	replace
361	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Context  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Context.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Context.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    Context.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	88	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Context.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Context  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  Context.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  Context.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    Context.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Context	88	None	replace
363	[BUG]  [BUGGY]  Traverse.traverse(compiler,  externs,  this);  Context.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traverse  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traverse.traverse(compiler,  externs,  this);  Context.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traverse.traverse(compiler,  externs,  this);  Context.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    Context.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	88	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	104	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,MakeDeclaredNamesUnique)	104	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  arguments);	  NodeTraversal.traverseRoots(compiler,    root,    arguments);    	non-compiled	[CE]  cannot  find  symbol  arguments	68	None	replace
367	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,boolean)	66	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  arguments);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  cannot  find  symbol  arguments	66	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  externs);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)	66	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  root);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,boolean,Node)	66	None	replace
371	[BUG]  [BUGGY]  MutableMap.traverseRoots(externs,  t);  [CE]  cannot  find  symbol  MutableMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  MutableMap.traverseRoots(externs,  t);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	MutableMap.traverseRoots(externs,  t);	  MutableMap.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  MutableMap	98	None	replace
372	[BUG]  [BUGGY]  MutableMap.traverseRoots(compiler,  externs);  [CE]  cannot  find  symbol  MutableMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  MutableMap.traverseRoots(compiler,  externs);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	MutableMap.traverseRoots(compiler,  externs);	  MutableMap.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  MutableMap	98	None	replace
373	[BUG]  [BUGGY]  MutableMap.traverseRoots(converter,  root);  [CE]  cannot  find  symbol  converter  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  MutableMap.traverseRoots(converter,  root);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	MutableMap.traverseRoots(converter,  root);	  MutableMap.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	98	None	replace
374	[BUG]  [BUGGY]  MutableMap.traverseRoots(externs,  renamer);  [CE]  cannot  find  symbol  MutableMap  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  MutableMap.traverseRoots(externs,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	MutableMap.traverseRoots(externs,  renamer);	  MutableMap.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  MutableMap	98	None	replace
375	[BUG]  [BUGGY]  MutableMap.traverseRoots(externs,  root,  t);  [CE]  cannot  find  symbol  MutableMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  MutableMap.traverseRoots(externs,  root,  t);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	MutableMap.traverseRoots(externs,  root,  t);	  MutableMap.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  MutableMap	98	None	replace
376	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  converter);  [CE]  cannot  find  symbol  converter  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  converter);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  converter);	  t.traverseRoots(converter,    root,    externs);    	non-compiled	[CE]  cannot  find  symbol  converter	32	None	replace
377	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  convert);  [CE]  cannot  find  symbol  convert  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  convert);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  convert);	  t.traverseRoots(converter,    root,    externs);    	non-compiled	[CE]  cannot  find  symbol  convert	32	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseNode(compiler,  root,  this);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseNode(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  t.traverseNode(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverseNode(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
379	[BUG]  [BUGGY]  t.traverseRoots(root,  externs);  t.traverseRoots(root,  externes);  [CE]  cannot  find  symbol  externes  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  externs);  t.traverseRoots(root,  externes);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,    externs);    t.traverseRoots(root,  externes);	  	non-compiled	[CE]  cannot  find  symbol  externes	59	None	add
380	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Normalize)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Normalize)	45	None	add
381	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externes,  this);  t.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  externes  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externes,  this);  t.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externes,  this);  t.traverse(compiler,  externs,  this);	  	non-compiled	[CE]  cannot  find  symbol  externes	45	None	add
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	35	None	replace
383	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	35	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  Root  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  Root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  Root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    Root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  Root	92	None	replace
385	[BUG]  [BUGGY]  &&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  &&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	&&  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments!=    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments!=    	non-compiled	[CE]  not  a  statement	17	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments!=    	non-compiled	[CE]  not  a  statement	17	None	replace
388	[BUG]  [BUGGY]  &&  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  &&  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	&&  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments!=    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	44	None	replace
390	[BUG]  [BUGGY]  t.traverseRoots(extras,  root);  [CE]  cannot  find  symbol  extras  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(extras,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(extras,  root);	          t.traverseRoots(externs,    root);    t.traverseRoots(extras,    root);    	non-compiled	[CE]  cannot  find  symbol  extras	5	None	replace
391	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(externs,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Normalize)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(externs,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Normalize)	42	None	add
392	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externes,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  externes  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externes,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externes,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	non-compiled	[CE]  cannot  find  symbol  externes	42	None	add
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  arguments);	  NodeTraversal.traverse(compiler,    root,    t,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	52	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    t,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,boolean,boolean)	52	None	replace
395	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  renamer);	  t.traverseRoots(externs,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	94	None	replace
396	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  new  MakeDeclaredNamesUnique(),  assertOnChange);	  t.traverseRoots(externs,    root,    new    MakeDeclaredNamesUnique());    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean)	94	None	replace
397	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  arguments,  assertOnChange,  checkUserDeclarations);  [CE]  cannot  find  symbol  arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  arguments,  assertOnChange,  checkUserDeclarations);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  arguments,  assertOnChange,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    assertOnChange,    checkUserDeclarations);    	non-compiled	[CE]  cannot  find  symbol  arguments	80	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  root,  this);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize)	66	None	replace
399	[BUG]  [BUGGY]  nodeMap.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  nodeMap  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  nodeMap.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	nodeMap.traverseRoots(externs,  root);	          t.traverseRoots(externs,    root);    NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  nodeMap	3	None	replace
400	[BUG]  [BUGGY]  nodeTraversal.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  nodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  nodeTraversal.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	nodeTraversal.traverseRoots(externs,  root);	          t.traverseRoots(externs,    root);    NodeTraversal.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	3	None	replace
401	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean,boolean)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean,boolean)	22	None	replace
402	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  checkUserDeclarations);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	22	None	replace
403	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,<null>)  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  renamer,  null);	  NodeTraversal.traverse(compiler,    root,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,<null>)	24	None	replace
404	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  renamer,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  renamer,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique,boolean)	89	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  t,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,NodeTraversal,MakeDeclaredNamesUnique)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  t,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  t,  renamer);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,NodeTraversal,MakeDeclaredNamesUnique)	89	None	replace
406	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
407	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
408	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  AssertionFailedError:  Expected:  var  FOO=false  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  AssertionFailedError:  Expected:  var  FOO=false  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    AssertionFailedError:  Expected:  var  FOO=false	  	non-compiled	[CE]  not  a  statement	116	None	add
409	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  renamer);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique)	116	None	add
410	[BUG]  [BUGGY]  t.traverseRoots(compiler,  root,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  root,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  root,  renamer);	  t.traverseRoots(compiler,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique)	28	None	replace
411	[BUG]  [BUGGY]  Annotated.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Annotated  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Annotated.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Annotated.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  cannot  find  symbol  Annotated	15	None	replace
412	[BUG]  [BUGGY]  Opcodes.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Opcodes  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Opcodes.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Opcodes.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  cannot  find  symbol  Opcodes	15	None	replace
413	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR,  argumentMap);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR,  argumentMap);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	82	None	replace
414	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR,  assertOnChange);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,boolean,boolean)	82	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,MakeDeclaredNamesUnique,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    t,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,MakeDeclaredNamesUnique,boolean)	97	None	replace
416	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  externs);  NodeUtil.traverseRoots(externs,  root,  externs);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  externs);  NodeUtil.traverseRoots(externs,  root,  externs);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    externs);    NodeUtil.traverseRoots(externs,  root,  externs);	  	non-compiled	[CE]  cannot  find  symbol	124	None	add
417	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,    root,    null);    t.traverseRoots(externs,  root,  null);	  	compilable	  [FE]  RuntimeException  	23	13	add
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  t.traverseRoots(externs,  root,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    root,    null);    t.traverseRoots(externs,  root,  null);	  	compilable	  [FE]  RuntimeException  	23	13	add
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  Root,  null);  [CE]  cannot  find  symbol  Root  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  Root,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  Root,  null);	  	non-compiled	[CE]  cannot  find  symbol  Root	23	None	add
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  roots,  null);  [CE]  cannot  find  symbol  roots  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  NodeTraversal.traverse(compiler,  roots,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    root,    null);    NodeTraversal.traverse(compiler,  roots,  null);	  	non-compiled	[CE]  cannot  find  symbol  roots	23	None	add
421	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer,  this);  [CE]  cannot  find  symbol  externals  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  renamer,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externals,  renamer,  this);	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  externals	90	None	replace
422	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
423	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
424	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  root);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)	120	None	add
425	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
426	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  externs,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  externs,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
427	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
428	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
429	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverseRoots(externs,  root,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	11	None	add
430	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	11	1	add
431	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	11	1	add
432	[BUG]  [BUGGY]  Traversal.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traversal  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traversal.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    nodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	110	None	replace
433	[BUG]  [BUGGY]  Traversed.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traversed  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traversed.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traversed.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  cannot  find  symbol  Traversed	14	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  raf);  [CE]  cannot  find  symbol  raf  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  raf);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  raf);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  raf	9	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  root);	  NodeTraversal.traverse(compiler,    externs,    this,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	9	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    ==    	non-compiled	[CE]  not  a  statement	16	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    ==    	non-compiled	[CE]  not  a  statement	16	None	replace
438	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [CE]  cannot  find  symbol  TraverseConstants  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	86	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  t,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    t,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	114	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  assertOnChange);	  NodeTraversal.traverse(compiler,    root,    this,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	26	None	replace
441	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externals);  [CE]  cannot  find  symbol  externals  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  externals);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  externals);	  NodeTraversal.traverse(compiler,    root,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  externals	26	None	replace
442	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  constantMap);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  constantMap);	  t.traverseRoots(root,    externs,    constantMap);    	non-compiled	[CE]  cannot  find  symbol  constantMap	41	None	replace
443	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,boolean,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,boolean,boolean)	64	None	replace
444	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  argumentMap);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  MAKE_LOCAL_NAMES_UNIQUE,  argumentMap);	  t.traverseRoots(externs,    root,    this,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	64	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Normalize)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  t,  this);	  NodeTraversal.traverse(compiler,    roots,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Normalize)	127	None	replace
446	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externals,  this);  Annotated.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  externals  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externals,  this);  Annotated.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externals,  this);  Annotated.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    Annotated.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  externals	87	None	replace
447	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  false,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  false,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  false,  renamer);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique)	57	None	replace
448	[BUG]  [BUGGY]  Traversed.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  Traversed  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traversed.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traversed.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversed	12	None	replace
449	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,MakeDeclaredNamesUnique,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  renamer,  root);	  NodeTraversal.traverseRoots(compiler,    externals,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,MakeDeclaredNamesUnique,Node)	105	None	replace
450	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  renamer,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,MakeDeclaredNamesUnique,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  renamer,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  renamer,  assertOnChange);	  t.traverseRoots(externs,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize,MakeDeclaredNamesUnique,boolean)	75	None	replace
451	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  this,  renamer);  [CE]  cannot  find  symbol  converter  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  root,  this,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  root,  this,  renamer);	  t.traverseRoots(externs,    root,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  converter	75	None	replace
452	[BUG]  [BUGGY]  t.traverseRoots(null,  externs,  root,  this,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(<null>,Node,Node,Normalize,MakeDeclaredNamesUnique)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(null,  externs,  root,  this,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(null,  externs,  root,  this,  renamer);	  t.traverseRoots(externs,    root,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(<null>,Node,Node,Normalize,MakeDeclaredNamesUnique)	75	None	replace
453	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,<null>)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  null);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,<null>)	107	None	replace
454	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  this,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  this,  arguments);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	107	None	replace
455	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  >>  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	13	None	replace
456	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  checkUserDeclarations);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	61	None	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  NodeTraversal.traverseRoots(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	67	None	replace
458	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  FORBIND_WHILE_TO_FOR);  [CE]  cannot  find  symbol  FORBIND_WHILE_TO_FOR  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  FORBIND_WHILE_TO_FOR);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  FORBIND_WHILE_TO_FOR);	  NodeTraversal.traverseRoots(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  FORBIND_WHILE_TO_FOR	67	None	replace
459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  node  =  new  NodeTraversal(compiler,  externs,  this);  [CE]  cannot  find  symbol  node  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  node  =  new  NodeTraversal(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  null);  node  =  new  NodeTraversal(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    node    =    new    NodeTraversal(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  node	101	None	replace
460	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NodeTraversal,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  t,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  t,  renamer);	  NodeTraversal.traverse(compiler,    externs,    t,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NodeTraversal,MakeDeclaredNamesUnique)	113	None	replace
461	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,Node,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  root,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  t,  root,  renamer);	  NodeTraversal.traverse(compiler,    externs,    t,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,Node,MakeDeclaredNamesUnique)	113	None	replace
462	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  ';'  expected	121	None	replace
463	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	84	1	add
464	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	84	1	add
465	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	84	None	add
466	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  t.traverseDeclarations(externs,  root,  this);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  t.traverseDeclarations(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverseDeclarations(externs,  root,  this);	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
467	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  '('  or  '['  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  '('  or  '['  expected	50	None	replace
468	[BUG]  [BUGGY]  renamer.traverseChild(externs,  root);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  renamer.traverseChild(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	renamer.traverseChild(externs,  root);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    renamer.replaceChild(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
469	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  this);  renamer.replaceChild(externs,  root);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseTraversal.traverse(compiler,  externs,  this);  renamer.replaceChild(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseTraversal.traverse(compiler,  externs,  this);  renamer.replaceChild(externs,  root);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    renamer.replaceChild(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	102	None	replace
470	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  root,  t);  [CE]  cannot  find  symbol  TraverseConstants  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  root,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  root,  t);	  TraverseConstants.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	126	None	replace
471	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  renamer,  this);  [CE]  cannot  find  symbol  TraverseConstants  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  renamer,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  renamer,  this);	  TraverseConstants.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	126	None	replace
472	[BUG]  [BUGGY]  t.traverse(externs,  this);  [CE]  no  suitable  method  found  for  traverse(Node,Normalize)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverse(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverse(externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,    externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(Node,Normalize)	46	None	replace
473	[BUG]  [BUGGY]  t.traverseNodeDeclarations(converter,  externs,  root);  [CE]  cannot  find  symbol  converter  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseNodeDeclarations(converter,  externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseNodeDeclarations(converter,  externs,  root);	  t.traverseNodeDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	95	None	replace
474	[BUG]  [BUGGY]  t.traverseRoots(externes,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  externes  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externes,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externes,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(root,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  externes	40	None	replace
475	[BUG]  [BUGGY]  t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  t.traverseRoots(root,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	40	None	replace
476	[BUG]  [BUGGY]  n.traverseRoots(externs,  root);  n.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  n  [FE]                junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  n.traverseRoots(externs,  root);  n.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	n.traverseRoots(externs,  root);  n.traverseRoots(externs,  root);	          t.traverseRoots(externs,    root);    t.traverseRoots(extrs,    root);    	non-compiled	[CE]  cannot  find  symbol  n	6	None	replace
477	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  arguments,  assertOnChange,  forbidChanges);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  arguments,  assertOnChange,  forbidChanges);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  arguments,  assertOnChange,  forbidChanges);	  t.traverseRoots(externs,    root,    assertOnChange,    forbidChanges);    	non-compiled	[CE]  cannot  find  symbol  arguments	79	None	replace
478	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  externals);  [CE]  cannot  find  symbol  externals  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  externals);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  externals);	  NodeTraversal.traverse(compiler,    root,    t,    arguments);    	non-compiled	[CE]  cannot  find  symbol  externals	53	None	replace
479	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  renamer,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  renamer,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  renamer,  assertOnChange);	  t.traverseRoots(externs,    root,    renamer,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique,boolean)	132	None	replace
480	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  renamer,  assertOnChange,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    renamer,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean,boolean)	132	None	replace
481	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  root,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  root,  renamer);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node,MakeDeclaredNamesUnique)	96	None	replace
482	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  renamer,  false);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  renamer,  false);	  NodeTraversal.traverse(compiler,    root,    false);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,boolean)	25	None	replace
483	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(null,  root);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	t.traverseRoots(null,  root);	  t.traverseRoots(constantMap,    root);    	compilable	  [FE]  RuntimeException  	78	13	replace
484	[BUG]  [BUGGY]  t.traverseRoots(null,  root);  [FE]  RuntimeException  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(null,  root);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(null,  root);	  t.traverseRoots(constantMap,    root);    	compilable	  [FE]  RuntimeException  	78	13	replace
485	[BUG]  [BUGGY]  MutableMap.traverseRoots(root,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  MutableMap.traverseRoots(root,  constantMap);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	MutableMap.traverseRoots(root,  constantMap);	  t.traverseRoots(constantMap,    root);    	non-compiled	[CE]  cannot  find  symbol  constantMap	78	None	replace
486	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  t.traverseRoots(externs,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,    externs,    null);    t.traverseRoots(externs,  null);	  	compilable	  [FE]  RuntimeException  	7	13	add
487	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  t.traverseRoots(externs,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  null);  t.traverseRoots(externs,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,    externs,    null);    t.traverseRoots(externs,  null);	  	compilable	  [FE]  RuntimeException  	7	13	add
488	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  nodeDeclarations.traverseNodeDeclarations(externs,  this);  [CE]  cannot  find  symbol  nodeDeclarations  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  nodeDeclarations.traverseNodeDeclarations(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  nodeDeclarations.traverseNodeDeclarations(externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseNodeDeclarations(externs,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeDeclarations	130	None	replace
489	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  not  a  statement	117	None	replace
490	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.  [CE]  <identifier>  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
491	[BUG]  [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  MAKE_LOCAL_NAMES_UNIQUE);  t.traverseRoots(externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,boolean)	100	None	replace
493	[BUG]  [BUGGY]  t.traverseRoots(externs,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Normalize)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Normalize)	100	None	replace
494	[BUG]  [BUGGY]  t.traverseNodes(externs,  root);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseNodes(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseNodes(externs,  root);	  t.traverseRoots(root,    externs);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
495	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(null,  root);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(null,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(null,  root);	  	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	47	None	add
496	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(interns,  root);  [CE]  cannot  find  symbol  interns  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(interns,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(interns,  root);	  	non-compiled	[CE]  cannot  find  symbol  interns	47	None	add
497	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(node,  root);  [CE]  cannot  find  symbol  node  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(node,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(node,  root);	  	non-compiled	[CE]  cannot  find  symbol  node	47	None	add
498	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  Root,  null);  [CE]  cannot  find  symbol  Root  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  Root,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    t.traverseRoots(externs,  Root,  null);	  	non-compiled	[CE]  cannot  find  symbol  Root	76	None	add
499	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  new  NodeTraversal(compiler,  externs,  null);  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,<null>)  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  new  NodeTraversal(compiler,  externs,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    new  NodeTraversal(compiler,  externs,  null);	  	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler,Node,<null>)	76	None	add
500	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  [CE]  cannot  find  symbol  ConVERT_WHILE_TO_FOR  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  ConVERT_WHILE_TO_FOR	2	None	replace
501	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverse(compiler,  externs,  this);  }  [CE]  cannot  find  symbol  ConVERT_WHILE_TO_FOR  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverse(compiler,  externs,  this);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverse(compiler,  externs,  this);  }	          t.traverseRoots(externs,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  ConVERT_WHILE_TO_FOR	2	None	replace
502	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  ConVERT_WHILE_TO_FOR  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  throw  new  IllegalStateException( " ");  }	          t.traverseRoots(externs,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  ConVERT_WHILE_TO_FOR	2	None	replace
503	[BUG]  [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  Preconditions.checkNotNull(externs);  }  [CE]  cannot  find  symbol  ConVERT_WHILE_TO_FOR  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  Preconditions.checkNotNull(externs);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(!ConVERT_WHILE_TO_FOR)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  Preconditions.checkNotNull(externs);  }	          t.traverseRoots(externs,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  ConVERT_WHILE_TO_FOR	2	None	replace
504	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function!=  not  a  statement  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function!=  not  a  statement  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function!=  not  a  statement	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	49	None	replace
505	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [CE]  '('  or  '['  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  new  FunctionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(function	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  '('  or  '['  expected	49	None	replace
506	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange,  forbidChanges);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  assertOnChange,  forbidChanges);	  t.traverseRoots(externs,    root,    this,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	65	None	replace
507	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  assertOnChange,  checkUserDeclarations);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  assertOnChange,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    this,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	65	None	replace
508	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  arguments,  assertOnChange);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  arguments,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  arguments,  assertOnChange);	  t.traverseRoots(externs,    root,    this,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	65	None	replace
509	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  t.straverseRoots(externs,  root);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  t.straverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.straverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
510	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    arguments,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  MAKE_WHILE_TO_FOR	109	None	replace
511	[BUG]  [BUGGY]  t.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,boolean)	29	None	replace
512	[BUG]  [BUGGY]  t.traverseRoots(externs,  parent);  [CE]  cannot  find  symbol  parent  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  parent);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  parent);	  t.traverseRoots(converter,    externs);    	non-compiled	[CE]  cannot  find  symbol  parent	29	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  renamer);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	70	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  this,  argument);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  this,  argument);	  NodeTraversal.traverseRoots(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	70	None	replace
515	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(converter,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  converter	103	None	replace
516	[BUG]  [BUGGY]  t.traverseRoots(externs,  externs,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  externs,  this);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  externs,  this);	  t.traverseRoots(externs,    root,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	125	None	replace
517	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE,  forbidChanges);	  t.traverseRoots(externs,    root,    CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	81	None	replace
518	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseTraversal.traverse(compiler,  root,  this);  t.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	46	None	replace
519	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  root,  this);  t.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  TraverseConstants  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  root,  this);  t.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  root,  this);  t.traverse(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	46	None	replace
520	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    }    	non-compiled	[CE]  not  a  statement	50	None	replace
521	[BUG]  [BUGGY]  if(externs.getType()  ==  Token.EXPR_RESULT)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverse(compiler,  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(externs.getType()  ==  Token.EXPR_RESULT)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverse(compiler,  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(externs.getType()  ==  Token.EXPR_RESULT)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverse(compiler,	          t.traverseRoots(externs,    root);    t.traverseRoots(externs,    root);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
522	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(externs.getType()  ==  Token.EXPR_RESULT)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	if(externs.getType()  ==  Token.EXPR_RESULT)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          t.traverseRoots(externs,    root);    t.traverseRoots(externs,    root);    	compilable	  [FE]  RuntimeException  	2	13	replace
523	[BUG]  [BUGGY]  if(externs.getType()  ==  Token.EXPR_RESULT)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  RuntimeException  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(externs.getType()  ==  Token.EXPR_RESULT)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(externs.getType()  ==  Token.EXPR_RESULT)  {  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          t.traverseRoots(externs,    root);    t.traverseRoots(externs,    root);    	compilable	  [FE]  RuntimeException  	2	13	replace
524	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  externs,  this);  t.traverseNodeDeclarations(externs,  this);  [CE]  cannot  find  symbol  TraverseConstants  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  externs,  this);  t.traverseNodeDeclarations(externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  externs,  this);  t.traverseNodeDeclarations(externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseNodeDeclarations(externs,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	130	None	replace
525	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
526	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	116	10	add
527	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,	  	non-compiled	[CE]  ')'  expected	116	None	add
528	[BUG]  [BUGGY]  Traversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);  [CE]  cannot  find  symbol  Traversal  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Traversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Traversal.traverse(compiler,  root,  this);  node  =  new  NodeTraversal(compiler,  externs,  this);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    node    =    new    NodeTraversal(compiler,    externs,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	101	None	replace
529	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	t.traverseRoots(root,  root);	  t.traverseRoots(root,    externs);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	60	1	replace
530	[BUG]  [BUGGY]  t.traverseRoots(root,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(root,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(root,  root);	  t.traverseRoots(root,    externs);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	60	1	replace
531	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  arguments);	  NodeTraversal.traverseRoots(compiler,    externs,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	104	None	replace
532	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	15	None	replace
533	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(    	non-compiled	[CE]  not  a  statement	15	None	replace
534	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NodeTraversal)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  externs,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  externs,  t);	  NodeTraversal.traverse(compiler,    externs,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,NodeTraversal)	54	None	replace
535	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  raf);  [CE]  cannot  find  symbol  raf  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  raf);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  raf);	  NodeTraversal.traverse(compiler,    root,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  raf	26	None	replace
536	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE,  t);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  arguments,  MAKE_LOCAL_NAMES_UNIQUE,  t);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE,    t);    	non-compiled	[CE]  cannot  find  symbol  arguments	51	None	replace
537	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  MAKE_LOCAL_NAMES_UNIQUE,  t,  arguments);	  NodeTraversal.traverse(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE,    t);    	non-compiled	[CE]  cannot  find  symbol  arguments	51	None	replace
538	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  renamer.replaceChild(externs,  root);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  renamer.replaceChild(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  renamer.replaceChild(externs,  root);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    renamer.replaceChild(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
539	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  MAKE_LIST_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    t,    arguments);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	53	None	replace
540	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,MakeDeclaredNamesUnique)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  new  MakeDeclaredNamesUnique());  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    root,    t,    arguments);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,MakeDeclaredNamesUnique)	53	None	replace
541	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(function  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(function  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  FunctionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(function	          NodeTraversal.traverse(compiler,    externs,    this);    FunctionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(function    	non-compiled	[CE]  not  a  statement	49	None	replace
542	[BUG]  [BUGGY]  t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    arguments,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean)	109	None	replace
543	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	117	1	replace
544	[BUG]  [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	117	1	replace
545	[BUG]  [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
546	[BUG]  [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(externs!=  null)  {  t.traverseRoots(externs);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(externs!=  null)  {  t.traverseRoots(externs);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  ';'  expected	117	None	replace
547	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  root,  null);  }  else  {  NodeTraversal.traverseRoots(externs,  root,  null);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  root,  null);  }  else  {  NodeTraversal.traverseRoots(externs,  root,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    t.traverseRoots(externs,  root,  null);  }  else  {  NodeTraversal.traverseRoots(externs,  root,  null);	  	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	76	None	add
548	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  new  NodeTraversal(compiler,  t.traverseRoots(externs,  root,  null);  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  new  NodeTraversal(compiler,  t.traverseRoots(externs,  root,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    new  NodeTraversal(compiler,  t.traverseRoots(externs,  root,  null);	  	non-compiled	[CE]  ')'  expected	76	None	add
549	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  NodeTraversal  t.traverseRoots(externs,  root,  null);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  NodeTraversal  t.traverseRoots(externs,  root,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    NodeTraversal  t.traverseRoots(externs,  root,  null);	  	non-compiled	[CE]  ';'  expected	76	None	add
550	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  root,  null);  }  else  {  NodeTraversal.traverseRoots(constantMap,  externs,  null);  [CE]  cannot  find  symbol  constantMap  [FE]          RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  null);  t.traverseRoots(externs,  root,  null);  }  else  {  NodeTraversal.traverseRoots(constantMap,  externs,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    null);    t.traverseRoots(externs,  root,  null);  }  else  {  NodeTraversal.traverseRoots(constantMap,  externs,  null);	  	non-compiled	[CE]  cannot  find  symbol  constantMap	76	None	add
551	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  root,  assertOnChange,  checkUserDeclarations);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  assertOnChange,  checkUserDeclarations);	  t.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	72	None	replace
552	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  this,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  root,  this,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  this,  assertOnChange);	  t.traverseRoots(compiler,    externs,    root,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,Normalize,boolean)	72	None	replace
553	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Node,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  t,  root,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    t,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,Node,boolean)	106	None	replace
554	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  nodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    nodeTraversal.traverse(compiler,  externs,  this);  NodeTraversal.traverse(compiler,  externs,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	42	None	add
555	[BUG]  [BUGGY]  t.traverseAssertionFailedError(externs,  root);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseAssertionFailedError(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseAssertionFailedError(externs,  root);	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
556	[BUG]  [BUGGY]  t.traverseAssertionFailedErrors(externs,  root);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseAssertionFailedErrors(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseAssertionFailedErrors(externs,  root);	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
557	[BUG]  [BUGGY]  t.traverseNodeDeclarations(externs,  root,  renamer);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseNodeDeclarations(externs,  root,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseNodeDeclarations(externs,  root,  renamer);	  t.traverseNodeDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
558	[BUG]  [BUGGY]  TraverseTraversal.traverseNode(compiler,  root,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseTraversal.traverseNode(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseTraversal.traverseNode(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverseNode(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	111	None	replace
559	[BUG]  [BUGGY]  TraverseNodeTraversal.traverseNode(compiler,  root,  this);  [CE]  cannot  find  symbol  TraverseNodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseNodeTraversal.traverseNode(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseNodeTraversal.traverseNode(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    t.traverseNode(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseNodeTraversal	111	None	replace
560	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  argumentOnChange,  forbidChanges);  [CE]  cannot  find  symbol  argumentOnChange  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  argumentOnChange,  forbidChanges);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  argumentOnChange,  forbidChanges);	  t.traverseRoots(externs,    root,    assertOnChange,    checkUserDeclarations);    	non-compiled	[CE]  cannot  find  symbol  argumentOnChange	80	None	replace
561	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  raf);  [CE]  cannot  find  symbol  raf  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  raf);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  raf);	  t.traverseRoots(externs,    root,    this,    arguments);    	non-compiled	[CE]  cannot  find  symbol  raf	61	None	replace
562	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,NodeTraversal,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  renamer,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer,  t,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    renamer,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,MakeDeclaredNamesUnique,NodeTraversal,boolean)	56	None	replace
563	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  renamer,  externs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,MakeDeclaredNamesUnique,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  renamer,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  t,  renamer,  externs);	  NodeTraversal.traverse(compiler,    externs,    renamer,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,MakeDeclaredNamesUnique,Node)	56	None	replace
564	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  arguments,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    t,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  arguments	52	None	replace
565	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [CE]  cannot  find  symbol  argument  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  argument);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  MAKE_LOCAL_NAMES_UNIQUE,  argument);	  NodeTraversal.traverse(compiler,    root,    t,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  argument	52	None	replace
566	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  ==	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    ==    	non-compiled	[CE]  not  a  statement	16	None	replace
567	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  expression()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  expression()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  expression()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    ==    	non-compiled	[CE]  not  a  statement	16	None	replace
568	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  renamer,  new  MakeDeclaredNamesUnique());	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique,MakeDeclaredNamesUnique)	90	None	replace
569	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  this,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  renamer,  this,  arguments);	  NodeTraversal.traverse(compiler,    renamer,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	90	None	replace
570	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	11	10	add
571	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	11	10	add
572	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    t.traverseRoots(externs,  root,  this);  NodeTraversal.traverse(compiler,  root,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	11	None	add
573	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	11	10	add
574	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        NodeTraversal.traverse(compiler,    root,    this);    t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  root,  this);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	11	10	add
575	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	non-compiled	[CE]  ';'  expected	120	None	add
576	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)	120	None	add
577	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
578	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  }  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    if(externs!=  null)  {  t.traverseRoots(externs,  root);  if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	120	10	add
579	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique)  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    if(externs!=  null)  {  t.traverseRoots(externs,  root);  }  NodeTraversal.traverse(compiler,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    NodeTraversal.traverse(compiler,  renamer);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,MakeDeclaredNamesUnique)	120	None	add
580	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  root,  CONVERT_WHILE_TO_FOR,  MAKE_LOCAL_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    CONVERT_WHILE_TO_FOR,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  converter	81	None	replace
581	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  renamer,  arguments);	  NodeTraversal.traverse(compiler,    roots,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	37	None	replace
582	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,MakeDeclaredNamesUnique)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  t,  renamer);	  NodeTraversal.traverse(compiler,    roots,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,MakeDeclaredNamesUnique)	37	None	replace
583	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  name);  t.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  name  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  name);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        t.traverseRoots(externs,    root);    t.traverseRoots(externs,  name);  t.traverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  name	1	None	add
584	[BUG]  [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  parent);  t.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  parent  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);  t.traverseRoots(externs,  parent);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                t.traverseRoots(externs,        root);        t.traverseRoots(externs,    root);    t.traverseRoots(externs,  parent);  t.traverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  parent	1	None	add
585	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  externs,  this,  renamer);  [CE]  cannot  find  symbol  TraverseConstants  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  externs,  this,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  externs,  this,  renamer);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	100	None	replace
586	[BUG]  [BUGGY]  TraverseTraversal.traverseRoots(compiler,  externs,  this,  renamer);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseTraversal.traverseRoots(compiler,  externs,  this,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseTraversal.traverseRoots(compiler,  externs,  this,  renamer);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	100	None	replace
587	[BUG]  [BUGGY]  t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  externs,  MAKE_LOCAL_NAMES_UNIQUE,  renamer);	  t.traverseRoots(root,    externs,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,boolean,MakeDeclaredNamesUnique)	40	None	replace
588	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  null);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,<null>)  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  null);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  null);	  t.traverseRoots(externs,    root,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,<null>)	77	None	replace
589	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  MAKE_LIST_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LIST_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  converter	131	None	replace
590	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  MAKE_LIST_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LIST_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LIST_NAMES_UNIQUE	131	None	replace
591	[BUG]  [BUGGY]  t.traverseRoots(converter,  root,  MAKE_LIST_NAMES_UNIQUE);  [CE]  cannot  find  symbol  converter  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  root,  MAKE_LIST_NAMES_UNIQUE);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  root,  MAKE_LIST_NAMES_UNIQUE);	  t.traverseRoots(externs,    root,    MAKE_LIST_NAMES_UNIQUE);    	non-compiled	[CE]  cannot  find  symbol  converter	131	None	replace
592	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments!=  not  a  statement	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	13	None	replace
593	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  this,  renamer);	          NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Normalize,MakeDeclaredNamesUnique)	128	None	replace
594	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  renamer,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  renamer,  arguments);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	123	None	replace
595	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,Normalize)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  renamer,  this);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  renamer,  this);	  t.traverseRoots(externs,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,Normalize)	123	None	replace
596	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  t);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,NodeTraversal)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  renamer,  t);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  renamer,  t);	  NodeTraversal.traverseRoots(compiler,    root,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,NodeTraversal)	99	None	replace
597	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  t,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  root,  t,  arguments);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  root,  t,  arguments);	  NodeTraversal.traverseRoots(compiler,    root,    t);    	non-compiled	[CE]  cannot  find  symbol  arguments	99	None	replace
598	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  root,  renamer);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  root,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  root,  renamer);	  t.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node,MakeDeclaredNamesUnique)	31	None	replace
599	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externs,  renamer,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externs,  renamer,  root);	  NodeTraversal.traverseRoots(compiler,    externs,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,MakeDeclaredNamesUnique,Node)	66	None	replace
600	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  renamer);  [CE]  cannot  find  symbol  externals  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  externals,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  externals,  renamer);	  NodeTraversal.traverseRoots(compiler,    externals,    root);    	non-compiled	[CE]  cannot  find  symbol  externals	105	None	replace
601	[BUG]  [BUGGY]  if(t!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  t.traverseRoots(externs,  root);  }  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(t!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(t!=  null)  {  t.traverseRoots(externs,  root);  }  else  {  NodeTraversal.traverseDeclarations(compiler,  assertOnChange);  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    NodeTraversal.traverseDeclarations(compiler,    assertOnChange);    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
602	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,boolean)  [FE]          junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  assertOnChange);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  assertOnChange);	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    NodeTraversal.traverseDeclarations(compiler,    assertOnChange);    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,boolean)	115	None	replace
603	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  assertOnChange);  t.traverseRoots(externs,  root);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  assertOnChange);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  assertOnChange);  t.traverseRoots(externs,  root);	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    NodeTraversal.traverseDeclarations(compiler,    assertOnChange);    t.traverseRoots(externs,    root);    }    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,boolean)	115	None	replace
604	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(t!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	if(t!=  null)  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    NodeTraversal.traverseDeclarations(compiler,    assertOnChange);    t.traverseRoots(externs,    root);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	115	1	replace
605	[BUG]  [BUGGY]  if(t!=  null)  {  t.traverseRoots(externs,  root);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  if(t!=  null)  {  t.traverseRoots(externs,  root);  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	if(t!=  null)  {  t.traverseRoots(externs,  root);  }	          t.traverseRoots(externs,    root);    if(externs!=    null)    {    t.traverseRoots(externs,    root);    }    else    {    NodeTraversal.traverseDeclarations(compiler,    assertOnChange);    t.traverseRoots(externs,    root);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	115	1	replace
606	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  t.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(externs,  root);  [CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  t.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    t.traverse(compiler,  externs,  this);  NodeTraversal.traverseRoots(externs,  root);	  	non-compiled	[CE]  non-static  method  traverseRoots(Node...)  cannot  be  referenced  from  a  static  context	47	None	add
607	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	47	10	add
608	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	47	10	add
609	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externals,  this);  NodeTraversal.traverseRoots(externs,  root);  [CE]  cannot  find  symbol  externals  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  NodeTraversal.traverse(compiler,  externals,  this);  NodeTraversal.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    NodeTraversal.traverse(compiler,  externals,  this);  NodeTraversal.traverseRoots(externs,  root);	  	non-compiled	[CE]  cannot  find  symbol  externals	47	None	add
610	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	48	1	replace
611	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	48	1	replace
612	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	48	1	replace
613	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]      junit.framework.AssertionFailedError:  Expected:  var  FOO=true    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root);	          NodeTraversal.traverse(compiler,    externs,    this);    NodeTraversal.traverse(compiler,    externs,    this);    t.traverseRoots(externs,    root);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	48	1	replace
614	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argumentOnChange);  [CE]  cannot  find  symbol  argumentOnChange  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argumentOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  MAKE_LOCAL_NAMES_UNIQUE,  argumentOnChange);	  t.traverseRoots(externs,    root,    arguments,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  argumentOnChange	73	None	replace
615	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  renamer,  forbidChanges);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  renamer,  forbidChanges);	  NodeTraversal.traverse(compiler,    externs,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	96	None	replace
616	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,NodeTraversal,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  t,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    this,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,NodeTraversal,boolean)	10	None	replace
617	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t,  renamer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,NodeTraversal,MakeDeclaredNamesUnique)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  this,  t,  renamer);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  this,  t,  renamer);	  NodeTraversal.traverse(compiler,    externs,    this,    t);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,NodeTraversal,MakeDeclaredNamesUnique)	10	None	replace
618	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,MakeDeclaredNamesUnique,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverseRoots(compiler,    root,    MAKE_LOCAL_NAMES_UNIQUE);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,MakeDeclaredNamesUnique,boolean)	67	None	replace
619	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,<null>)  [FE]    RuntimeException    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  null);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  t,  null);	  NodeTraversal.traverse(compiler,    externs,    null);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,NodeTraversal,<null>)	8	None	replace
620	[BUG]  [BUGGY]  t.traverseRoots(compiler,  externs,  externs);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(compiler,  externs,  externs);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(compiler,  externs,  externs);	  t.traverseRoots(externs,    root,    externs);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,Node,Node)	125	None	replace
621	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  root,  false);  [CE]  cannot  find  symbol  converter  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  root,  false);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  root,  false);	  t.traverseRoots(externs,    root,    false);    	non-compiled	[CE]  cannot  find  symbol  converter	57	None	replace
622	[BUG]  [BUGGY]  TraverseConstants.traverse(compiler,  t,  this);  [CE]  cannot  find  symbol  TraverseConstants  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  TraverseConstants.traverse(compiler,  t,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	TraverseConstants.traverse(compiler,  t,  this);	  TraverseConstants.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseConstants	126	None	replace
623	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments!=    	non-compiled	[CE]  not  a  statement	17	None	replace
624	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this);  junit.framework.AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  }	          NodeTraversal.traverse(compiler,    root,    this);    NodeTraversal.traverse(compiler,    root,    this);    junit.framework.AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments!=    	non-compiled	[CE]  not  a  statement	17	None	replace
625	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  r,  this);  [CE]  cannot  find  symbol  r  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  r,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  r,  this);	  NodeTraversal.traverse(compiler,    roots,    this);    	non-compiled	[CE]  cannot  find  symbol  r	127	None	replace
626	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  ramer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  cannot  find  symbol  ramer  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  ramer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  this,  ramer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  ramer	89	None	replace
627	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  argument);  [CE]  cannot  find  symbol  argument  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  argument);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  argument);	  t.traverseRoots(root,    externs,    constantMap);    	non-compiled	[CE]  cannot  find  symbol  argument	41	None	replace
628	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange,  checkUserDeclarations);  [CE]  cannot  find  symbol  checkUserDeclarations  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange,  checkUserDeclarations);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  renamer,  assertOnChange,  checkUserDeclarations);	  t.traverseRoots(externs,    root,    renamer,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  checkUserDeclarations	132	None	replace
629	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange,  forbidChanges);  [CE]  cannot  find  symbol  forbidChanges  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange,  forbidChanges);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  renamer,  assertOnChange,  forbidChanges);	  t.traverseRoots(externs,    root,    renamer,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  forbidChanges	132	None	replace
630	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  renamer,  MAKE_LOCAL_NAMES_UNIQUE,  assertOnChange);	  t.traverseRoots(externs,    root,    renamer,    assertOnChange);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,MakeDeclaredNamesUnique,boolean,boolean)	132	None	replace
631	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  renamer,  assertOnChange,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  renamer,  assertOnChange,  arguments);	  t.traverseRoots(externs,    root,    renamer,    assertOnChange);    	non-compiled	[CE]  cannot  find  symbol  arguments	132	None	replace
632	[BUG]  [BUGGY]  t.traverseRoots(converter,  externs,  this,  renamer);  [CE]  cannot  find  symbol  converter  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(converter,  externs,  this,  renamer);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(converter,  externs,  this,  renamer);	  t.traverseRoots(externs,    root,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  converter	75	None	replace
633	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  this,  renamer,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  this,  renamer,  arguments);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  this,  renamer,  arguments);	  t.traverseRoots(externs,    root,    this,    renamer);    	non-compiled	[CE]  cannot  find  symbol  arguments	75	None	replace
634	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES);  [CE]  cannot  find  symbol  MAKE_LOCAL_NAMES  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  renamer,  MAKE_LOCAL_NAMES);	  NodeTraversal.traverse(compiler,    Root,    renamer);    	non-compiled	[CE]  cannot  find  symbol  MAKE_LOCAL_NAMES	92	None	replace
635	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,Normalize,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t,  this,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  t,  this,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    root,    t,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,Normalize,boolean)	107	None	replace
636	[BUG]  [BUGGY]  Context  t  =  new  Context.traverse(compiler,  root,  this);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  Context  t  =  new  Context.traverse(compiler,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	Context  t  =  new  Context.traverse(compiler,  root,  this);	          NodeTraversal.traverse(compiler,    root,    this);    Context.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
637	[BUG]  [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  externs);  [CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,MakeDeclaredNamesUnique,Node)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverseRoots(compiler,  renamer,  externs);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverseRoots(compiler,  renamer,  externs);	  NodeTraversal.traverseRoots(compiler,    root,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(AbstractCompiler,MakeDeclaredNamesUnique,Node)	69	None	replace
638	[BUG]  [BUGGY]  t.traverseDeclarations(constantMap,  externs,  root);  [CE]  cannot  find  symbol  constantMap  [FE]        junit.framework.AssertionFailedError:  Expected:  var  FOO=true      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseDeclarations(constantMap,  externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseDeclarations(constantMap,  externs,  root);	  t.traverseDeclarations(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  constantMap	58	None	replace
639	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    t.traverseRoots(externs,  root,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	84	None	add
640	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	add	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	84	10	add
641	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    t.traverseRoots(externs,  root);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	84	10	add
642	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  t.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  t.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        root,        this);        t.traverse(compiler,    root,    this);    t.traverse(compiler,  root,  this);  t.traverseRoots(externs,  root,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	84	None	add
643	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  externs);  n.traverseRoots(externs,  root,  externs);  [CE]  cannot  find  symbol  n  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  externs);  n.traverseRoots(externs,  root,  externs);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,    root,    externs);    n.traverseRoots(externs,  root,  externs);	  	non-compiled	[CE]  cannot  find  symbol  n	124	None	add
644	[BUG]  [BUGGY]  t.traverseRoots(externs,  root,  arguments,  CONVERT_WHILE_TO_FOR);  [CE]  cannot  find  symbol  arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  t.traverseRoots(externs,  root,  arguments,  CONVERT_WHILE_TO_FOR);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	t.traverseRoots(externs,  root,  arguments,  CONVERT_WHILE_TO_FOR);	  t.traverseRoots(externs,    root,    MAKE_LOCAL_NAMES_UNIQUE,    CONVERT_WHILE_TO_FOR);    	non-compiled	[CE]  cannot  find  symbol  arguments	82	None	replace
645	[BUG]  [BUGGY]  MutableMap.traverseRoots(converter,  externs,  root);  [CE]  cannot  find  symbol  converter  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  MutableMap.traverseRoots(converter,  externs,  root);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	MutableMap.traverseRoots(converter,  externs,  root);	  MutableMap.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  converter	98	None	replace
646	[BUG]  [BUGGY]  MutableMap.traverseRoots(compiler,  externs,  root);  [CE]  cannot  find  symbol  MutableMap  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  MutableMap.traverseRoots(compiler,  externs,  root);  [BUGGY]      }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	MutableMap.traverseRoots(compiler,  externs,  root);	  MutableMap.traverseRoots(externs,    root);    	non-compiled	[CE]  cannot  find  symbol  MutableMap	98	None	replace
647	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]          NodeTraversal.traverse(compiler,    externs,    this);    t.traverse(compiler,  externs,  this);  t.traverseRoots(externs,  root,  this);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	                NodeTraversal.traverse(compiler,        externs,        this);        t.traverse(compiler,    externs,    this);    t.traverseRoots(externs,  root,  this);	  	non-compiled	[CE]  no  suitable  method  found  for  traverseRoots(Node,Node,Normalize)	45	None	add
648	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,MakeDeclaredNamesUnique,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      public  void  process(Node  externs,  Node  root)  {  NodeTraversal.traverse(compiler,  root,  this);  if  (MAKE_LOCAL_NAMES_UNIQUE)  {  MakeDeclaredNamesUnique  renamer  =  new  MakeDeclaredNamesUnique();  NodeTraversal  t  =  new  NodeTraversal(compiler,  renamer);      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  t,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      t.traverseRoots(externs,  root);  }  removeDuplicateDeclarations(root);  new  PropogateConstantAnnotations(compiler,  assertOnChange)  .process(externs,  root);  }  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  AbstractCompiler  compiler  MakeDeclaredNamesUnique  renamer  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  forbidChanges  Map  constantMap  NodeTraversal  t  Node  externs  root  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  t,  renamer,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeTraversal.traverse(compiler,    externs,    t,    renamer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,NodeTraversal,MakeDeclaredNamesUnique,boolean)	113	None	replace
