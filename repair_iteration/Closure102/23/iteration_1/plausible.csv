37	[BUG]    [BUGGY]        NodeTraversal.traverse(compiler,    renamer);    [CE]    no    suitable    method    found    for    traverse(AbstractCompiler,MakeDeclaredNamesUnique)    [FE]            junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public    void    process(Node    externs,    Node    root)    {    NodeTraversal.traverse(compiler,    root,    this);    if    (MAKE_LOCAL_NAMES_UNIQUE)    {    MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique();    NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    [BUGGY]        NodeTraversal.traverse(compiler,    renamer);    [BUGGY]    t.traverseRoots(externs,    root);    }    removeDuplicateDeclarations(root);    new    PropogateConstantAnnotations(compiler,    assertOnChange)    .process(externs,    root);    }    [CLASS]    Normalize    PropogateConstantAnnotations    VerifyConstants    DuplicateDeclarationHandler    ScopeTicklingCallback    [METHOD]    process    [RETURN_TYPE]    void    Node    externs    Node    root    [VARIABLES]    AbstractCompiler    compiler    MakeDeclaredNamesUnique    renamer    boolean    CONVERT_WHILE_TO_FOR    MAKE_LOCAL_NAMES_UNIQUE    assertOnChange    checkUserDeclarations    forbidChanges    Map    constantMap    NodeTraversal    t    Node    externs    root    	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  root,  renamer);	      NodeTraversal.traverse(compiler,    renamer);    	plausible		16	0
37	[BUG]    [BUGGY]        NodeTraversal.traverse(compiler,    renamer);    [CE]    no    suitable    method    found    for    traverse(AbstractCompiler,MakeDeclaredNamesUnique)    [FE]            junit.framework.AssertionFailedError:    Expected:    function    f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    public    void    process(Node    externs,    Node    root)    {    NodeTraversal.traverse(compiler,    root,    this);    if    (MAKE_LOCAL_NAMES_UNIQUE)    {    MakeDeclaredNamesUnique    renamer    =    new    MakeDeclaredNamesUnique();    NodeTraversal    t    =    new    NodeTraversal(compiler,    renamer);    [BUGGY]        NodeTraversal.traverse(compiler,    renamer);    [BUGGY]    t.traverseRoots(externs,    root);    }    removeDuplicateDeclarations(root);    new    PropogateConstantAnnotations(compiler,    assertOnChange)    .process(externs,    root);    }    [CLASS]    Normalize    PropogateConstantAnnotations    VerifyConstants    DuplicateDeclarationHandler    ScopeTicklingCallback    [METHOD]    process    [RETURN_TYPE]    void    Node    externs    Node    root    [VARIABLES]    AbstractCompiler    compiler    MakeDeclaredNamesUnique    renamer    boolean    CONVERT_WHILE_TO_FOR    MAKE_LOCAL_NAMES_UNIQUE    assertOnChange    checkUserDeclarations    forbidChanges    Map    constantMap    NodeTraversal    t    Node    externs    root    	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	92	92	1	replace	NodeTraversal.traverse(compiler,  externs,  renamer);	      NodeTraversal.traverse(compiler,    renamer);    	plausible		16	0
