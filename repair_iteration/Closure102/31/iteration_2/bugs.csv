bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  v  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getLastChild();	      Node    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
2	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  v  =  parent.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  parent.getFirstChild();	      Node    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
3	[BUG]  [BUGGY]  Node  v  =  n.getNext();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  v  =  n.getNext();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getNext();	      Node    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
4	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	14	13	replace
5	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	14	13	replace
6	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
7	[BUG]  [BUGGY]  Node  n  =  t.getFirstChild();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  t.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  t.getFirstChild();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  parent.getLastChild();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  NodeUtil.reportCodeChange();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  NodeUtil.reportCodeChange();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.reportCodeChange();	      Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  n.reportCodeChange();  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  n.reportCodeChange();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	n.reportCodeChange();	      Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  Node.reportCodeChange();  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node.reportCodeChange();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node.reportCodeChange();	      Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(parent);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  getVarDeclarations(parent);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(parent);	      Node    n    =    getVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
13	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n,  parent);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  getVarDeclarations(n,  parent);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n,  parent);	      Node    n    =    getVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
14	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n.getFirstChild());  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  getVarDeclarations(n.getFirstChild());  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n.getFirstChild());	      Node    n    =    getVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
15	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n.getLastChild());  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  getVarDeclarations(n.getLastChild());  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n.getLastChild());	      Node    n    =    getVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
16	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n.getString());  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  getVarDeclarations(n.getString());  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n.getString());	      Node    n    =    getVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
17	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
18	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
19	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  n.getType()!=  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)&&  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
20	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	7	None	add
21	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  >=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  >=  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)&&  n.getType()  >=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
22	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  parent.getNext();	      Node    n    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  n.getNext();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  n.getNext();	      Node    n    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	22	13	add
25	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	22	13	add
26	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
27	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
28	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
29	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
30	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
31	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  n.getLastChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  node.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    v    =    n.getFirstChild();    Node  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	18	None	add
34	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    v    =    n.getFirstChild();    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	18	None	add
35	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  n.getLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    v    =    n.getFirstChild();    Node  v  =  n.getLastChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	18	None	add
36	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    v    =    n.getFirstChild();    Node  v  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	18	None	add
37	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	        Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	18	13	add
38	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	18	13	add
39	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  v  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    v    =    n.getFirstChild();    Node  n  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	18	None	add
40	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
41	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
42	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
43	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
44	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
45	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
46	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  If  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  If  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    If  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
47	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(n!=  null);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n!=  null);	      Preconditions.checkState(arguments!=    null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(parent!=  null);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent!=  null);	      Preconditions.checkState(arguments!=    null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(arguments  ==  null);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(arguments  ==  null);	      Preconditions.checkState(arguments!=    null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(array!=  null);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(array!=  null);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(array!=  null);	      Preconditions.checkState(arguments!=    null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
51	[BUG]  [BUGGY]      Node  var  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  var  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    var    =    n.getFirstChild();    Node  var  =  n.getFirstChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	20	None	add
52	[BUG]  [BUGGY]      Node  var  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  var  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    var    =    n.getFirstChild();    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	20	None	add
53	[BUG]  [BUGGY]      Node  var  =  n.getFirstChild();  Node  var  =  n.getLastChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  var  =  n.getFirstChild();  Node  var  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    var    =    n.getFirstChild();    Node  var  =  n.getLastChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	20	None	add
54	[BUG]  [BUGGY]      Node  var  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  var  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    var    =    n.getFirstChild();    Node  n  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	20	None	add
55	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  var  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	        Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	20	13	add
56	[BUG]  [BUGGY]      Node  var  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  var  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	20	13	add
57	[BUG]  [BUGGY]      Node  var  =  n.getFirstChild();  FunctionNode  var  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  var  =  n.getFirstChild();  FunctionNode  var  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    var    =    n.getFirstChild();    FunctionNode  var  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
58	[BUG]  [BUGGY]  if(NodeUtil.isInstance(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if(NodeUtil.isInstance(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(parent)||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.isInstance(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if(NodeUtil.isInstance(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(n)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isInstance(n)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if(NodeUtil.isInstance(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(n)&&  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
61	[BUG]  [BUGGY]  if(NodeUtil.isInstance(n)&&  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if(NodeUtil.isInstance(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(n)&&  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
62	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	16	1	replace
63	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	16	1	replace
64	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	13	replace
65	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	16	13	replace
66	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
67	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
68	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
69	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
70	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
71	[BUG]  [BUGGY]  Node  var  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  var  =  n.getLastChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getLastChild();	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  var  =  parent.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  parent.getFirstChild();	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
73	[BUG]  [BUGGY]  Node  var  =  n.getNext();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  var  =  n.getNext();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getNext();	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
74	[BUG]  [BUGGY]  Node  var  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  var  =  node.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  node.getFirstChild();	      Node    var    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
75	[BUG]  [BUGGY]  Node  n  =  t.getParent();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  t.getParent();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  t.getParent();	      Node    n    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
80	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclarations(n)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclarations(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclarations(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
81	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclarations(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclarations(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclarations(parent)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
82	[BUG]  [BUGGY]  if  (NodeUtil.isInitializer(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isInitializer(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isInitializer(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isInitializer(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
83	[BUG]  [BUGGY]  if  (NodeUtil.isInitializer(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isInitializer(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isInitializer(parent)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isInitializer(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
84	[BUG]  [BUGGY]  if  (NodeUtil.isInitializer(n)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isInitializer(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isInitializer(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isInitializer(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
85	[BUG]  [BUGGY]  Node  v  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  v  =  node.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  node.getFirstChild();	      Node    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
86	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclarations(n)&&  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclarations(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclarations(n)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclarations(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
87	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	8	13	replace
88	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	8	13	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
90	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
91	[BUG]  [BUGGY]  Node  n  =  normalizeVarDeclarations(n);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  normalizeVarDeclarations(n);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeVarDeclarations(n);	      Node    n    =    getVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
92	[BUG]  [BUGGY]  if(NodeUtil.isInstance(parent)&&  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if(NodeUtil.isInstance(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(parent)&&  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
93	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  not  a  statement	13	None	add
94	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
95	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
96	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
97	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  var  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	        Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	20	1	add
98	[BUG]  [BUGGY]      Node  var  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  var  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	20	1	add
99	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));	      Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
100	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	      Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
101	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));	      Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
102	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));	      Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
103	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	14	13	replace
104	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	14	13	replace
105	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  node.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  node.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    v    =    n.getFirstChild();    Node  v  =  node.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	18	None	add
106	[BUG]  [BUGGY]  Node  n  =  node.getParent();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Node  n  =  node.getParent();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  node.getParent();	      Node    n    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
107	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  not  a  statement	15	None	add
108	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  	non-compiled	[CE]  not  a  statement	15	None	add
109	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	      Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
111	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  v  =  n.getFirstChild();  v  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	        Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	18	1	add
112	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  v  =  n.getFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  v  =  n.getFirstChild();  v  =  n.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	18	1	add
113	[BUG]  [BUGGY]      Node  var  =  n.getFirstChild();  Node  var  =  no.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Node  var  =  n.getFirstChild();  Node  var  =  no.getFirstChild();  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Node    var    =    n.getFirstChild();    Node  var  =  no.getFirstChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	20	None	add
114	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  not  a  statement	7	None	add
115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	compilable	  [FE]  RuntimeException  	22	13	add
116	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	compilable	  [FE]  RuntimeException  	22	13	add
117	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	22	13	add
118	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	22	13	add
119	[BUG]  [BUGGY]  Preconditions.checkState(args!=  null);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }      [BUGGY]  Preconditions.checkState(args!=  null);  [BUGGY]    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(args!=  null);	      Preconditions.checkState(arguments!=    null);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
