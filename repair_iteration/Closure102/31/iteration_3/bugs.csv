bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
2	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
3	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
4	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
5	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
6	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
7	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
8	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
9	[BUG]  [BUGGY]  if(NodeUtil.isInstance(parent)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInstance(parent)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(parent)&&  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(parent)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.isInstance(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInstance(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(parent)||  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(parent)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
11	[BUG]  [BUGGY]  if  (NodeUtil.isInitializer(parent)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isInitializer(parent)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isInitializer(parent)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isInitializer(parent)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
12	[BUG]  [BUGGY]  if  (NodeUtil.isInitializer(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isInitializer(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isInitializer(parent)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isInitializer(parent)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
13	[BUG]  [BUGGY]  Node  var  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  parent.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  parent.getLastChild();	  Node    var    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
14	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(parent)||    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
15	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(parent)||    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(parent)||  parent.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	103	None	add
16	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  If  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  If  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(parent)||    parent.getType()    ==    Token.LABEL)    {    If  (NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	103	None	add
17	[BUG]  [BUGGY]  Node  v  =  parent.getNext();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  parent.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  parent.getNext();	  Node    v    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  Node  v  =  n.getNext()  ||  parent.getType()  ==  Token.FUNCTION;  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getNext()  ||  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getNext()  ||  parent.getType()  ==  Token.FUNCTION;	  Node    v    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  Node  n  =  n.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
22	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)||    parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	replace
23	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)||    parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	replace
24	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)||    parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	replace
25	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)||    parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	42	1	replace
26	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	19	13	replace
27	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.LABEL)  {  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	19	13	replace
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)&&  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(parent)&&  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	19	13	replace
29	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)&&  n.getType()!=  Token.LABEL)  {  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)&&  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(parent)&&  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	19	13	replace
30	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	19	13	replace
31	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	19	13	replace
32	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
33	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.isInitializerDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializerDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializerDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
35	[BUG]  [BUGGY]  Node  n  =  normalizeVarDeclarations(n,  parent);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeVarDeclarations(n,  parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeVarDeclarations(n,  parent);	  Node    n    =    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
36	[BUG]  [BUGGY]  Node  n  =  normalizeVarDeclarations(parent);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeVarDeclarations(parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeVarDeclarations(parent);	  Node    n    =    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
37	[BUG]  [BUGGY]  Node  n  =  normalizeNodeDeclarations(n);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeNodeDeclarations(n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeNodeDeclarations(n);	  Node    n    =    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
38	[BUG]  [BUGGY]  Node  n  =  normalizeVarDeclarations(t,  n);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeVarDeclarations(t,  n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeVarDeclarations(t,  n);	  Node    n    =    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
39	[BUG]  [BUGGY]  Node  n  =  normalizeDeclarations(n);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeDeclarations(n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeDeclarations(n);	  Node    n    =    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
40	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
41	[BUG]  [BUGGY]  if(NodeUtil.isInitializer(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializer(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializer(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
42	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
43	[BUG]  [BUGGY]  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
44	[BUG]  [BUGGY]  Node  v  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  parent.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  parent.getLastChild();	  Node    v    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if  (NodeUtil.isStatementBlock(parent)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	104	13	replace
46	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isStatementBlock(parent)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	104	13	replace
47	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	69	13	replace
48	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	69	13	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDe  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDe  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDe	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ';'  expected	118	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  ';'  expected	118	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
53	[BUG]  [BUGGY]  n.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  n.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	n.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));	  n.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
54	[BUG]  [BUGGY]  n.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  n.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	n.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  n.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  n.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  n.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	n.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));	  n.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
56	[BUG]  [BUGGY]  n.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  illegal  start  of  type  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  n.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	n.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	  n.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
57	[BUG]  [BUGGY]  Node  var  =  no.getFirstChild();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  no.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  no.getFirstChild();	          Node    var    =    n.getFirstChild();    Node    var    =    no.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	          Node    var    =    n.getFirstChild();    Node    var    =    no.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
59	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
60	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  parent,  CONVERT_WHILE_TO_FOR));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
61	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [CE]  illegal  start  of  type  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  CONVERT_WHILE_TO_FOR));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
62	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));  [CE]  illegal  start  of  type  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR,  arguments));	  Context.report(JSError.make(t,    n,    CONVERT_WHILE_TO_FOR));    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(array  ==  null);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(array  ==  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(array  ==  null);	  Preconditions.checkState(array!=    null);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
64	[BUG]  [BUGGY]  Node  n  =  t.getLastChild();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  t.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  t.getLastChild();	  Node    n    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  Node  v  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getFirstChild();  Node  v  =  parent.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getFirstChild();  Node  v  =  parent.getLastChild();	          Node    v    =    n.getFirstChild();    Node    v    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(n  ==  null);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n  ==  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n  ==  null);	  Preconditions.checkState(n!=    null);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent  ==  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent  ==  null);	  Preconditions.checkState(n!=    null);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(n!=  parent);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n!=  parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n!=  parent);	  Preconditions.checkState(n!=    null);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
69	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  parent.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getParent();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
70	[BUG]  [BUGGY]  Node  n  =  n.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  n.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  n.getParent();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getParent();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
71	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	117	13	add
72	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	117	13	add
73	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	117	None	add
74	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	non-compiled	[CE]  ';'  expected	117	None	add
75	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	compilable	  [FE]  RuntimeException  	117	13	add
76	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	compilable	  [FE]  RuntimeException  	117	13	add
77	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	117	13	add
78	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	117	13	add
79	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	117	13	add
80	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	117	13	add
81	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
82	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  parent.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
83	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
84	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getLastChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
85	[BUG]  [BUGGY]  Node  n  =  node.getNext();  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  node.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  node.getNext();	  Node    n    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
89	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.removeChild(parent);	  NodeUtil.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
90	[BUG]  [BUGGY]  NodeUtil.reportError(t,  n,  NON_GLOBAL_NAMES_UNIQUE);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.reportError(t,  n,  NON_GLOBAL_NAMES_UNIQUE);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.reportError(t,  n,  NON_GLOBAL_NAMES_UNIQUE);	  NodeUtil.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  NodeUtil.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));	  NodeUtil.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
92	[BUG]  [BUGGY]  NodeUtil.reportError(t,  n,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.reportError(t,  n,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.reportError(t,  n,  MAKE_LOCAL_NAMES_UNIQUE);	  NodeUtil.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeDeclarations);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeDeclarations);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeDeclarations);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeArguments(n));  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeArguments(n));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeArguments(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  arguments);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  arguments);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
98	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
99	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	62	None	add
100	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)&&  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
101	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
102	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  >=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  >=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  >=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
103	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  Node  var  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  n.getFirstChild();  Node  var  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  n.getFirstChild();  Node  var  =  n.getLastChild();	          Node    var    =    n.getFirstChild();    Node    var    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
104	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  Node  var  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  Node  var  =  parent.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  Node  var  =  parent.getLastChild();	          Node    var    =    n.getFirstChild();    Node    var    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
105	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getParent();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
106	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(parent)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
107	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  If  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  If  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(parent)&&    n.getType()    ==    Token.LABEL)    {    If  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	87	None	add
108	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(parent)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(parent)&&  n.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	87	None	add
109	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	37	None	add
110	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getLastChild();  n  =  n.getLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getLastChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	37	None	add
111	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	37	None	add
112	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	37	None	add
113	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getLastChild();  n  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getLastChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	37	None	add
114	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	non-compiled	[CE]  ';'  expected	115	None	add
115	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	compilable	  [FE]  RuntimeException  	115	13	add
116	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	compilable	  [FE]  RuntimeException  	115	13	add
117	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	115	13	add
118	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	115	13	add
119	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	115	13	add
120	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	115	13	add
121	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	115	13	add
122	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	115	13	add
123	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if  (NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	63	1	replace
124	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	63	1	replace
125	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
126	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)&&  parent.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
127	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  >=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  >=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  >=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
128	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  Node  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getLastChild();  Node  n  =  parent.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getLastChild();  Node  n  =  parent.getFirstChild();	          Node    v    =    n.getFirstChild();    Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(parent))    {    	compilable	  [FE]  RuntimeException  	96	13	replace
130	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(parent))    {    	compilable	  [FE]  RuntimeException  	96	13	replace
131	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(parent))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	96	1	replace
132	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(parent))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	96	1	replace
133	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(parent))    {    	compilable	  [FE]  RuntimeException  	96	13	replace
134	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(parent))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(parent))    {    	compilable	  [FE]  RuntimeException  	96	13	replace
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(parent))    {    	compilable	  [FE]  RuntimeException  	96	13	replace
136	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(parent))    {    	compilable	  [FE]  RuntimeException  	96	13	replace
137	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n,  parent,  arguments);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n,  parent,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n,  parent,  arguments);	  Node    n    =    getVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
138	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(t,  n,  parent);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(t,  n,  parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(t,  n,  parent);	  Node    n    =    getVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
139	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n,  parent,  argumentCount);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n,  parent,  argumentCount);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n,  parent,  argumentCount);	  Node    n    =    getVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
140	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(t,  n);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(t,  n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(t,  n);	  Node    n    =    getVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
141	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n,  parent,  argument);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n,  parent,  argument);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n,  parent,  argument);	  Node    n    =    getVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
142	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  v  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getFirstChild();  v  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getFirstChild();  v  =  n.getLastChild();	          Node    v    =    n.getFirstChild();    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
143	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  v  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  parent.getFirstChild();  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  parent.getFirstChild();  v  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
144	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  v  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getLastChild();  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getLastChild();  v  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
145	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n.getString(),  arguments);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n.getString(),  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n.getString(),  arguments);	  Node    n    =    getVarDeclarations(n.getString());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
146	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n.getString(),  parent);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n.getString(),  parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n.getString(),  parent);	  Node    n    =    getVarDeclarations(n.getString());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
147	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(parent.getString());  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(parent.getString());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(parent.getString());	  Node    n    =    getVarDeclarations(n.getString());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
148	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n.getString(),  argument);  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n.getString(),  argument);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n.getString(),  argument);	  Node    n    =    getVarDeclarations(n.getString());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
150	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
151	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()!=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)||  parent.getType()!=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
152	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  If  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  If  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.LABEL)    {    If  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
153	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  >=  Token.LABEL)  {  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  >=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  >=  Token.LABEL)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
154	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  n  =  n.getLastChild();	          Node    var    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
155	[BUG]  [BUGGY]  Node  var  =  n.getLastChild();  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getLastChild();  n  =  n.getFirstChild();	          Node    var    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
156	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  n  =  parent.getFirstChild();	          Node    var    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
157	[BUG]  [BUGGY]  Node  var  =  n.getLastChild();  n  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getLastChild();  n  =  n.getLastChild();	          Node    var    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
158	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  n  =  n.getNext();  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  n  =  n.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  n  =  n.getNext();	          Node    var    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
159	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  parent));  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  parent));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments,  parent));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
160	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argumentNames));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
161	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  arguments,  MAKE_LOCAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
162	[BUG]  [BUGGY]  Node  var  =  parent.getNext();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  parent.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  parent.getNext();	  Node    var    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
163	[BUG]  [BUGGY]  Node  var  =  n.getParent();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getParent();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getParent();	  Node    var    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
164	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        Node    v    =    n.getFirstChild();    Node  var  =  n.getFirstChild();  Node  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	97	None	add
165	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  Node  v  =  n.getLastChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  Node  v  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        Node    v    =    n.getFirstChild();    Node  var  =  n.getFirstChild();  Node  v  =  n.getLastChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	97	None	add
166	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        Node    v    =    n.getFirstChild();    Node  var  =  n.getFirstChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	97	None	add
167	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  var  =  n.getLastChild();  Node  v  =  n.getLastChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  var  =  n.getLastChild();  Node  v  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        Node    v    =    n.getFirstChild();    Node  var  =  n.getLastChild();  Node  v  =  n.getLastChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	97	None	add
168	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        Node    v    =    n.getFirstChild();    Node  n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	97	None	add
169	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        Node    v    =    n.getFirstChild();    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	97	None	add
170	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  parent));  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  parent));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments,  parent));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
171	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  STRICT_MODULE_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
172	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments));  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  INVALID_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
173	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	20	None	replace
174	[BUG]  [BUGGY]  AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	AssertionFailedError:  expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	20	None	replace
175	[BUG]  [BUGGY]  AssertionFailedError:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  AssertionFailedError:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	AssertionFailedError:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	20	None	replace
176	[BUG]  [BUGGY]  AssertionFailedError:  expected  =  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  AssertionFailedError:  expected  =  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	AssertionFailedError:  expected  =  function  f()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  ';'  expected	20	None	replace
177	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	AssertionFailedError:  Expected:  function  F()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	20	None	replace
178	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	93	None	replace
179	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	93	None	replace
180	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(n)||  parent.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	93	None	replace
181	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	93	None	replace
182	[BUG]  [BUGGY]  if(NodeUtil.isInstance(n)&&  parent.getType()!=  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInstance(n)&&  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(n)&&  parent.getType()!=  Token.LABEL)  {	  if(NodeUtil.isInstance(n)&&    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
183	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  v  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	111	None	add
184	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  v  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    Node  n  =  n.getFirstChild();  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	111	None	add
185	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  v  =  n.getLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  v  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  v  =  n.getLastChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	111	None	add
186	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  n.getLastChild();  v  =  n.getLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  n.getLastChild();  v  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    Node  v  =  n.getLastChild();  v  =  n.getLastChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	111	None	add
187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  n  =  n.getFirstChild();  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    n  =  n.getFirstChild();  v  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	111	13	add
188	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  n  =  n.getFirstChild();  v  =  n.getFirstChild();  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  n  =  n.getFirstChild();  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    n  =  n.getFirstChild();  v  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	111	13	add
189	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  v  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    Node  n  =  parent.getFirstChild();  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	111	None	add
190	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  var  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	55	None	add
191	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  var  =  n.getLastChild();  n  =  n.getLastChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  var  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  var  =  n.getLastChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	55	None	add
192	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	55	None	add
193	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  var  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  var  =  n.getFirstChild();  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	55	None	add
194	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  var  =  n.getLastChild();  n  =  n.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  var  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  var  =  n.getLastChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	55	None	add
195	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
196	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	18	13	replace
197	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
198	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  argument));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
199	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  n  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getFirstChild();  n  =  n.getLastChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
200	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
201	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getLastChild();  n  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
202	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getFirstChild();  n  =  parent.getFirstChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
203	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  n  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getLastChild();  n  =  n.getLastChild();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
204	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  node.getLastChild();	  Node    n    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(n  >=  null);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n  >=  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n  >=  null);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
206	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclarations(parent)&&  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclarations(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclarations(parent)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclarations(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    	non-compiled	[CE]  ';'  expected	116	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    	non-compiled	[CE]  ';'  expected	116	None	replace
210	[BUG]  [BUGGY]  if(NodeUtil.isInitializer(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializer(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializer(n)&&  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(t.getType()  ==  Token.NAME,  n.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  t.getModule());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(t.getModule()  ==  Token.NAME,  n.getType());  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(t.getModule()  ==  Token.NAME,  n.getType());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(t.getModule()  ==  Token.NAME,  n.getType());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
215	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclarations(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclarations(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclarations(parent)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclarations(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
216	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclarations(n)||  parent.getType()!=  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclarations(n)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclarations(n)||  parent.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isVarDeclarations(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
217	[BUG]  [BUGGY]  FunctionNode  var  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  FunctionNode  var  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	FunctionNode  var  =  n.getFirstChild();	          Node    var    =    n.getFirstChild();    FunctionNode    var    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
218	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  FunctionNode  var  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  parent.getFirstChild();  FunctionNode  var  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  parent.getFirstChild();  FunctionNode  var  =  n.getFirstChild();	          Node    var    =    n.getFirstChild();    FunctionNode    var    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
219	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  FunctionNode  var  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  FunctionNode  var  =  parent.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  FunctionNode  var  =  parent.getFirstChild();	          Node    var    =    n.getFirstChild();    FunctionNode    var    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
220	[BUG]  [BUGGY]  Node  var  =  n.getLastChild();  FunctionNode  var  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getLastChild();  FunctionNode  var  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getLastChild();  FunctionNode  var  =  n.getFirstChild();	          Node    var    =    n.getFirstChild();    FunctionNode    var    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
221	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(parent.getFirstChild());  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(parent.getFirstChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(parent.getFirstChild());	  Node    n    =    getVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
222	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n.getFirstChild(),  parent);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n.getFirstChild(),  parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n.getFirstChild(),  parent);	  Node    n    =    getVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
223	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n.getFirstChild(),  arguments);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n.getFirstChild(),  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n.getFirstChild(),  arguments);	  Node    n    =    getVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
224	[BUG]  [BUGGY]  Node  var  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  node.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  node.getLastChild();	  Node    var    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
225	[BUG]  [BUGGY]  Node  n  =  t.getNext();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  t.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  t.getNext();	  Node    n    =    t.getParent();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments.length);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments.length);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(arguments!=  null,  arguments.length);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null,  arguments.length);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(arguments  ==  null,  arguments.length);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(arguments  ==  null,  arguments.length);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkArgument(arguments!=  null);  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkArgument(arguments!=  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkArgument(arguments!=  null);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
229	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	replace
230	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	replace
231	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)||  n.getType()!=  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	replace
232	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()!=  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  n.getType()!=  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  n.getType()!=  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	replace
233	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
234	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  Node  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getLastChild();  Node  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getLastChild();  Node  n  =  n.getFirstChild();	          Node    v    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
235	[BUG]  [BUGGY]  Node  n  =  findVarDeclarations(n);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  findVarDeclarations(n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  findVarDeclarations(n);	  Node    n    =    getVarDeclarations(parent);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
236	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
237	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  NON_GLOBAL_NAMES_UNIQUE));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
240	[BUG]  [BUGGY]  if(NodeUtil.isInstance(n,  parent)&&  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInstance(n,  parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(n,  parent)&&  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(args  ==  null);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(args  ==  null);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(args  ==  null);	  Preconditions.checkState(args!=    null);    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
242	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(parent)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	45	1	replace
243	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(parent)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	45	1	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
248	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	43	13	replace
249	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	43	13	replace
250	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	43	13	replace
251	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	43	13	replace
252	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getFirstChild();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
253	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(parent)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	92	1	replace
254	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(parent)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	92	1	replace
255	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isAssign(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isAssign(n)&&  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(parent)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	92	1	replace
256	[BUG]  [BUGGY]  if(NodeUtil.isAssign(n)&&  parent.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isAssign(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isAssign(n)&&  parent.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(parent)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	92	1	replace
257	[BUG]  [BUGGY]  Node  var  =  n.getLastChild();  Node  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getLastChild();  Node  n  =  parent.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getLastChild();  Node  n  =  parent.getFirstChild();	          Node    var    =    n.getFirstChild();    Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
258	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  Node  n  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  Node  n  =  parent.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  Node  n  =  parent.getLastChild();	          Node    var    =    n.getFirstChild();    Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
259	[BUG]  [BUGGY]  Node  v  =  node.getLastChild();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  node.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  node.getLastChild();	  Node    v    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
260	[BUG]  [BUGGY]  If  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  If  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	If  (NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    If    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
261	[BUG]  [BUGGY]  If  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  If  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	If  (NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    If    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
262	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(parent.getLastChild());  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(parent.getLastChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(parent.getLastChild());	  Node    n    =    getVarDeclarations(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
263	[BUG]  [BUGGY]  Node  n  =  normalizeVarDeclarations(n.getLastChild());  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeVarDeclarations(n.getLastChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeVarDeclarations(n.getLastChild());	  Node    n    =    getVarDeclarations(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
264	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  Node  v  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  Node  v  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  Node  v  =  n.getLastChild();	          Node    var    =    n.getFirstChild();    Node    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
265	[BUG]  [BUGGY]  Node  var  =  n.getLastChild();  Node  v  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getLastChild();  Node  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getLastChild();  Node  v  =  n.getFirstChild();	          Node    var    =    n.getFirstChild();    Node    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
266	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();	          Node    var    =    n.getFirstChild();    Node    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
267	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  Node  v  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  parent.getFirstChild();  Node  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  parent.getFirstChild();  Node  v  =  n.getFirstChild();	          Node    var    =    n.getFirstChild();    Node    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
268	[BUG]  [BUGGY]  AssertionFailedError:  Function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  AssertionFailedError:  Function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	AssertionFailedError:  Function  f()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	108	None	replace
269	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	114	None	replace
270	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	114	None	replace
271	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	114	None	replace
272	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	114	None	replace
273	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	107	None	replace
274	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	107	None	replace
275	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	107	None	replace
276	[BUG]  [BUGGY]  NodeUtil.isInitializer(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isInitializer(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isInitializer(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	107	None	replace
277	[BUG]  [BUGGY]  NodeUtil.isConstructorDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isConstructorDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isConstructorDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	107	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
281	[BUG]  [BUGGY]  Node.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));	  Node.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
282	[BUG]  [BUGGY]  Node.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));	  Node.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
283	[BUG]  [BUGGY]  Node.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  illegal  start  of  type  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  Node.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
284	[BUG]  [BUGGY]  Node.removeChild(parent);  [CE]  illegal  start  of  type  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node.removeChild(parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node.removeChild(parent);	  Node.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
285	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	95	1	replace
286	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	95	1	replace
287	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n))    {    	compilable	  [FE]  RuntimeException  	95	13	replace
288	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [FE]  RuntimeException  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL  ||  NodeUtil.isStatementBlock(n))  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(n))    {    	compilable	  [FE]  RuntimeException  	95	13	replace
289	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclarations(parent)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclarations(parent)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isVarDeclarations(parent)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclarations(n)&&    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
290	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	24	13	add
291	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	24	13	add
292	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	24	13	add
293	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL);	  	compilable	  [FE]  RuntimeException  	24	13	add
294	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	24	13	add
295	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	24	13	add
296	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	non-compiled	[CE]  ';'  expected	24	None	add
297	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	24	13	add
298	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	24	13	add
299	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	  	non-compiled	[CE]  ';'  expected	24	None	add
300	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  n  =  var.getFirstChild();  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  n  =  var.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  n  =  var.getFirstChild();	          Node    var    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
301	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  n  =  var.getFirstChild();  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  parent.getFirstChild();  n  =  var.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  parent.getFirstChild();  n  =  var.getFirstChild();	          Node    var    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
302	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  n  =  var.getLastChild();  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  n  =  var.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  n  =  var.getLastChild();	          Node    var    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
303	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	19	1	replace
304	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	19	1	replace
305	[BUG]  [BUGGY]  if(NodeUtil.isInitializer(parent)&&  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializer(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializer(parent)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
306	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	19	1	replace
307	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	19	1	replace
308	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	replace
309	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	replace
310	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	replace
311	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	68	1	replace
312	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	108	None	replace
313	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	108	None	replace
314	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(argu  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(argu  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(argu	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	108	None	replace
315	[BUG]  [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	108	None	replace
316	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Node        var        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	55	13	add
317	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	55	13	add
318	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	24	13	add
319	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	24	13	add
320	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	24	13	add
321	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	24	13	add
322	[BUG]  [BUGGY]  if(NodeUtil.isForInitializer(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isForInitializer(n)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isForInitializer(n)&&  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
323	[BUG]  [BUGGY]  if(NodeUtil.isForInitializer(parent)&&  n.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isForInitializer(parent)&&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isForInitializer(parent)&&  n.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
324	[BUG]  [BUGGY]  Node.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));	  Node.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
325	[BUG]  [BUGGY]  Node.report(JSError.make(t,  n,  NON_GLOBAL_NAME));  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node.report(JSError.make(t,  n,  NON_GLOBAL_NAME));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node.report(JSError.make(t,  n,  NON_GLOBAL_NAME));	  Node.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
326	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Node  n  =  parent.getParent();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Node  n  =  parent.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	117	None	add
327	[BUG]  [BUGGY]  NodeUtil.reportCodeChange(this,  n);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.reportCodeChange(this,  n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.reportCodeChange(this,  n);	  NodeUtil.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
328	[BUG]  [BUGGY]  NodeUtil.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));	  NodeUtil.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
329	[BUG]  [BUGGY]  NodeUtil.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));	  NodeUtil.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
330	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n,  parent,  t);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n,  parent,  t);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n,  parent,  t);	  Node    n    =    getVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
331	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(parent,  n);  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(parent,  n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(parent,  n);	  Node    n    =    getVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
332	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n,  parent.getParent());  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n,  parent.getParent());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n,  parent.getParent());	  Node    n    =    getVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
333	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  parent,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  t.getModule()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    t.getModule());    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
335	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  Node  var  =  var.getLastChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  Node  var  =  var.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  Node  var  =  var.getLastChild();	          Node    var    =    n.getFirstChild();    Node    var    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
336	[BUG]  [BUGGY]  if(NodeUtil.isInstance(parent)&&  n!=  parent.getType()  ||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInstance(parent)&&  n!=  parent.getType()  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(parent)&&  n!=  parent.getType()  ||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(parent)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
337	[BUG]  [BUGGY]  if(NodeUtil.isInstance(parent)&&  n  ==  parent.getType()  ||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInstance(parent)&&  n  ==  parent.getType()  ||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(parent)&&  n  ==  parent.getType()  ||  n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(parent)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
338	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)||    parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	42	13	replace
339	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)||    parent.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	42	13	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(arguments!=  null,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(arguments!=  null,  arguments);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(arguments  ==  null,  arguments);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(arguments  ==  null,  arguments);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(arguments  ==  null,  arguments);	  Preconditions.checkState(arguments    ==    null);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
342	[BUG]  [BUGGY]  if(NodeUtil.isForInitializer(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isForInitializer(parent)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isForInitializer(parent)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(parent)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
343	[BUG]  [BUGGY]  if(NodeUtil.isForInitializer(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isForInitializer(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isForInitializer(parent)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(parent)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
344	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(parent)&&    n.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  not  a  statement	87	None	add
345	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if  (NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	65	13	replace
346	[BUG]  [BUGGY]  if  (NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isName(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	65	13	replace
347	[BUG]  [BUGGY]  n.report(JSError.make(t,  n,  parent));  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  n.report(JSError.make(t,  n,  parent));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	n.report(JSError.make(t,  n,  parent));	  n.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
348	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	20	None	replace
349	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(n)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	20	None	replace
350	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(argu  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(argu  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(argu	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	20	None	replace
351	[BUG]  [BUGGY]  NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  AssertionFailedError:  Expected:  function  f()  {  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	20	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
354	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  parent));  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  parent));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  parent));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
355	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMESPACE_ERROR,  arguments));  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMESPACE_ERROR,  arguments));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMESPACE_ERROR,  arguments));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
356	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
357	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
358	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
359	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	70	1	replace
360	[BUG]  [BUGGY]  Node  n  =  normalizeFunctionDeclarations(n);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeFunctionDeclarations(n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeFunctionDeclarations(n);	  Node    n    =    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
361	[BUG]  [BUGGY]  Node  n  =  normalizeUserDeclarations(n);  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeUserDeclarations(n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeUserDeclarations(n);	  Node    n    =    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
363	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  Node  v  =  v.getLastChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getFirstChild();  Node  v  =  v.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getFirstChild();  Node  v  =  v.getLastChild();	          Node    v    =    n.getFirstChild();    Node    v    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
364	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  v  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  v  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    Node  n  =  n.getFirstChild();  v  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	111	None	add
365	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    Node  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	111	None	add
366	[BUG]  [BUGGY]  Node  var  =  getVar(n.getFirstChild());  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  getVar(n.getFirstChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  getVar(n.getFirstChild());	  Node    var    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
367	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
368	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
369	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations(n));  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations(n));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations(n));	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
370	[BUG]  [BUGGY]  Node  var  =  n.getNext();  Node  v  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getNext();  Node  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getNext();  Node  v  =  n.getFirstChild();	          Node    var    =    n.getFirstChild();    Node    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
371	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(parent)||  parent.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(parent)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	45	13	replace
372	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()!=  Token.LABEL)  {  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(parent)||  parent.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(parent)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	45	13	replace
373	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(parent)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	45	13	replace
374	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {  [FE]  RuntimeException  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(parent)||  n.getType()!=  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(parent)||    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	45	13	replace
375	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)||    parent.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  not  a  statement	64	None	add
376	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  not  a  statement	62	None	add
377	[BUG]  [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.LABEL)  {  if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.SETPROP)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    if  (NodeUtil.isVarDeclaration(n)&&  n.getType()  ==  Token.SETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
378	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  n  =  parent.getParent();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    parent.getParent();    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
379	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  v  =  v.getFirstChild();  [CE]  illegal  start  of  type  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  parent.getFirstChild();  v  =  v.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  parent.getFirstChild();  v  =  v.getFirstChild();	          Node    v    =    n.getFirstChild();    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
380	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  v  =  v.getLastChild();  [CE]  illegal  start  of  type  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getFirstChild();  v  =  v.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getFirstChild();  v  =  v.getLastChild();	          Node    v    =    n.getFirstChild();    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
381	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  v  =  v.getFirstChild();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getLastChild();  v  =  v.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getLastChild();  v  =  v.getFirstChild();	          Node    v    =    n.getFirstChild();    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
382	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	66	1	replace
383	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	66	1	replace
384	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	66	1	replace
385	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	66	1	replace
386	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	66	13	replace
387	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [FE]  RuntimeException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)||  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  RuntimeException  	66	13	replace
388	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isName(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if  (NodeUtil.isName(n)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	63	1	replace
389	[BUG]  [BUGGY]  if  (NodeUtil.isName(n)&&  n.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isName(n)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if  (NodeUtil.isName(n)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)&&    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	63	1	replace
390	[BUG]  [BUGGY]  Node  n  =  normalizeNodeDeclarations(n.getLastChild());  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeNodeDeclarations(n.getLastChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeNodeDeclarations(n.getLastChild());	  Node    n    =    getVarDeclarations(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
391	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getLastChild();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
392	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	69	1	replace
393	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	69	1	replace
394	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	69	1	replace
395	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	69	1	replace
396	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	69	13	replace
397	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [FE]  RuntimeException  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  RuntimeException  	69	13	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
399	[BUG]  [BUGGY]  Node  var  =  n.getLastChild();  Node  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getLastChild();  Node  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getLastChild();  Node  n  =  n.getFirstChild();	          Node    var    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
400	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  parent.getFirstChild();  Node  n  =  n.getFirstChild();	          Node    var    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
401	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  parent,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
402	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  n);  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments),  n);	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
403	[BUG]  [BUGGY]  if(NodeUtil.isInstance(n)&&  normalizeVarDeclarations(n.getType()  ==  Token.LABEL)  {  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInstance(n)&&  normalizeVarDeclarations(n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(n)&&  normalizeVarDeclarations(n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ')'  expected	61	None	replace
404	[BUG]  [BUGGY]  Node  v  =  node.getNext();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  node.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  node.getNext();	  Node    v    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(parent);  }  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(parent);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(parent);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
407	[BUG]  [BUGGY]  Node  n  =  normalizeVarDeclarations(n.getString());  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeVarDeclarations(n.getString());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeVarDeclarations(n.getString());	  Node    n    =    getVarDeclarations(n.getString());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
408	[BUG]  [BUGGY]  if(NodeUtil.isInitializer(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializer(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializer(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
409	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
410	[BUG]  [BUGGY]  if(NodeUtil.isInitializer(parent)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializer(parent)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializer(parent)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
411	[BUG]  [BUGGY]  Node  v  =  n.getParent();  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getParent();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getParent();	  Node    v    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
412	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Node  n  =  parent.getParent();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    Node  n  =  parent.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	115	None	add
413	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	115	13	add
414	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	115	13	add
415	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
417	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  var  =  n.getLastChild();  Node  v  =  n.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  Node  var  =  n.getLastChild();  Node  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        Node    v    =    n.getFirstChild();    Node  var  =  n.getLastChild();  Node  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	97	None	add
418	[BUG]  [BUGGY]  NodeUtil.isInitializerDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isInitializerDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isInitializerDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	107	None	replace
419	[BUG]  [BUGGY]  NodeUtil.isInitializerDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isInitializerDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isInitializerDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	107	None	replace
420	[BUG]  [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	107	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
422	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	67	1	replace
423	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)||  NodeUtil.isFunctionDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	67	1	replace
424	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  Node  n  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getFirstChild();  Node  n  =  n.getLastChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getFirstChild();  Node  n  =  n.getLastChild();	          Node    v    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
425	[BUG]  [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if  (NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if    (NodeUtil.isStatementBlock(n)&&    parent.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {	  	non-compiled	[CE]  not  a  statement	4	None	add
426	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  node.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  node.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  node.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	37	None	add
427	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  FunctionNode  var  =  var.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  FunctionNode  var  =  var.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  FunctionNode  var  =  var.getFirstChild();	          Node    var    =    n.getFirstChild();    FunctionNode    var    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
428	[BUG]  [BUGGY]  Node  n  =  normalizeVarDeclarations(n.getFirstChild());  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeVarDeclarations(n.getFirstChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeVarDeclarations(n.getFirstChild());	  Node    n    =    getVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
429	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n.getFirstChild(),  n);  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n.getFirstChild(),  n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n.getFirstChild(),  n);	  Node    n    =    getVarDeclarations(n.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
430	[BUG]  [BUGGY]  Node  var  =  n.getLastChild();  n  =  var.getFirstChild();  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getLastChild();  n  =  var.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getLastChild();  n  =  var.getFirstChild();	          Node    var    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
432	[BUG]  [BUGGY]  Node  n  =  parent.removeFirstChild();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  parent.removeFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  parent.removeFirstChild();	  Node    n    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
433	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	97	None	add
434	[BUG]  [BUGGY]  if(NodeUtil.isInitializingDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializingDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializingDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
435	[BUG]  [BUGGY]  if(NodeUtil.isInitialize(n)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitialize(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitialize(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL    ||    NodeUtil.isStatementBlock(parent))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
436	[BUG]  [BUGGY]  Node  var  =  nodes.getFirstChild();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  nodes.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  nodes.getFirstChild();	          Node    var    =    n.getFirstChild();    Node    var    =    no.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
437	[BUG]  [BUGGY]  if(NodeUtil.isInitializingDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializingDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializingDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
438	[BUG]  [BUGGY]  NodeUtil.reportError(t,  n,  INVALID_NAMES_UNIQUE);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.reportError(t,  n,  INVALID_NAMES_UNIQUE);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.reportError(t,  n,  INVALID_NAMES_UNIQUE);	  NodeUtil.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
439	[BUG]  [BUGGY]  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);	  NodeUtil.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
440	[BUG]  [BUGGY]  NodeUtil.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.checkState(n.getType()  ==  Token.NAME);	  NodeUtil.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	          Node    v    =    n.getFirstChild();    Node    v    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
442	[BUG]  [BUGGY]  if(NodeUtil.isInitializingDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializingDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializingDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
443	[BUG]  [BUGGY]  if(NodeUtil.isInitializerDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializerDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializerDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
444	[BUG]  [BUGGY]  if(NodeUtil.isInitializingVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializingVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializingVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(parent)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
445	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]                  RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  n  =  n.getFirstChild();	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent.getFirstChild());	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
447	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	compilable	  [FE]  RuntimeException  	117	13	add
448	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	compilable	  [FE]  RuntimeException  	117	13	add
449	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  splitVarDeclarations(n);  }  Node  n  =  parent.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    splitVarDeclarations(n);    }    Node  n  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	117	None	add
450	[BUG]  [BUGGY]  Node  n  =  parent.getParentNode();  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  parent.getParentNode();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  parent.getParentNode();	  Node    n    =    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
451	[BUG]  [BUGGY]  if(NodeUtil.isInstance(n)&&  parent.getType()  ==  Token.LABEL  ||  arguments.size()  ==  1)  {  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInstance(n)&&  parent.getType()  ==  Token.LABEL  ||  arguments.size()  ==  1)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(n)&&  parent.getType()  ==  Token.LABEL  ||  arguments.size()  ==  1)  {	  if(NodeUtil.isInstance(n)&&    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeValues);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeValues);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeValues);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
453	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations(n);  [CE]  [FE]          RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations(n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeVarDeclarations(n);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  	76	None	replace
454	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeNames);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeNames);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  normalizeNames);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
455	[BUG]  [BUGGY]  Node  n  =  normalizeInitializerDeclarations(n);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  normalizeInitializerDeclarations(n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  normalizeInitializerDeclarations(n);	  Node    n    =    normalizeVarDeclarations(n);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
456	[BUG]  [BUGGY]  Node.report(n,  MAKE_LOCAL_NAMES_UNIQUE);  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node.report(n,  MAKE_LOCAL_NAMES_UNIQUE);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node.report(n,  MAKE_LOCAL_NAMES_UNIQUE);	  Node.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
457	[BUG]  [BUGGY]  Node.checkState(n.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node.checkState(n.getType()  ==  Token.NAME);	  Node.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
458	[BUG]  [BUGGY]  Node.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node.checkState(n.getType()  ==  Token.FUNCTION);	  Node.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
459	[BUG]  [BUGGY]  if(NodeUtil.isInitializingDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializingDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializingDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
460	[BUG]  [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)||  n.getType()  ==  Token.LABEL)  {  If(NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	67	None	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);	          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
462	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	24	13	add
463	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	24	13	add
464	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LIST);  [CE]  cannot  find  symbol  LIST  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LIST);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.LIST);	  	non-compiled	[CE]  cannot  find  symbol  LIST	24	None	add
465	[BUG]  [BUGGY]  Node  n  =  parent.getfirstChild();  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  parent.getfirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  parent.getfirstChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();	          Node    var    =    n.getFirstChild();    Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
468	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments),  n);	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE,    arguments));    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
469	[BUG]  [BUGGY]  NodeUtil.isInitializingDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  NodeUtil.isInitializingDeclaration(n)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	NodeUtil.isInitializingDeclaration(n)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    NodeUtil.isVarDeclaration(n)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	107	None	replace
470	[BUG]  [BUGGY]  Node  var  =  n.getfirstChild();  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getfirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getfirstChild();	  Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
471	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));  [CE]  illegal  start  of  type  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  argument));	  Context.report(JSError.make(t,    n,    NON_GLOBAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
472	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n.getString(),  t);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n.getString(),  t);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n.getString(),  t);	  Node    n    =    getVarDeclarations(n.getString());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
473	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  node.getFirstChild();  v  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  node.getFirstChild();  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    Node  v  =  node.getFirstChild();  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	111	None	add
474	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  v  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    v  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  v  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        v    =    n.getFirstChild();    Node  v  =  parent.getFirstChild();  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	111	None	add
475	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	19	1	replace
476	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isFunctionDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    if    (NodeUtil.isStatementBlock(n)&&    n.getType()!=    Token.LABEL)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	19	1	replace
477	[BUG]  [BUGGY]  Node  v  =  n.removeFirstChild();  [CE]  illegal  start  of  type  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.removeFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.removeFirstChild();	  Node    v    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
478	[BUG]  [BUGGY]  Preconditions.checkState(array.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(array.getType()  ==  Token.FUNCTION);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(array.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(array!=    null);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
479	[BUG]  [BUGGY]  Preconditions.checkState(array.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(array.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(array.getType()  ==  Token.VAR);	  Preconditions.checkState(array!=    null);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
480	[BUG]  [BUGGY]  Node  n  =  getVarDeclarations(n,  parent.getFirstChild());  [CE]  illegal  start  of  type  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  getVarDeclarations(n,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  getVarDeclarations(n,  parent.getFirstChild());	  Node    n    =    getVarDeclarations(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
481	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
482	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isVarDeclarations(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	41	None	replace
483	[BUG]  [BUGGY]  if(NodeUtil.isInstance(parent)&&  constantMap.get(n.getType()  ==  Token.LABEL)  {  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInstance(parent)&&  constantMap.get(n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(parent)&&  constantMap.get(n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(parent)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
484	[BUG]  [BUGGY]  if(NodeUtil.isInstance(parent)&&  normalizeVarDeclarations(n.getType()  ==  Token.LABEL)  {  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInstance(parent)&&  normalizeVarDeclarations(n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInstance(parent)&&  normalizeVarDeclarations(n.getType()  ==  Token.LABEL)  {	  if(NodeUtil.isInstance(parent)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ')'  expected	92	None	replace
485	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
486	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_INIT_ERROR,  arguments));  [CE]  illegal  start  of  type  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_INIT_ERROR,  arguments));  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_INIT_ERROR,  arguments));	  Context.report(JSError.make(t,    n,    MAKE_LOCAL_NAMES_UNIQUE));    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
487	[BUG]  [BUGGY]  Node  v  =  n.getFirstChild();  n  =  n.getNext();  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  n.getFirstChild();  n  =  n.getNext();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  n.getFirstChild();  n  =  n.getNext();	          Node    v    =    n.getFirstChild();    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
488	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
489	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isVarDeclaration(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)&&  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
490	[BUG]  [BUGGY]  if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isName(n)&&  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(n)&&  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    If(NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	18	None	replace
491	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Node        var        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	55	13	add
492	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	55	13	add
493	[BUG]  [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  var  =  parent.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    var    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  var  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        var        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  var  =  parent.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	55	None	add
494	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	93	None	replace
495	[BUG]  [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.LABEL)  {  NodeUtil.isStatementBlock(parent)||  parent.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    NodeUtil.isStatementBlock(n)||    parent.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  not  a  statement	93	None	replace
496	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  Preconditions.checkState(var.getType()  ==  Token.VAR);  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  var  =  n.getFirstChild();  Preconditions.checkState(var.getType()  ==  Token.VAR);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  var  =  n.getFirstChild();  Preconditions.checkState(var.getType()  ==  Token.VAR);	          Node    var    =    n.getFirstChild();    Node    var    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
497	[BUG]  [BUGGY]  Node  n  =  findVarDeclarations(n.getFirstChild());  [CE]  illegal  start  of  type  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  n  =  findVarDeclarations(n.getFirstChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  n  =  findVarDeclarations(n.getFirstChild());	  Node    n    =    getVarDeclarations(n.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
498	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	AssertionFailedError:  Expected:  function  f()  ==  arguments=Array.prototype.slice.call(arguments	  if    (NodeUtil.isStatementBlock(n)&&    n.getType()    ==    Token.LABEL)    {    AssertionFailedError:    Expected:    function    f()    {    arguments=Array.prototype.slice.call(arguments    	non-compiled	[CE]  not  a  statement	20	None	replace
499	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    Node  v  =  parent.getFirstChild();  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	37	None	add
500	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	37	13	add
501	[BUG]  [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Node        v        =        n.getFirstChild();        n    =    n.getFirstChild();    n  =  n.getFirstChild();  n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	37	13	add
502	[BUG]  [BUGGY]  Node  v  =  normalizeVarDeclarations(n.getFirstChild());  [CE]  illegal  start  of  type  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  normalizeVarDeclarations(n.getFirstChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  normalizeVarDeclarations(n.getFirstChild());	  Node    v    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
503	[BUG]  [BUGGY]  Node  v  =  normalizeVarDeclarations(n,  parent.getFirstChild());  [CE]  illegal  start  of  type  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  Node  v  =  normalizeVarDeclarations(n,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	Node  v  =  normalizeVarDeclarations(n,  parent.getFirstChild());	  Node    v    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
504	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  illegal  start  of  type  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  n.removeChild(parent);  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	n.removeChild(parent);	  n.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
505	[BUG]  [BUGGY]  if(NodeUtil.isInitializingDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]  if(NodeUtil.isInitializingDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {  [BUGGY]      extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	if(NodeUtil.isInitializingDeclaration(n)||  parent.getType()  ==  Token.LABEL)  {  If(NodeUtil.isStatementBlock(parent)||  n.getType()  ==  Token.LABEL)  {	  if    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    If    (NodeUtil.isStatementBlock(parent)||    n.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  ';'  expected	46	None	replace
506	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  Node  n  =  parent.getFirstChild();  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    Node  n  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	115	None	add
507	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	add	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	compilable	  [FE]  RuntimeException  	115	13	add
508	[BUG]  [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }        [BUGGY]          Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }  [BUGGY]      if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	258	258	1	replace	                Preconditions.checkState(n.getType()        ==        Token.NAME);        Preconditions.checkState(n.getType()    ==    Token.NAME);    if(NodeUtil.isStatementBlock(n)    ||    n.getType()    ==    Token.LABEL)    {    extractForInitializer(n,    null,    null);    }    if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.LABEL)  {  extractForInitializer(n,  null,  null);  }	  	compilable	  [FE]  RuntimeException  	115	13	add
