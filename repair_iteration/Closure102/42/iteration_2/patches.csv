bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR,  arguments);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	replace
5	[BUG]  [BUGGY]  For(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
6	[BUG]  [BUGGY]  For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
7	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
8	[BUG]  [BUGGY]  For(Node  c  =  n.getNext();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c  =  n.getNext();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c  =  n.getNext();  c!=  null;  c  =  c.next)  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	replace
9	[BUG]  [BUGGY]  Node  next  =  n.getLastChild().getNext();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getLastChild().getNext();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getLastChild().getNext();	  Node    next    =    n.getFirstChild().getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
10	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild().getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getFirstChild().getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getFirstChild().getLastChild();	  Node    next    =    n.getFirstChild().getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
11	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild().getParent();  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getFirstChild().getParent();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getFirstChild().getParent();	  Node    next    =    n.getFirstChild().getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
12	[BUG]  [BUGGY]  Node  c  =  node.removeFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  c  =  node.removeFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  c  =  node.removeFirstChild();	  Node    c    =    n.removeFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	58	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(c.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()!=    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()!=    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
15	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments,  c);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  arguments,  c);	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
16	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  c);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  c);	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
17	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments,  null);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  arguments,  null);	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
18	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(c.getType()  ==  Token.VAR,  arguments);	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
19	[BUG]  [BUGGY]  Node  c  =  n.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  c  =  n.getParent();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  c  =  n.getParent();	  Node    c    =    n.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
20	[BUG]  [BUGGY]  Node  c  =  n.getCurrentNode();  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  c  =  n.getCurrentNode();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  c  =  n.getCurrentNode();	  Node    c    =    n.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
21	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.VAR);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
22	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.VAR);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
23	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR,  arguments);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
24	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.VAR);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
25	[BUG]  [BUGGY]  Node  next  =  c.removeFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  c.removeFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  c.removeFirstChild();	  Node    next    =    n.removeFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION,  arguments);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
34	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.FUNCTION);	  Context.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
35	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.VAR);	  Context.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  c.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLineno());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLineno());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getLineno());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	45	None	replace
39	[BUG]  [BUGGY]  for(Node  c,  next  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  next  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  next  =  n.getLastChild();  c!=  null;  c  =  c.next)  {	  for(Node    c,    c    =    n.getLastChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	29	None	replace
40	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments,  c);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments,  c);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
41	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments,  null);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments,  null);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments,  null);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
42	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  arguments);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
43	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  argument);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  argument);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  argument);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
44	[BUG]  [BUGGY]  for(Node  next  =  c.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  next  =  c.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  next  =  c.getFirstChild();  c!=  null;  c  =  next.getNext())  {	  for(Node    c    =    node.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
45	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
46	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
47	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
48	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT,  arguments);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
49	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
50	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
51	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
52	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME,  arguments);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
53	[BUG]  [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.parent)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.parent)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.parent)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.parent)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
54	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.parent)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
55	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.parent)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.parent)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.parent)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.parent)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
56	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.child)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.child)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.child)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.parent)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	61	None	replace
57	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
58	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
59	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT,  arguments);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
60	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  reached  end  of  file  while  parsing	66	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c.getString());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  c.getString());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  c.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getString());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getString());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
63	[BUG]  [BUGGY]  For(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
64	[BUG]  [BUGGY]  For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
65	[BUG]  [BUGGY]  For(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  c);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  c);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  c);	  Preconditions.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR,  arguments);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(c.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()!=  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(c.getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(c.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
72	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
73	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
74	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME,  arguments);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
75	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION,  arguments);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
80	[BUG]  [BUGGY]  Node  next  =  n.getPreviousChild();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getPreviousChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getPreviousChild();	  Node    next    =    n.getfirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getLastChild());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getLastChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.VAR,    n.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  c.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  c.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  c.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.VAR,    n.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getString());  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getString());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.VAR,    n.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getLineno());  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getLineno());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getLineno());	  Preconditions.checkState(n.getType()    ==    Token.VAR,    n.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
85	[BUG]  [BUGGY]  for(Node  c  =  n.getParent();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getParent();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getParent();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getNext();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
86	[BUG]  [BUGGY]  for(Node  c  =  n.getChildCount();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getChildCount();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getChildCount();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getNext();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
87	[BUG]  [BUGGY]  for(Node  c,  next  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  next  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  next  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
88	[BUG]  [BUGGY]  For(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
89	[BUG]  [BUGGY]  For(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.next)  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
90	[BUG]  [BUGGY]  For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
91	[BUG]  [BUGGY]  For(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
92	[BUG]  [BUGGY]  For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  next  =  n.getFirstChild();  c!=  null;  c  =  next.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
93	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
94	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild().getNext()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getFirstChild().getNext()  +  1;  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getFirstChild().getNext()  +  1;	  Node    next    =    n.getNext()    +    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
95	[BUG]  [BUGGY]  Node  next  =  n.getParent()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getParent()  +  1;  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getParent()  +  1;	  Node    next    =    n.getNext()    +    1;    	non-compiled	[CE]  reached  end  of  file  while  parsing	49	None	replace
96	[BUG]  [BUGGY]  Node  c  =  node.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  c  =  node.getLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  c  =  node.getLastChild();	  Node    c    =    n.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
97	[BUG]  [BUGGY]  Node  next  =  n.getPrevious();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getPrevious();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getPrevious();	  Node    next    =    n.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
98	[BUG]  [BUGGY]  For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
99	[BUG]  [BUGGY]  For(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
100	[BUG]  [BUGGY]  For(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	60	None	replace
101	[BUG]  [BUGGY]  Node  next  =  c.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  c.getNext();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  c.getNext();	  Node    next    =    c.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
102	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
103	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
104	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
105	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL,  arguments);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.CALL);    	non-compiled	[CE]  reached  end  of  file  while  parsing	63	None	replace
106	[BUG]  [BUGGY]  for(Node  c,  c.getFirstChild()!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  c.getFirstChild()!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c.getFirstChild()!=  null;  c  =  c.next)  {	  for(Node    c,    next    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME,  arguments);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	43	None	replace
111	[BUG]  [BUGGY]  for(Node  c,  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    next    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
112	[BUG]  [BUGGY]  for(Node  c,  node  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  node  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  node  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    next    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
113	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
114	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
115	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
116	[BUG]  [BUGGY]  for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
117	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.hasChildren());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
118	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.hasChildren());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
119	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionDeclaration());  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionDeclaration());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isFunctionDeclaration());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
120	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExported());  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExported());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExported());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
121	[BUG]  [BUGGY]  For(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  next,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
122	[BUG]  [BUGGY]  For(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
123	[BUG]  [BUGGY]  for(Node  c  =  n.getParent();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getParent();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getParent();  c!=  null;  c  =  c.next)  {	  for(Node    c    =    n.getNext();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
124	[BUG]  [BUGGY]  for(Node  c  =  n.getChildCount();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getChildCount();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getChildCount();  c!=  null;  c  =  c.next)  {	  for(Node    c    =    n.getNext();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	47	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  argument);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  argument);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  argument);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
126	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext());  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext());	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
127	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c);	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
128	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree());  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree());	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
129	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent);  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent);	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
130	[BUG]  [BUGGY]  Node  next  =  n.getNext()  &&  n.getLineno()!=  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getNext()  &&  n.getLineno()!=  n.getCharno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  &&  n.getLineno()!=  n.getCharno();	  Node    next    =    n.getNext()    ||    n.getLineno()!=    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
131	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild()  ||  n.getLineno()!=  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getFirstChild()  ||  n.getLineno()!=  n.getCharno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getFirstChild()  ||  n.getLineno()!=  n.getCharno();	  Node    next    =    n.getNext()    ||    n.getLineno()!=    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
132	[BUG]  [BUGGY]  Node  next  =  n.getNext()  &&  n.getLineno()  >=  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getNext()  &&  n.getLineno()  >=  n.getCharno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  &&  n.getLineno()  >=  n.getCharno();	  Node    next    =    n.getNext()    ||    n.getLineno()!=    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
133	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  &&  n.getType()  ==  Token.VAR);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
134	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()!=  Token.VAR);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
135	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()!=  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
136	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  c.getType()  ==  Token.VAR);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  +  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  *  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
139	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c,    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
140	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c,    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
141	[BUG]  [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c,    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
142	[BUG]  [BUGGY]  for(Node  next,  c  =  n.getLastChild();  c!=  null;  c  =  c)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  next,  c  =  n.getLastChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  next,  c  =  n.getLastChild();  c!=  null;  c  =  c)  {	  for(Node    c,    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
143	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  &&  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
144	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()!=  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
145	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION,  arguments);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
146	[BUG]  [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()!=  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
147	[BUG]  [BUGGY]  Node  next  =  n.getNext()  &&  n.getLineno()  ==  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getNext()  &&  n.getLineno()  ==  n.getCharno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  &&  n.getLineno()  ==  n.getCharno();	  Node    next    =    n.getNext()    ||    n.getLineno()    ==    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
148	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild()  ||  n.getLineno()  ==  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getFirstChild()  ||  n.getLineno()  ==  n.getCharno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getFirstChild()  ||  n.getLineno()  ==  n.getCharno();	  Node    next    =    n.getNext()    ||    n.getLineno()    ==    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
149	[BUG]  [BUGGY]  Node  next  =  n.getNext()  ||  n.getLineno()  ==  n.getLineno();  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getNext()  ||  n.getLineno()  ==  n.getLineno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  ||  n.getLineno()  ==  n.getLineno();	  Node    next    =    n.getNext()    ||    n.getLineno()    ==    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
150	[BUG]  [BUGGY]  Node  next  =  n.getNext()  /  ||  n.getLineno()  ==  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getNext()  /  ||  n.getLineno()  ==  n.getCharno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  /  ||  n.getLineno()  ==  n.getCharno();	  Node    next    =    n.getNext()    ||    n.getLineno()    ==    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
151	[BUG]  [BUGGY]  for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    next,    c    =    n.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	28	None	replace
152	[BUG]  [BUGGY]  for(Node  next,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  next,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  next,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	36	None	replace
153	[BUG]  [BUGGY]  for(Node  c  =  n.getChildren();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getChildren();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getChildren();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getNext();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	52	None	replace
154	[BUG]  [BUGGY]  Node  c  =  n.getfirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  c  =  n.getfirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  c  =  n.getfirstChild();	  Node    c    =    n.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	30	None	replace
155	[BUG]  [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  c  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {	  For(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	64	None	replace
156	[BUG]  [BUGGY]  for(Node  c,  node  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  node  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  node  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {	  for(Node    c,    next    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	34	None	replace
157	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild().cloneTree();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getFirstChild().cloneTree();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getFirstChild().cloneTree();	  Node    next    =    n.getFirstChild().getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	replace
158	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
159	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  0);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  0);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  0);	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
160	[BUG]  [BUGGY]  Node  c  =  n.getChildCount();  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  c  =  n.getChildCount();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  c  =  n.getChildCount();	  Node    c    =    n.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	31	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	42	None	replace
162	[BUG]  [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
163	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c;  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c;  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c;	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c);    	non-compiled	[CE]  reached  end  of  file  while  parsing	53	None	replace
164	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR,  n);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR,  n);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(c.getType()  ==  Token.VAR,  n);	  Context.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
165	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(c.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(c.getType()  ==  Token.FUNCTION);	  Context.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
167	[BUG]  [BUGGY]  Node  next  =  n.getNext()  &&  n.getLineno()  >>  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getNext()  &&  n.getLineno()  >>  n.getCharno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  &&  n.getLineno()  >>  n.getCharno();	  Node    next    =    n.getNext()    ||    n.getLineno()!=    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
168	[BUG]  [BUGGY]  for(Node  c  =  n.getfirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getfirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getfirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	39	None	replace
169	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Context.checkState(n.getType()    ==    Token.VAR    ||    n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	50	None	replace
170	[BUG]  [BUGGY]  for(Node  c  =  n.getfirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getfirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getfirstChild();  c!=  null;  c  =  c.next)  {	  for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.VAR);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()!=    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	replace
172	[BUG]  [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	37	None	replace
173	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  arguments!=  null);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  arguments!=  null);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  arguments!=  null);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
174	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  0);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  0);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  0);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
175	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExtern());  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExtern());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExtern());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR,  n);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR,  n);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR,  n);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.CALL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR  ||  c.getType()  ==  Token.CALL);	  Preconditions.checkState(c.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	19	None	replace
178	[BUG]  [BUGGY]  For(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()!=  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()!=  Token.NAME);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getCharno());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getCharno());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getCharno());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getChildCount());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getChildCount());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.VAR,    n.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.VAR,    n.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
184	[BUG]  [BUGGY]  Node  next  =  n!=  null?  null  :  n.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n!=  null?  null  :  n.getParent();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n!=  null?  null  :  n.getParent();	  Node    next    =    n.getParent();    	non-compiled	[CE]  reached  end  of  file  while  parsing	48	None	replace
185	[BUG]  [BUGGY]  Node  next  =  n.getNext()  -  n.getLineno()  {  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getNext()  -  n.getLineno()  {  n.getCharno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  -  n.getLineno()  {  n.getCharno();	  Node    next    =    n.getNext()    ||    n.getLineno()    ==    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
186	[BUG]  [BUGGY]  Node  next  =  n.getNext()  +  n.getLineno()  ==  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getNext()  +  n.getLineno()  ==  n.getCharno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  +  n.getLineno()  ==  n.getCharno();	  Node    next    =    n.getNext()    ||    n.getLineno()    ==    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	replace
187	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getNext();  c!=  null;  c  =  c.cloneTree())  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  c  =  n.getNext();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getNext();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  arguments.length);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  arguments.length);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  arguments.length);	  Preconditions.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	17	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()!=    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
190	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext()  ||  c.hasChildren())  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext()  ||  c.hasChildren())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext()  ||  c.hasChildren())  {	  For(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	40	None	replace
191	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getfirstChild();  c!=  null;  c  =  c)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c,  c  =  n.getfirstChild();  c!=  null;  c  =  c)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getfirstChild();  c!=  null;  c  =  c)  {	  for(Node    c,    c    =    n.getLastChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments.length);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments.length);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments.length);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
193	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c  >=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  n.getFirstChild();  c  >=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getFirstChild();  c  >=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getFirstChild();    c    ==    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	41	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getString());  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getString());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getName());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getName());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getName());	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getString());    	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount()  >  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME,    n.getChildCount());    	non-compiled	[CE]  reached  end  of  file  while  parsing	62	None	replace
197	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	  Context.checkState(n.getType()    ==    Token.VAR,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
198	[BUG]  [BUGGY]  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.next)  {	  for(Node    c    =    n.getLastChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	replace
199	[BUG]  [BUGGY]  Node  next  =  n.getNext()  +  n.getLineno()  }  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.getNext()  +  n.getLineno()  }  n.getCharno();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  +  n.getLineno()  }  n.getCharno();	  Node    next    =    n.getNext()    ||    n.getLineno()!=    n.getCharno();    	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	replace
200	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR,  arguments);	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  arguments);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR,  arguments);	  Preconditions.checkState(n.getType()    ==    Token.NAME    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
202	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpressionNode());  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpressionNode());  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.isExpressionNode());	  Context.checkState(n.getType()    ==    Token.FUNCTION    ||    n.hasChildren());    	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	replace
203	[BUG]  [BUGGY]  Node  next  =  n.removeLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  n.removeLastChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.removeLastChild();	  Node    next    =    n.removeFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	54	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  n);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  n);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.VAR,    n.getFirstChild());    	non-compiled	[CE]  reached  end  of  file  while  parsing	44	None	replace
205	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.FUNCTION);	  Context.checkState(n.getType()    ==    Token.FUNCTION,    arguments);    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
206	[BUG]  [BUGGY]  Node  next  =  node.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  Node  next  =  node.getFirstChild();  [BUGGY]      for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  node.getFirstChild();	  Node    next    =    c.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	16	None	replace
207	[BUG]  [BUGGY]  for(Node  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  for(Node  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    node.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	65	None	replace
208	[BUG]  [BUGGY]  For(Node  next,  n  =  c.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  next,  n  =  c.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  next,  n  =  c.getFirstChild();  c!=  null;  c  =  c.next)  {	  For(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	35	None	replace
209	[BUG]  [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments      [CONTEXT]      private  void  splitVarDeclarations(Node  n)  {      [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]      next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(     "Empty  VAR  node.     ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.cloneTree())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	replace
