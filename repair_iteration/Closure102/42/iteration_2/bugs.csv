bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION,  arguments);	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
2	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
3	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
4	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
5	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR,  arguments);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR,  arguments);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
6	[BUG]  [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(c.getType()  ==  Token.VAR);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(c.getType()  ==  Token.VAR);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
7	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
8	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
9	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
10	[BUG]  [BUGGY]  for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  arguments);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
15	[BUG]  [BUGGY]  Node  next  =  c.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  next  =  c.getLastChild();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  c.getLastChild();	      Node    next    =    n.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
16	[BUG]  [BUGGY]  Node  next  =  c.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  next  =  c.getFirstChild();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  c.getFirstChild();	      Node    next    =    n.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  arguments);  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  arguments);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  arguments);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(c.getType()  ==  Token.VAR);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(c.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
21	[BUG]  [BUGGY]  Node  next  =  n.getNext()  ||  n.getLineno()!=  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  next  =  n.getNext()  ||  n.getLineno()!=  n.getCharno();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  ||  n.getLineno()!=  n.getCharno();	      Node    next    =    n.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
22	[BUG]  [BUGGY]  Node  next  =  n.getNext()  ||  n.getLineno()  ==  n.getCharno();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  next  =  n.getNext()  ||  n.getLineno()  ==  n.getCharno();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  ||  n.getLineno()  ==  n.getCharno();	      Node    next    =    n.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
23	[BUG]  [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
24	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
25	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
26	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c)  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
27	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.cloneTree())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
28	[BUG]  [BUGGY]  for(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  next,  c  =  n.getFirstChild();  c!=  null;  c  =  c)  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
29	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getLastChild();  c!=  null;  c  =  c.next)  {	  for    (Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
30	[BUG]  [BUGGY]  Node  c  =  n.getLastChild();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  c  =  n.getLastChild();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  c  =  n.getLastChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
31	[BUG]  [BUGGY]  Node  c  =  n.getNext();  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  c  =  n.getNext();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  c  =  n.getNext();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
32	[BUG]  [BUGGY]  Node  c  =  node.getFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  c  =  node.getFirstChild();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  c  =  node.getFirstChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
33	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.next)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.next)  {	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
34	[BUG]  [BUGGY]  for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  next  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
35	[BUG]  [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
36	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  n  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
37	[BUG]  [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  For(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  n  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
38	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	8	None	replace
39	[BUG]  [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getLastChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
40	[BUG]  [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
41	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	13	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
47	[BUG]  [BUGGY]  for(Node  c  =  n.getNext();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c  =  n.getNext();  c!=  null;  c  =  c.next)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getNext();  c!=  null;  c  =  c.next)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
48	[BUG]  [BUGGY]  Node  next  =  n.getParent();  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  next  =  n.getParent();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getParent();	      Node    next    =    n.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
49	[BUG]  [BUGGY]  Node  next  =  n.getNext()  +  1;  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  next  =  n.getNext()  +  1;  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getNext()  +  1;	      Node    next    =    n.getNext();    	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	replace
50	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
51	[BUG]  [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  n  =  n.getFirstChild();  c  ==  null;  c  =  c.next)  {	  for(Node    c,    n    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	12	None	replace
52	[BUG]  [BUGGY]  for(Node  c  =  n.getNext();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c  =  n.getNext();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getNext();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
53	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c);  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c);  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c);	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	replace
54	[BUG]  [BUGGY]  Node  next  =  n.removeFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  next  =  n.removeFirstChild();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.removeFirstChild();	      Node    next    =    n.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
55	[BUG]  [BUGGY]  Node  next  =  n.getfirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  next  =  n.getfirstChild();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getfirstChild();	      Node    next    =    n.getLastChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	replace
56	[BUG]  [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c,  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c,  c  =  n.getFirstChild();  c  ==  null;  c  =  c.getNext())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
57	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.hasChildren());	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
58	[BUG]  [BUGGY]  Node  c  =  n.removeFirstChild();  [CE]  reached  end  of  file  while  parsing  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  c  =  n.removeFirstChild();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  c  =  n.removeFirstChild();	      Node    c    =    n.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	replace
59	[BUG]  [BUGGY]  Node  next  =  n.getFirstChild().getNext();  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Node  next  =  n.getFirstChild().getNext();  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Node  next  =  n.getFirstChild().getNext();	      Node    next    =    n.getFirstChild();    	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	replace
60	[BUG]  [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	replace
61	[BUG]  [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent)  {  [CE]  reached  end  of  file  while  parsing  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  n.getFirstChild();  c!=  null;  c  =  c.parent)  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	15	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  reached  end  of  file  while  parsing  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	replace
63	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [CE]  reached  end  of  file  while  parsing  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.CALL);	      Context.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  reached  end  of  file  while  parsing	6	None	replace
64	[BUG]  [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	For(Node  c,  c  =  n.getFirstChild();  c!=  null;  c  =  c.next)  {	  for    (Node    c,    c    =    n.getFirstChild();    c!=    null;    c    =    c.next)    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	10	None	replace
65	[BUG]  [BUGGY]  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [CE]  reached  end  of  file  while  parsing  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {  [BUGGY]    next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	for(Node  c  =  node.getFirstChild();  c!=  null;  c  =  c.getNext())  {	  for(Node    c    =    n.getFirstChild();    c!=    null;    c    =    c.getNext())    {    	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	replace
66	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  reached  end  of  file  while  parsing  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  splitVarDeclarations(Node  n)  {    [BUGGY]  Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    for  (Node  next,  c  =  n.getFirstChild();  c  !=  null;  c  =  next)  {  next  =  c.getNext();  if  (c.getType()  ==  Token.VAR)  {  if  (assertOnChange  &&  !c.hasChildren())  {  throw  new  IllegalStateException(   "Empty  VAR  node.   ");  }  while  (c.getFirstChild()  !=  c.getLastChild())  {  Node  name  =  c.getFirstChild();  c.removeChild(name);  Node  newVar  =  new  Node(Token.VAR,  name,  n.getLineno(),  n.getCharno());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  splitVarDeclarations  [RETURN_TYPE]  void  Node  n  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  Node  c  n  name  newVar  next  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	355	355	1	replace	Context.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT);	      Context.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	replace
