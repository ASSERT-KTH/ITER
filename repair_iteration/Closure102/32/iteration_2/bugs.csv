bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  arguments);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  arguments);	      NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	19	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argument);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  argument);	      NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	19	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentMap);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  argumentMap);	      NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	19	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,<null>)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	      NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,<null>)	19	None	replace
5	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  arguments	5	None	replace
6	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));	  Context.reportCodeChange();    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)	5	None	replace
7	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	  Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE	5	None	replace
8	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  CONVERT_WHILE_TO_FOR));	  Context.reportCodeChange();    	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)	5	None	replace
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(parent,  n.getFirstChild());	      NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	21	13	replace
10	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n.getFirstChild());	      NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	21	13	replace
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeUtil.removeChild(n,  parent);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(n,  parent);	      NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	21	13	replace
12	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeUtil.removeChild(n,  parent);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(n,  parent);	      NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	21	13	replace
13	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeUtil.removeChild(parent,  n  +  1);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n  +  1);	      NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	21	None	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeUtil.removeChild(parent,  n.getLastChild());	      NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	21	13	replace
15	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeUtil.removeChild(parent,  n.getLastChild());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n.getLastChild());	      NodeUtil.removeChild(parent,    n);    	compilable	  [FE]  RuntimeException  	21	13	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  arguments);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  arguments);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	13	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,Node)	13	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  argument);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  argument);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	13	None	replace
19	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,  parent,  this);	      NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	13	13	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  this);	      NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	13	13	replace
21	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  v  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  n.getLastChild();	      Node    v    =    n.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	26	1	replace
22	[BUG]  [BUGGY]  Node  v  =  n.getLastChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  v  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getLastChild();	      Node    v    =    n.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	26	1	replace
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  v  =  parent.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  parent.getFirstChild();	      Node    v    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	26	13	replace
24	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  [FE]  RuntimeException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  v  =  parent.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  parent.getFirstChild();	      Node    v    =    n.getFirstChild();    	compilable	  [FE]  RuntimeException  	26	13	replace
25	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  v  =  n.getNext();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  n.getNext();	      Node    v    =    n.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	26	1	replace
26	[BUG]  [BUGGY]  Node  v  =  n.getNext();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  v  =  n.getNext();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.getNext();	      Node    v    =    n.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	26	1	replace
27	[BUG]  [BUGGY]  Node  v  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  v  =  node.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  node.getFirstChild();	      Node    v    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	26	None	replace
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        n    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	27	9	add
29	[BUG]  [BUGGY]      n  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	27	9	add
30	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        n    =    n.getFirstChild();    n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	27	9	add
31	[BUG]  [BUGGY]      n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getFirstChild();    n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	27	9	add
32	[BUG]  [BUGGY]      n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getFirstChild();    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	27	None	add
33	[BUG]  [BUGGY]      n  =  n.getFirstChild();  no  =  n.getFirstChild();  [CE]  cannot  find  symbol  no  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  no  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getFirstChild();    no  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  no	27	None	add
34	[BUG]  [BUGGY]      n  =  n.getFirstChild();  n  =  n.getFirstChild());  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getFirstChild());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getFirstChild();    n  =  n.getFirstChild());	  	non-compiled	[CE]  ';'  expected	27	None	add
35	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  parent  =  n.getNext();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getNext();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	14	None	replace
36	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  parent  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getLastChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	14	None	replace
37	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  parent  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getFirstChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	14	None	replace
38	[BUG]  [BUGGY]  Node  parent  =  n.getParent()  +  1;  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  parent  =  n.getParent()  +  1;  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getParent()  +  1;	      Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	14	None	replace
39	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	31	13	add
40	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	31	13	add
41	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	31	None	add
42	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	31	13	add
43	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	31	13	add
44	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	31	13	add
45	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	31	13	add
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	31	13	add
47	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	31	13	add
48	[BUG]  [BUGGY]  extractForInitializer(t,  n,  null,  null);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(t,  n,  null,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  null,  null);	  extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	23	None	replace
49	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(arguments	      	non-compiled	[CE]  ';'  expected	8	None	replace
50	[BUG]  [BUGGY]  ||  n.getType()  ==  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  ||  n.getType()  ==  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	||  n.getType()  ==  Token.VAR)  {  arguments=Array.prototype.slice.call(arguments	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
51	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  function()  {  arguments=Array.prototype.slice.call(arguments  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(arguments	      	non-compiled	[CE]  ';'  expected	8	None	replace
52	[BUG]  [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n  ==  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  function  f()  {  arguments=Array.prototype.slice.call(n  ==  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function  f()  {  arguments=Array.prototype.slice.call(n  ==	      	non-compiled	[CE]  ';'  expected	8	None	replace
53	[BUG]  [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n  ==  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  function()  {  arguments=Array.prototype.slice.call(n  ==  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	function()  {  arguments=Array.prototype.slice.call(n  ==	      	non-compiled	[CE]  ';'  expected	8	None	replace
54	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Context.reportCodeChange();  [CE]  cannot  find  symbol  Context  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Context.reportCodeChange();  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Context.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  Context	22	None	add
55	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getParent();  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
56	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));	  	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE	22	None	add
57	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE,  arguments));	  	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE	22	None	add
58	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE));	  	non-compiled	[CE]  no  suitable  method  found  for  make(NodeTraversal,Node,boolean)	22	None	add
59	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [CE]  cannot  find  symbol  arguments  [FE]              RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Context.report(JSError.make(t,  n,  MAKE_LOCAL_NAMES_UNIQUE,  arguments));	  	non-compiled	[CE]  cannot  find  symbol  arguments	22	None	add
60	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  null);  Node  parent  =  n.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  null);  Node  parent  =  n.getFirstChild();  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,    parent,    null);    Node  parent  =  n.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	2	None	add
61	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  null);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  null);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  Context	2	None	add
62	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  null);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  null);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	2	None	add
63	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  null);  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  null);  Node  parent  =  n.getLastChild();  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,    parent,    null);    Node  parent  =  n.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	2	None	add
64	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  null);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  null);  Node  parent  =  n.getParent();  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,    parent,    null);    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	2	None	add
65	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  null);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  null);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,    parent,    null);    Context.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  Context	2	None	add
66	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  null);	  extractForInitializer(n,    parent,    null);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	3	None	replace
67	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  t);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  t);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  parent,  t);	  extractForInitializer(n,    parent,    null);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	3	None	replace
68	[BUG]  [BUGGY]      function  f()  {  arguments=Array.prototype.slice.call(n!=  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      function  f()  {  arguments=Array.prototype.slice.call(n!=  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        function  f()  {  arguments=Array.prototype.slice.call(n!=	  	non-compiled	[CE]  ';'  expected	7	None	add
69	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	32	13	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	32	13	replace
71	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	32	13	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	32	13	replace
73	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	32	13	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	32	13	replace
75	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  null);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  parent,  null);	  MutableNodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	6	None	replace
76	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null,  parent);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  null,  parent);	  MutableNodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	6	None	replace
77	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  null);  [CE]  cannot  find  symbol  Context  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Context.traverse(compiler,  n,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.traverse(compiler,  n,  null);	  MutableNodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  Context	6	None	replace
78	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	12	13	add
79	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);	  	compilable	  [FE]  RuntimeException  	12	13	add
80	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	12	13	add
81	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	12	13	add
82	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  Context	12	None	add
83	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Compiler  compiler  =  t.getCompiler();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeTraversal.traverse(compiler,    n,    this);    Compiler  compiler  =  t.getCompiler();	  	compilable	  [FE]  RuntimeException  	12	13	add
84	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Compiler  compiler  =  t.getCompiler();  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Compiler  compiler  =  t.getCompiler();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Compiler  compiler  =  t.getCompiler();	  	compilable	  [FE]  RuntimeException  	12	13	add
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	12	13	add
86	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	12	13	add
87	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Node    v    =    n.getFirstChild();    Node  v  =  n.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	25	None	add
88	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  n.getLastChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Node    v    =    n.getFirstChild();    Node  v  =  n.getLastChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	25	None	add
89	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  FunctionNode  v  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Node  v  =  n.getFirstChild();  FunctionNode  v  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Node    v    =    n.getFirstChild();    FunctionNode  v  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
90	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Node  v  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Node    v    =    n.getFirstChild();    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	25	None	add
91	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Function  v  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Node  v  =  n.getFirstChild();  Function  v  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Node    v    =    n.getFirstChild();    Function  v  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
92	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	25	9	add
93	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Node  v  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Node    v    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	25	9	add
94	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  arguments);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  arguments);	  MutableNodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	1	None	replace
95	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  argument);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  argument);	  MutableNodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	1	None	replace
96	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  [CE]  cannot  find  symbol  expectedConst  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  expectedConst);	  MutableNodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  expectedConst	1	None	replace
97	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  this);	  MutableNodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	1	None	replace
98	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  n  =  parent.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	n  =  parent.getLastChild();	      n    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	34	13	replace
99	[BUG]  [BUGGY]  n  =  parent.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  n  =  parent.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getLastChild();	      n    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	34	13	replace
100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  n  =  parent.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	n  =  parent.getFirstChild();	      n    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	34	13	replace
101	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  n  =  parent.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	n  =  parent.getFirstChild();	      n    =    n.getLastChild();    	compilable	  [FE]  RuntimeException  	34	13	replace
102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	compilable	  [FE]  RuntimeException  	11	13	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  parent,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	compilable	  [FE]  RuntimeException  	11	13	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  parent);	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Node)	11	None	replace
105	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	20	13	add
106	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	20	13	add
107	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);	  	compilable	  [FE]  RuntimeException  	20	13	add
108	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);	  	compilable	  [FE]  RuntimeException  	20	13	add
109	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);	  	compilable	  [FE]  RuntimeException  	20	13	add
110	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  null);	  	compilable	  [FE]  RuntimeException  	20	13	add
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  [CE]  cannot  find  symbol  expectedConst  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expectedConst);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  expectedConst	9	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [CE]  cannot  find  symbol  argumentMap  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentMap);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argumentMap	9	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentCount);  [CE]  cannot  find  symbol  argumentCount  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentCount);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentCount);	      NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentCount	15	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentStatements);  [CE]  cannot  find  symbol  argumentStatements  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  argumentStatements);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  argumentStatements);	      NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  argumentStatements	15	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  arguments);  [CE]  cannot  find  symbol  arguments  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  arguments);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  arguments);	      NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  arguments	16	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,NodeTraversal)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  t);	      NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,NodeTraversal)	16	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t));  [CE]  constructor  ScopeTicklingCallback  in  class  Normalize.ScopeTicklingCallback  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t));  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(t));	      NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  constructor  ScopeTicklingCallback  in  class  Normalize.ScopeTicklingCallback  cannot  be  applied  to  given  types;	16	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null,  new  ScopeTicklingCallback());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,<null>,Normalize.ScopeTicklingCallback)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,<null>,Normalize.ScopeTicklingCallback)	16	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,Normalize.ScopeTicklingCallback)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean,Normalize.ScopeTicklingCallback)	16	None	replace
120	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	add
121	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	add
122	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  FunctionNodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  FunctionNodeTraversal  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  FunctionNodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    FunctionNodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  cannot  find  symbol  FunctionNodeTraversal	10	None	add
123	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  Context	10	None	add
124	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	10	None	add
125	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	10	None	add
126	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  Context	10	None	add
127	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	13	add
128	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	13	add
129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	29	13	add
130	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	29	13	add
131	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	13	add
132	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()!=  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	13	add
133	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	29	None	add
134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	29	13	add
135	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	29	13	add
136	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  arguments);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  arguments);	  MutableNodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  arguments	4	None	replace
137	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  parent);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  parent);	  MutableNodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	4	None	replace
138	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  parent,  this);	  MutableNodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	4	None	replace
139	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  argument);  [CE]  cannot  find  symbol  argument  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  argument);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  argument);	  MutableNodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  argument	4	None	replace
140	[BUG]  [BUGGY]  translateForNormalization(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  translateForNormalization(t,  n,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForNormalization(t,  n,  parent);	  extractForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
141	[BUG]  [BUGGY]  doStatementNormalization(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  doStatementNormalization(t,  n,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalization(t,  n,  parent);	  extractForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
142	[BUG]  [BUGGY]  parseForNormalization(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  parseForNormalization(t,  n,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	parseForNormalization(t,  n,  parent);	  extractForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
143	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	doStatementNormalizations(t,  n,  parent);	  extractForNormalization(t,    n,    parent);    	compilable	  [FE]  RuntimeException  	35	13	replace
144	[BUG]  [BUGGY]  doStatementNormalizations(t,  n,  parent);  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  doStatementNormalizations(t,  n,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	doStatementNormalizations(t,  n,  parent);	  extractForNormalization(t,    n,    parent);    	compilable	  [FE]  RuntimeException  	35	13	replace
145	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        n    =    n.getLastChild();    n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	33	9	add
146	[BUG]  [BUGGY]      n  =  n.getLastChild();  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getLastChild();    n  =  n.getLastChild();	  	compilable	  [FE]  RuntimeException  	33	9	add
147	[BUG]  [BUGGY]      n  =  n.getLastChild();  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  Node  n  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getLastChild();    Node  n  =  n.getLastChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	33	None	add
148	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        n    =    n.getLastChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	33	9	add
149	[BUG]  [BUGGY]      n  =  n.getLastChild();  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getLastChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  RuntimeException  	33	9	add
150	[BUG]  [BUGGY]      n  =  n.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  break;  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getLastChild();    ||  n.getType()  ==  Token.FUNCTION)  {  break;	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
151	[BUG]  [BUGGY]      n  =  n.getLastChild();  no  =  n.getLastChild();  [CE]  cannot  find  symbol  no  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  no  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getLastChild();    no  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  no	33	None	add
152	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(t,  n,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent);	  extractForInitializer(n,    parent);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	24	None	replace
153	[BUG]  [BUGGY]  ExtractForInitializer(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  ExtractForInitializer(t,  n,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(t,  n,  parent);	  extractForInitializer(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
154	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  arguments);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  parent,  arguments);	  extractForInitializer(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	24	None	replace
155	[BUG]  [BUGGY]  translateForInitializer(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  translateForInitializer(t,  n,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateForInitializer(t,  n,  parent);	  extractForInitializer(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
156	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
157	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
158	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	17	13	add
159	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	17	13	add
160	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	17	None	add
161	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
162	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()!=  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
163	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	17	13	add
164	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n)||  parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	17	13	add
165	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
167	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
169	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
171	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
173	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
175	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
177	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
179	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.NAME);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
181	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  this);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  this);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  parent,  this);	  extractForInitializer(n,    parent,    null);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	3	None	replace
182	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	32	13	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.LABEL);	      Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	compilable	  [FE]  RuntimeException  	32	13	replace
184	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	17	None	add
185	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	17	13	add
186	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	17	13	add
187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
188	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	17	13	add
189	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	17	None	add
190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	17	13	add
191	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	17	13	add
192	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  node,  null);  [CE]  cannot  find  symbol  node  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  node,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  node,  null);	  MutableNodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  node	6	None	replace
193	[BUG]  [BUGGY]      n  =  n.getLastChild();  node  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  node  =  n.getLastChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getLastChild();    node  =  n.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol  node	33	None	add
194	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n)  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeUtil.removeChild(parent,  n)  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeUtil.removeChild(parent,  n)	      NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  ';'  expected	21	None	replace
195	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  node.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  node.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Node    v    =    n.getFirstChild();    Node  v  =  node.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	25	None	add
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	NodeTraversal.traverse(compiler,  n,  null);	      NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	13	13	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  null);	      NodeTraversal.traverse(compiler,    n,    this);    	compilable	  [FE]  RuntimeException  	13	13	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,<null>)  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize,<null>)	13	None	replace
199	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getFirstChild();  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Node  parent  =  n.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
200	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getLastChild();  extractForInitializer(parent,  null,  null);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getLastChild();  extractForInitializer(parent,  null,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Node  parent  =  n.getLastChild();  extractForInitializer(parent,  null,  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
201	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getParent();  extractForInitializer(parent,  null,  null);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getParent();  extractForInitializer(parent,  null,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Node  parent  =  n.getParent();  extractForInitializer(parent,  null,  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
202	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Node  parent  =  n.getFirstChild();  extractForInitializer(parent,  null,  null);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
203	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Node  parent  =  n.getLastChild();  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Node  parent  =  n.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	22	None	add
204	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.addChildToFront(parent,  n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  NodeUtil.addChildToFront(parent,  n);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeUtil.removeChild(parent,    n);    NodeUtil.addChildToFront(parent,  n);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
205	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	20	13	add
206	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	20	13	add
207	[BUG]  [BUGGY]      n  =  n.getFirstChild();  node  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  node  =  n.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getFirstChild();    node  =  n.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  node	27	None	add
208	[BUG]  [BUGGY]      n  =  n.getFirstChild();  n  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  n  =  n.getfirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getFirstChild();    n  =  n.getfirstChild();	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
209	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  false);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  parent,  false);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  parent,  false);	  MutableNodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	1	None	replace
210	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.CALL);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
212	[BUG]  [BUGGY]  extractForInitializer(parent,  n);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  n);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,  n);	  extractForInitializer(n,    parent);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	24	None	replace
213	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  false);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  false);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,  parent,  false);	  extractForInitializer(n,    parent);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	24	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	9	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event);  [CE]  cannot  find  symbol  event  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  event);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  event);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  event	9	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  expectedConst);  [CE]  cannot  find  symbol  expectedConst  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  expectedConst);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  expectedConst);	      NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  expectedConst	19	None	replace
217	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	29	None	add
218	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	29	13	add
219	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	29	13	add
220	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	13	add
221	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	29	13	add
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	29	13	add
223	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(NodeUtil.isStatementBlock(parent))  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	29	13	add
224	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	12	13	add
225	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	12	13	add
226	[BUG]  [BUGGY]  Node  parent  =  n.getParentNode();  [CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  parent  =  n.getParentNode();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  parent  =  n.getParentNode();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	14	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,Normalize)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  this);	      NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,Normalize)	16	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  new  ScopeTicklingCallback());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,Normalize.ScopeTicklingCallback)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  new  ScopeTicklingCallback());	      NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,Normalize.ScopeTicklingCallback)	16	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  false);	      NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize.ScopeTicklingCallback,boolean)	16	None	replace
230	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Node  n  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	31	None	add
231	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	31	13	add
232	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	31	13	add
233	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	31	None	add
234	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForNormalization(t,  n,  parent,  arguments);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  arguments);	  extractForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	35	None	replace
235	[BUG]  [BUGGY]  ExtractForNormalization(t,  n,  parent,  arguments);  [CE]  cannot  find  symbol  arguments  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  ExtractForNormalization(t,  n,  parent,  arguments);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForNormalization(t,  n,  parent,  arguments);	  extractForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  arguments	35	None	replace
236	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  false);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForNormalization(t,  n,  parent,  false);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  false);	  extractForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
237	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  null);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForNormalization(t,  n,  parent,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  null);	  extractForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConstants);  [CE]  cannot  find  symbol  expectedConstants  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  expectedConstants);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  expectedConstants);	      NodeTraversal.traverse(compiler,    n,    parent,    arguments);    	non-compiled	[CE]  cannot  find  symbol  expectedConstants	15	None	replace
239	[BUG]  [BUGGY]      NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	  	non-compiled	[CE]  not  a  statement	7	None	add
240	[BUG]  [BUGGY]      NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeUtil.isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	  	non-compiled	[CE]  not  a  statement	7	None	add
241	[BUG]  [BUGGY]      NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.NAME);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	7	None	add
242	[BUG]  [BUGGY]      NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeUtil.isVarDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  not  a  statement	7	None	add
243	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  null);  Context.checkNotNull(parent);  [CE]  cannot  find  symbol  Context  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  null);  Context.checkNotNull(parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,    parent,    null);    Context.checkNotNull(parent);	  	non-compiled	[CE]  cannot  find  symbol  Context	2	None	add
244	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  Context  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  cannot  find  symbol  Context	10	None	add
245	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));  [CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  parent.replaceChild(n,  new  NodeTraversal(compiler));	  	non-compiled	[CE]  no  suitable  constructor  found  for  NodeTraversal(AbstractCompiler)	10	None	add
246	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  parent);	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
248	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Context.report(JSError.make(t,  n,  NON_GLOBAL_NAMES_UNIQUE));	  Context.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  NON_GLOBAL_NAMES_UNIQUE	5	None	replace
249	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null,  null);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  null,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  null,  null);	  extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	23	None	replace
250	[BUG]  [BUGGY]      n  =  n.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getLastChild();    ||  n.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
251	[BUG]  [BUGGY]      n  =  n.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getLastChild();    ||  n.getType()  ==  Token.FUNCTION)  {  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
252	[BUG]  [BUGGY]      n  =  n.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getLastChild();  ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getLastChild();    ||  n.getType()  ==  Token.FUNCTION)  {  normalizeVarDeclarations(n);	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  annotations);  [CE]  cannot  find  symbol  annotations  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  annotations);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  annotations);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  annotations	9	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  annotated);  [CE]  cannot  find  symbol  annotated  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  annotated);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  annotated);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  annotated	9	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Normalize)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback(),  this);	      NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Normalize.ScopeTicklingCallback,Normalize)	11	None	replace
256	[BUG]  [BUGGY]  extractForNormalizer(n,  null,  null);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForNormalizer(n,  null,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalizer(n,  null,  null);	  extractForInitializer(parent,    null,    null);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
257	[BUG]  [BUGGY]  extractForInitializer(t,  n,  parent,  null);  [CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(t,  n,  parent,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(t,  n,  parent,  null);	  extractForInitializer(n,    parent,    null);    	non-compiled	[CE]  method  extractForInitializer  in  class  Normalize  cannot  be  applied  to  given  types;	3	None	replace
258	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  t.getModule());	      Preconditions.checkState(n.getType()    ==    Token.NAME);    	compilable	  [FE]  RuntimeException  	18	13	replace
260	[BUG]  [BUGGY]  extractForNormalization(t,  n,  parent,  argument);  [CE]  cannot  find  symbol  argument  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForNormalization(t,  n,  parent,  argument);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForNormalization(t,  n,  parent,  argument);	  extractForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  argument	35	None	replace
261	[BUG]  [BUGGY]  conductNormalization(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  conductNormalization(t,  n,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	conductNormalization(t,  n,  parent);	  extractForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
262	[BUG]  [BUGGY]  translateNormalization(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  translateNormalization(t,  n,  parent);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	translateNormalization(t,  n,  parent);	  extractForNormalization(t,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
263	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        n    =    n.getFirstChild();    n  =  parent.getFirstChild();	  	compilable	  [FE]  RuntimeException  	27	13	add
264	[BUG]  [BUGGY]      n  =  n.getFirstChild();  n  =  parent.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getFirstChild();    n  =  parent.getFirstChild();	  	compilable	  [FE]  RuntimeException  	27	13	add
265	[BUG]  [BUGGY]      n  =  n.getFirstChild();  n  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n  =  n.getFirstChild();  n  =  node.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n    =    n.getFirstChild();    n  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  node	27	None	add
266	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol	29	None	add
267	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    NodeUtil.isStatementBlock(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	29	None	add
268	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	29	13	add
269	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	29	13	add
270	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  preconditions  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.VAR);  Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.VAR);    Preconditions.checkState(n.getType()  ==  Token.VAR);  preconditions.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  preconditions	29	None	add
271	[BUG]  [BUGGY]      n.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  	7	None	add
272	[BUG]  [BUGGY]      n.getLastChild().getString().endsWith( "__ "))  {  normalizeVarDeclarations(n);  [CE]  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n.getLastChild().getString().endsWith( "__ "))  {  normalizeVarDeclarations(n);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n.getLastChild().getString().endsWith( "__ "))  {  normalizeVarDeclarations(n);	  	non-compiled	[CE]  	7	None	add
273	[BUG]  [BUGGY]      n.getLastChild().getString().equals( "prototype "))  {  normalizeVarDeclarations(n);  [CE]  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n.getLastChild().getString().equals( "prototype "))  {  normalizeVarDeclarations(n);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n.getLastChild().getString().equals( "prototype "))  {  normalizeVarDeclarations(n);	  	non-compiled	[CE]  	7	None	add
274	[BUG]  [BUGGY]      n.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  	7	None	add
275	[BUG]  [BUGGY]      n.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n.getLastChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  	7	None	add
276	[BUG]  [BUGGY]      n.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");  [CE]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      n.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        n.getFirstChild().getString().endsWith( "__ "))  {  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  	7	None	add
277	[BUG]  [BUGGY]  ExtractForInitializer(parent,  n);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  ExtractForInitializer(parent,  n);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	ExtractForInitializer(parent,  n);	  extractForInitializer(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
278	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  v  =  n.removeFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Node  v  =  n.removeFirstChild();	      Node    v    =    n.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	26	12	replace
279	[BUG]  [BUGGY]  Node  v  =  n.removeFirstChild();  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Node  v  =  n.removeFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Node  v  =  n.removeFirstChild();	      Node    v    =    n.getFirstChild();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  var  FOO=true  	26	12	replace
280	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  Context  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  cannot  find  symbol  Context	10	None	add
281	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [CE]  cannot  find  symbol  Context  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  Context.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    Context.checkState(n.getType()  ==  Token.VAR);  NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());	  	non-compiled	[CE]  cannot  find  symbol  Context	10	None	add
282	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	add
283	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  new  ScopeTicklingCallback());  t.getCompiler().reportCodeChange();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    new    ScopeTicklingCallback());    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	10	1	add
284	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n);	  MutableNodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	6	None	replace
285	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Context.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Context  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Context.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol  Context	22	None	add
286	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  Context	22	None	add
287	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Context.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  Context	22	None	add
288	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	22	13	add
289	[BUG]  [BUGGY]  extractForInitializer(parent,  null,  null);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(parent,  null,  null);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(parent,    null,    null);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	22	13	add
290	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);  [CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.isStatementBlock(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  method  isStatementBlock  in  class  NodeUtil  cannot  be  applied  to  given  types;	17	None	add
291	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.checkState(n.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    NodeUtil.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
292	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	17	13	add
293	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);  if(parent.getType()  ==  Token.FUNCTION)  {  splitVarDeclarations(n);  }	  	compilable	  [FE]  RuntimeException  	17	13	add
294	[BUG]  [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  cannot  find  symbol  MutableNodeTraversal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  MutableNodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	MutableNodeTraversal.traverse(compiler,  n,  this,  null);	  MutableNodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol  MutableNodeTraversal	4	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  predicate);  [CE]  cannot  find  symbol  predicate  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  predicate);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ScopeTicklingCallback(),  predicate);	      NodeTraversal.traverse(compiler,    n,    parent,    new    ScopeTicklingCallback());    	non-compiled	[CE]  cannot  find  symbol  predicate	16	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap);  [CE]  cannot  find  symbol  constantMap  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  constantMap);	      NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  constantMap	19	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,<null>)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  null);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  null);	      NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Normalize,<null>)	19	None	replace
298	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	      Preconditions.checkState(n.getType()    ==    Token.VAR);    	compilable	  [FE]  RuntimeException  	30	13	replace
300	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    NodeUtil.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol	31	None	add
301	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild	  	non-compiled	[CE]  ')'  expected	31	None	add
302	[BUG]  [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChil  [CE]  ')'  expected  [FE]        RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChil  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  if(NodeUtil.isStatementBlock(n)||  n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChil	  	non-compiled	[CE]  ')'  expected	31	None	add
303	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  null);  t.getCompiler().reportCodeChange();  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	2	1	add
304	[BUG]  [BUGGY]  extractForInitializer(n,  parent,  null);  t.getCompiler().reportCodeChange();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]  extractForInitializer(n,  parent,  null);  t.getCompiler().reportCodeChange();  [BUGGY]    }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	extractForInitializer(n,    parent,    null);    t.getCompiler().reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments  	2	1	add
305	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    nodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	12	None	add
306	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(n.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  Context  [FE]      RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeTraversal.traverse(compiler,  n,  this);  Context.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeTraversal.traverse(compiler,    n,    this);    Context.checkState(n.getType()  ==  Token.VAR);	  	non-compiled	[CE]  cannot  find  symbol  Context	12	None	add
307	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	add	        NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	20	13	add
308	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      NodeUtil.removeChild(parent,  n);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        NodeUtil.removeChild(parent,    n);    Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	20	13	add
309	[BUG]  [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  [CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){arguments=Array.prototype.slice.call(arguments    [CONTEXT]    private  void  doStatementNormalizations(NodeTraversal  t,  Node  n,  Node  parent)  {  if  (n.getType()  ==  Token.LABEL)  {  normalizeLabels(n);  }    if  (NodeUtil.isStatementBlock(n)  ||  n.getType()  ==  Token.LABEL)  {    [BUGGY]      Node  v  =  n.getFirstChild();  Node  v  =  parent.getFirstChild();  [BUGGY]    extractForInitializer(n,  null,  null);  }    if  (NodeUtil.isStatementBlock(n))  {  splitVarDeclarations(n);  }  if  (n.getType()  ==  Token.FUNCTION)  {  moveNamedFunctions(n.getLastChild());  [CLASS]  Normalize  PropogateConstantAnnotations  VerifyConstants  DuplicateDeclarationHandler  ScopeTicklingCallback  [METHOD]  doStatementNormalizations  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  AbstractCompiler  compiler  boolean  CONVERT_WHILE_TO_FOR  MAKE_LOCAL_NAMES_UNIQUE  assertOnChange  checkUserDeclarations  expectedConst  forbidChanges  isConst  Map  constantMap  NodeTraversal  t  Node  n  parent  	projects/Closure102/src/com/google/javascript/jscomp/Normalize.java	0.2773500981126146	259	259	1	replace	        Node    v    =    n.getFirstChild();    Node  v  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  v  is  already  defined  in  method  doStatementNormalizations(NodeTraversal,Node,Node)	25	None	add
